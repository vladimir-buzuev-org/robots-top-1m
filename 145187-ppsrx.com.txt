<!DOCTYPE html>

<!--[if lt IE 10]> <html class="disable-flex"> <![endif]-->
<!--[if gte IE 10]> <html> <![endif]-->
<!--[if !IE]>--> <html> <!--<![endif]-->
<head><script type="text/javascript" src="/dtagent_ICA23STVgpqrtx_7000000071004.js" data-dtconfig="rid=RID_-133407400|rpid=1862345109|domain=ppsrx.com|rt=10000|ssc=1|lastModification=1504617669060|reportUrl=/dynaTraceMonitor|tp=500,50,0,1|lab=1"></script><head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="fragment" content="!" />
    <meta name="apple-itunes-app" />
    <meta name="google-play-app" />

    
    
    
    
    
    
    
    
    
    

    <title>Postal Prescription Services</title>
    <link rel="shortcut icon" href="/static/g189735f/image/favicon/ppsrx.ico" />
    <link rel="icon" type="image/x-icon" href="/static/g189735f/image/favicon/ppsrx.ico" />

    <link rel="stylesheet" type="text/css" href="/static/g189735f/stylesheet/application-site-header-footer.css" />
    <link rel="stylesheet" type="text/css" href="/static/g189735f/stylesheet/application-site.css" />
    
    <link rel="stylesheet" type="text/css" href="/static/shoppinglist/api/build/shopping-list-components.css" />

    
    
    
    
    

    

    <script type="text/javascript">
        
         window.staticContentPath = '/static/g189735f';
         
        window.localEnvironment = {};
    </script>
    <script type="text/javascript" src="/static/javascript/source/echoC2/c2.min.js"></script>
    <script>
        /*<![CDATA[*/
        var c2Path = "/api/c2";
        var routingKey = "web-site-eum";
        var applicationVersion = '5.57.12-3_g189735f';
        var options = {
            captureExceptions: true,
            sendPageInfo: true,
            xhrSampleRate: 0
        };
        var c2Context = c2(c2Path, routingKey, options, applicationVersion);
        /*]]>*/
    </script>
    <script src="/static/g189735f/javascript/vendor/html5shiv.js"></script>
    <script src="/static/g189735f/javascript/vendor/bowser.js"></script>
    <script src="/static/g189735f/javascript/source/banner/unsupportedBrowsers.js"></script>

    <!-- react components START-->
    <script src="/static/g189735f/javascript/seamless.js"></script>
    <!-- react components END-->

    <script type="text/javascript" src="/static/javascript/source/dcpum/kroger-usage-metrics.js"></script>

    <!-- if devLoadScripts is on, then jquery and angular are loaded up above from local -->
    <script src="/static/g189735f/javascript/vendor/jquery/jquery-1.8.2.min.js"></script>
    <script src="/static/g189735f/javascript/vendor/angular/angular.js"></script>
    <script src="/static/g189735f/javascript/vendor/angular/angular-sanitize.js"></script>
    <script src="/static/g189735f/javascript/vendor/angular/angular-route.js"></script>
    <script src="/static/g189735f/javascript/vendor/angular/angular-resource.js"></script>
    <script src="/static/shoppinglist/api/build/shopping-list-api.js?cacheVersion=3.7.0"></script>
    <script src="/static/g189735f/javascript/q.js"></script>

    
    <script src="/static/g189735f/javascript/init.js"></script>
    <script src="/static/g189735f/javascript/require.js"></script>
    <script src="/static/g189735f/javascript/boot.prod.js"></script>
    

    <script type="text/javascript">
    requireQ(["everything"], function() {
  angular.module('environment', []).factory('EnvLookup', function() {
  return {
  bannerName: 'PPSRx',
  bannerWithDeals: true,
  bannerDisplayName: 'Postal Prescription Services',
  contextPath: '',
  divisionBanner: 'ppsrx',
  firstName: null,
  loggedIn: false,
  enrolledInCommunityRewards: null,
  hasLoyaltyCard : 'undefined',
  hasPreferredStore : 'false',
  isBeingPrerenderedForSearchCrawler : false,
  divisionNumber: null,
  storeCode: null,
  deliBakeryLinkEnabled : 'true',
  bannerParticipates: null,
  storeParticipates: null,
  kingsoopersParticipates : null,
  externalUrls: null,
  internalUrls: null,
  hasPharmacy: 'FALSE',
  hasDeliBakery: 'true',
  bannerSiteDomain: 'PPS Rx',
  bannerSiteName: 'PPS Rx',
  plusCardName: '',
  noOfAllowedAttempts: '2',
  changePasswordPromptDate: '2014-May-27',
  heartBleedMessage: 'Our records indicate that you haven\'t changed your password recently. For security purposes, we recommend that you reset your password at this time.',
  isHeartBleedEnabled: 'true',
  contentVersion: '15e5d659afb',
  isCouponSearchEnabled: true,
  isCouponSearchEnabledBanner: false,
  isRecipeSearchEnabledBanner: false,
  isProductSearchEnabledBanner: false,
  isSuggestedProductsEnabled: false,
  isSearchServiceContentEnabled: null,
  nearStoreLocatorRadius: 8000,
  isAisleLocationEnabled: true,
  isPinnedListAnimationEnabled: false,
  isListToBasketSyncEnabled: 'false',
  isClicklistItemEligibilityIndicatorEnabled: false,
  isWaitListFeatureEnabled: true,
  isPPSVippsLogoApproved: false,
  couponPromotion: false,
  isCouponPromotionsEnabled: true,
  isWeeklyAdsEnabledForFM: false,
  couponPromotionPublishedAs: null,
  couponPromotionTabName: null,
  couponPromotionFilterTag: null,
  couponPromotionViewAllURL: null,
  couponPromotionImageId: null,
  couponPromotionMessageHeader: null,
  couponPromotionMessageText: null,
  couponPromotionButtonText: null,
  couponPromotionButtonAltId: null,
  couponPromotionButtonUrl: null,
  couponPromotionNotLoggedInMessageHeader: null,
  couponPromotionNotLoggedInMessageText: null,
  couponPromotionNotLoggedInButtonText: null,
  couponPromotionNotLoggedInButtonAltId: null,
  couponPromotionNotLoggedInButtonUrl: null,
  homeShopCookieName: 'eComm',
  homeShopBaseUrl: '/onlineshopping',
  homeShopShopNowUrl: '/onlineshopping',
  homeShopMyAccountEnabled: null,
  homeShopPickStoreServiceIntegrationEnabled: false,
  homeShopSecondPickStoreEnabled: false,
  searchServiceUrl:null,
  isRecipeRatingEnabled:false,
  isFacebookSharingEnabled:false,
  isPinterestSharingEnabled:true,
  isTwitterSharingEnabled:true,
  couponSpecialPromotionsEmailPreferenceId: 'Weekly Circular',
  couponSpecialPromotionsWebPostFlag: 'WeeklyAd',
  couponSpecialPromotionsFilteredTags: 'HOT',
  couponSpecialPromotionsGroupOptionId: 'Special Promotions and Opportunities',
  couponSpecialPromotionsEnabled: true,
  fredMeyerGrBaseDomain: null,
  fredMeyerCatalogId: null,
  fredMeyerStoreId: null,
  fredMeyerInstoreMenuEndpoint: null,
  fredMeyerGiftRegistryAutocompleteUrl: null,
  isManageAltIdEnabled: true,
  OnlineOrderingAvailableCatalog: '',
  OnlineOrderingBrandName: '',
  storeLocatorKey: 'AjxJ7VdncRQa6sl8Y-S6jdiqgGDzj7IKYT-0cvaIJsrvGuWk19f2OVnC2ym-_sGD',
  callCenterPhoneNumber: '',
  careersPageUrl: '',
  storeLocatorOptions : {
    text: 'Store',
    showServices: true,
    showAllBanners: true,
    showFuel: true,
    brand: 'PPSRX'
  },
  bannerIsAuthenticated : true,
  wishabiWeeklyAdEnvironment: 'prod',
  divisionMap : {'011':'Atlanta','034':'Southwest','024':'Louisville','035':'Dallas','014':'Cincinnati','025':'Delta','026':'Nashville','016':'Columbus','018':'Michigan','029':'MidAtlantic','021':'Central'},
  listApiPath: '/api/shoppinglist',
  listJsApiVersion: '3.7.0',
  isPinnedShoppingListEnabled: false,
  isPinnedShoppingListLinkOnlyMode: false,
  isNotificationsEnabled: false,
  promotionModalEnabled: 'true',
  promotionModalAsset: null,
  isLiveNaturallyRibbonEnabled: true,
  promotionRibbonDesktopAsset: null,
  promotionRibbonTabletAsset: null,
  promotionRibbonMobileAsset: null,
  promotionLeftPanelAsset: null,
  promotionRightPanelAsset: null,
  promotionModalAltText: '',
  promotionRibbonAltText: null,
  promotionLeftPanelAltText: null,
  promotionRightPanelAltText: null,
  liveNaturallyPromotionLink: null,
  liveNaturallyPromotionModalLink: '',
  liveNaturallyLeftPanelLink: '',
  liveNaturallyRightPanelLink: '',
  promoSidePanelEnabled: true,

  pid: '',
  channel: 'web',
  loyalMember: null,
  omnitureAccount: 'krgrppsrxprod,krgrglobalprod',
  pscUrl: '/mysavings',
  getNotificationPercent: '0',
  preferredStoreDetails : null
  };
  });
});
  window.localEnvironment.flash = {
  slotContent: []
  }
  
</script>
    <script type="text/javascript">
  requireQ(["everything"], function() {
  angular.module('featureManager', []).factory('FeatureManager', function() {
    var activeFeatures = 'TOPIC_URL_OPTIMIZED,EXACT_TARGET_EMAIL,ECSB_FORGOT_PASSWORD'.split(',');

  return {
    isActive: function(name) {
      return $.inArray(name, activeFeatures);
    }
  };
  });

   });
  window.localEnvironment.flash = {
  slotContent: []
  }

  </script>
</head>
</head>
<body ng-really-cloak="true" id="ng-app" style="display:none;">
<scroll-to-top></scroll-to-top>
<script type="text/javascript">
  window.localEnvironment.createCard = {
    location: "create an account",
    plusCardName: '',
    callCenterPhoneNumber: ''
  };
  window.localEnvironment.accountCreation = {
    floodLightTagsUrl : 'https://1817628.fls.doubleclick.net',
    floodLightTagsDisabled : '',
    bannerName : 'PPSRx'
  };
  window.localEnvironment.registrationPage = {
    slotContent: ['5928933484ae52cd2766a9e1','5928933484ae52cd2766a9e0','5928933484ae52cd2766a9df']
  };
  window.localEnvironment.registrationImage = {
    slotContent: ['54bffe5684aeaffb0e02ff7b']
  };
</script>
<span id="changeStoreContainer" class="slot">

  <script>requireQ(["everything"], function() {
  melange.gadgets.changeStoreController = function () {
    return function ($rootScope,
                     $scope,
                     windowReload,
                     StoreLocator,
                     StoreFunctions,
                     AccountService,
                     BrowserVersion,
                     Beacon,
                     timeoutService,
                     EnvLookup,
                     triggerChangeStoreGadgetService,
                     waitTimeHelper) {
      var loggedIn = EnvLookup.loggedIn;
      var isLittleClinic = EnvLookup.bannerName === 'TheLittleClinic';
      $scope.waitListFeatureEnabled = EnvLookup.isWaitListFeatureEnabled;
      var init = function () {
        $scope.showChangeStore = false;
        $scope.storeLocatorText = EnvLookup.storeLocatorOptions.text;
        resetSearchFields();
      };

      triggerChangeStoreGadgetService.onTrigger(function () {
        $rootScope.$broadcast('closeStoreReminder');
        $scope.showChangeStore = true;
        $scope.storeSearchTerm = "";
        findStores($.cookie("StoreZipCode"));
      });

      $scope.searchStore = function () {
        findStores($scope.storeSearchTerm);
        $scope.searchMessage = 'Showing the top 5 results for ' + $scope.storeSearchTerm;
      };


      var findStores = function (searchTerm) {
        if (searchTerm) {
          $scope.currentSearchTerm = searchTerm;
          StoreLocator.query({address: searchTerm, radius: '3000', maxResults: 5}, function (data) {
            $scope.results = data;
            if (isLittleClinic === true) {
              $scope.waitTimeLoading = true;
              if($scope.waitListFeatureEnabled) {
                waitTimeHelper.addWaitTimesToStores(data).then(function (stores) {
                  $scope.results = stores;
                  $scope.waitTimeLoading = false;
                });
              } else {
                waitTimeHelper.addWaitTimesToStoresOld(data).then(function (stores) {
                  $scope.results = stores;
                  $scope.waitTimeLoading = false;
                });
              }
            }

            if (_.isEmpty($scope.results)) {
              resetSearchFields();
              $scope.storeErrorText =
              "No " + $scope.storeLocatorText.toLowerCase() + "s were found within 3000 miles. Please provide additional address information or try again later.";
            } else {
              $scope.searchTerm = searchTerm;
              $scope.storeErrorText = "";
              $scope.showMoreResults = true;
            }
          }, function () {
            resetSearchFields();
            $scope.storeErrorText =
            "We're sorry, the search service is not available right now. Please try your search again later.";
          });
        }
      };

      var resetSearchFields = function () {
        $scope.searchTerm = "";
        $scope.results = [];
        $scope.storeErrorText = "";
        $scope.showMoreResults = false;
      };

      $scope.close = function () {
        resetSearchFields();
        $scope.showChangeStore = false;
        timeoutService.timeout(function() {
          $("a.change-store-link").focus();
        }, 0, false);
      };

      $scope.checkDisabled = function (event, store) {
        !store.waitTime.available ? event.preventDefault() : "";
      };

      $scope.focusTopOfModal = function () {
        timeoutService.timeout(function() {
          $("#changeStoreSideModal").focus();
        }, 0, false);
      }

      $scope.focusOnMoreResultsLink = function () {
        //if ($scope.modalHeadingFocus) {
          timeoutService.timeout(function () {
            $("#moreResults").focus();
          }, 0, false);
        //}
      }

      $scope.makePreferredStore = function (store) {
        Beacon.registerPreferredStoreChange('Change Store Popup');
        timeoutService.timeout(function () {
          if (loggedIn) {
            var updateStoreInput = {'divisionNumber': store.storeInformation.divisionNumber, storeNumber: store.storeInformation.storeNumber};
            AccountService.updatePreferredStore(updateStoreInput, function () {
              updatePreferredStoreAndCloseModal(store)
            }, function (response) {
              store.storeInformationErrorText = response.data.errorMessage != null ?
                      response.data.errorMessage : "We're sorry, we are currently experiencing technical difficulties. Please try again later.";
              Beacon.registerPreferredStoreChangeError('Change Store Popup', 'server error');
            });
          }
          else {
            updatePreferredStoreAndCloseModal(store);
          }
        }, 200);
      };

      var updatePreferredStoreAndCloseModal = function (store) {
        store.storeInformationErrorText = "";
        $scope.close();
        StoreFunctions.makePreferredStore(store);
        windowReload.reload();
      };

      $scope.getStoreNumber = function () {
        var newVar = StoreFunctions.getDivisionId() + StoreFunctions.getStoreNumber();
        return  newVar;
      };

      $scope.getDescription = function (store) {
        return StoreFunctions.getDescription(store);
      };

      $scope.isPreferredStoreSet = function () {
        if (StoreFunctions.getPreferredStoreDetails()) {
          return true;
        }
        return false;
      };
      $scope.viewMoreResults = function() {
        var newUrl = '/storeLocator?storeSearchTerm='+$scope.currentSearchTerm+'&amp;distance=3000';

        var contains = new RegExp(".*storeSearchTerm="+$scope.currentSearchTerm+".*");
        if(contains.test(window.location.href)) {
          // close side modal if the query did not change
          $scope.close();
        }
        else {
          window.location.href = newUrl;
        }
      };

      init();
    }
  };

  melange.controller('changeStoreController', [
    '$rootScope', '$scope', 'windowReload', 'storeLocator.Service', 'storeFunctions.Service',
    'account.Service', 'browserVersion.Service', 'beacon.Service', 'timeoutService', 'EnvLookup', 'triggerChangeStoreGadgetService','waitTimeHelper',
    melange.gadgets.changeStoreController()
  ]);
});</script>
  <span ng-controller="changeStoreController" class="scoped-to-banner">
    <div id="changeStoreSideModal" side-modal="showChangeStore" data-qa="change store side modal" tabindex="{{ showChangeStore ? 0 : -1 }}" ng-focus="modalHeadingFocus=true;" ng-blur="modalHeadingFocus=false;">
      <div class="side-modal-window-shade"></div>
      <div class="side-modal-inner">
        <h1 id="changeStoreHeading" class="side-modal-heading" ng-show="isPreferredStoreSet()" data-qa="change-preferred-store-heading">Change Preferred {{storeLocatorText}}</h1>
        <h1 id="selectStoreHeading" class="side-modal-heading" ng-hide="isPreferredStoreSet()" data-qa="select-preferred-store-heading">Select Preferred {{storeLocatorText}}</h1>
        <a kr-shift-tab="focusOnMoreResultsLink()" class="side-modal-close-button" ng-click="close()" data-qa="change store close button" tabindex="{{showChangeStore ? 0 : -1 }}" href="" aria-label="Close Change Store Section">Close</a>
        <div id="storeSideModalSearchBox" class="side-modal-scrollable-area">
            <form ng-submit="searchStore()" name="searchStoreForm" class="change-store-search-field">
                <input id="changeStoreSearch" aria-label="search for store" data-qa="change store search input" name="store" type="text" ng-model="storeSearchTerm" ng-focus="true" placeholder="ZIP Code -OR- City,State" />
                <input type="submit" data-qa="change store submit button" value="Search" />
            </form>
            <div class="offscreen" aria-relevant="text" role="alert" aria-live="assertive"> {{ searchMessage }} </div>
            <div ng-show="storeErrorText" class="alert-error change-store-search-error" data-qa="change store search error">
              <p>{{storeErrorText}}</p>
            </div>
            <div class="change-store-content">
            <h3 ng-show="searchTerm" data-qa="change store results heading">Showing the top 5 results for {{searchTerm}}</h3>
            <ol>
              <li class="change-store-result" ng-repeat="store in results" data-qa="change store result">
                <h5 id="storeLocalName_{{$index}}" class="change-store-result-title" data-qa="change-store-result-title">{{ store.storeInformation.localName | uppercase }}</h5>
                <dl class="store-locator-store-info-phone-number" ng-if="waitTimeLoading">
                  <img src="static/image/spinner.05c22d8f09ec96f6.gif" width="16px" height="16px" alt="[SPINNER]" />
                  Loading Wait Time...
                </dl>
                <dl class="change-store-result-definition change-store-wait-time" name="clinicWaitTime" ng-if="store.waitTime">
                  <div>
                    <img src="/static/image/Clock_Blue_1x.447302f7575d05bc.png" />
                    Current Wait Time:
                  </div>
                  <dd class="change-store-wait-time-description" ng-class="{'unavailableDescription': !store.waitTime.available}" data-qa="store locator result {{$index}} clinic wait time">
                    <span ng-bind-html="store.waitTime.description"></span>
                  </dd>
                </dl>

                <div id="storeStreetAddress_{{$index}}" class="change-store-result-address" ng-bind-html="getDescription(store) | trusted" data-qa="change store result address"></div>

                <div data-qa="show-store-details">
                  <dl class="change-store-result-definition" name="storePhoneNumber" ng-show="store.storeInformation.phoneNumber">
                    <dt>{{storeLocatorText}} Phone:</dt>
                    <dd data-qa="change-store-result-store-phoneNumber">
                      <span phone-link="{{store.storeInformation.phoneNumber}}"></span>
                    </dd>
                  </dl>
                  <dl class="change-store-result-definition" name="pharmacyPhoneNumber" ng-show="store.pharmacyInformation.phoneNumber">
                    <dt>Pharmacy Phone:</dt>
                    <dd data-qa="change-store-result-pharmacy-phoneNumber">
                      <span phone-link="{{store.pharmacyInformation.phoneNumber}}"></span>
                    </dd>
                  </dl>
                </div>

                <dl class="change-store-result-definition -distance">
                  <dt>Distance:</dt>
                  <dd data-qa="change store result distance">{{ store.storeInformation.distance | roundToTwoDecimal}} miles</dd>
                </dl>

                <div class="change-store-button-wrapper">
                  <wait-list-button-link store-id="store.storeInformation.recordId" wait-time="store.waitTime" wait-time-loading="waitTimeLoading"></wait-list-button-link>

                  <input aria-describedby="storeStreetAddress_{{$index}}" type="button" class="change-store-result-preferred-button" ng-hide="store.storeInformation.recordId == getStoreNumber()" ng-click="makePreferredStore(store)" value="Make Preferred {{storeLocatorText}}" data-qa="change store make result preferred store" />

                  <p tabindex="0" aria-describedby="storeStreetAddress_{{$index}}" class="change-store-result-preferred-indicator" ng-show="store.storeInformation.recordId == getStoreNumber()" data-qa="change store result indicate preferred store">This is My Preferred {{storeLocatorText}}</p>
                </div>

                <div class="change-store-details-links">
                  <a aria-describedby="storeStreetAddress_{{$index}}" data-qa="change-store-view-details" href="/storeHours?store={{store.storeInformation.recordId}}">View {{storeLocatorText}} Details</a>
                </div>

                <div ng-show="store.storeInformationErrorText" class="alert-error" data-qa="change store information {{$index}} error">
                  <p>{{store.storeInformationErrorText}}</p>
                </div>

              </li>
            </ol>
            <a id="moreResults" class="change-store-more-results-link" ng-show="showMoreResults" data-qa="showMoreResults" ng-click="viewMoreResults()" kr-tab="focusTopOfModal()" href="#">More Results &gt;&gt;</a>
          </div>
        </div>
      </div>
    </div>
  </span>
</span>
<div class="responsive-body-wrapper" responsive-body="true">
<div>

    <!--
    OnlineOpinion v5.6.5
    Released: 12/17/2012. Compiled 01/02/2013 10:54:34 AM -0600
    Branch: master 6f7c9076b20d959805996192556bbd12b2014c7d
    Components: Full
    The following code is Copyright 1998-2013 Opinionlab, Inc.  All rights reserved. Unauthorized use is prohibited. This product and other products of OpinionLab, Inc. are protected by U.S. Patent No. 6606581, 6421724, 6785717 B1 and other patents pending. http://www.opinionlab
    --><!-- INVITATION PROMPT MARKUP -->
    <noscript>This JavaScript enables OnlineOpinion, a method for collecting secure feedback data.</noscript>
    <!-- IE 8 fix for handling the OpinionLab popup... -->
    <!--[if lt IE 9 ]>
    <script type="text/javascript">
        requireQ(["everything"], function () {
            (function () {
                var b = 0;

                function launchOOPopupInitOverride() {
                    var h = this.options,
                            g = h.newWindowSize || [545, 325],
                            m = [parseInt((h.metrics.height - g[1]) / 2, 10), parseInt((h.metrics.width - g[0]) / 2, 10)],
                            l, k, j = "location=no,status=no,width=" + g[0] + ",height=" + g[1] + ",top=" + m[0] + ",left=" + m[1],
                            ie7 = OOo.Browser.IE && navigator.userAgent.search("MSIE 7") !== -1,
                            ie8 = OOo.Browser.IE && navigator.userAgent.search("MSIE 8") !== -1;

                    windowName = "OnlineOpinion";

                    if (h.newWindow) {
                        windowName = windowName + (b++)
                    }

                    h.metrics.time2 = (new Date()).getTime();
                    h.metrics.type = "Popup";

                    if (h.asm || ie8) {
                        j += ",scrollbars=1"
                    }

                    l = OOo.appendOOForm(h, windowName);
                    k = window.open(ie7 || ie8 ? h.commentCardUrl || "https://secure.opinionlab.com/ccc01/comment_card_d.asp?" + l.children[0].value : "", windowName, j);

                    if (k && !ie7 && !ie8) {
                        l.submit()
                    }
                }

                OOo.extend(OOo.Ocode.prototype, {
                    launchOOPopup: launchOOPopupInitOverride
                })
            }());
        });
    </script>
    <![endif]-->
    <!-- END: OnlineOpinion v5.6.5 -->

    <script>/*<![CDATA[*/
requireQ(["everything"], function() {
  melange.controller('melange.app.opinionLabController', ['$scope', '$rootScope', '$window', '$timeout', 'EnvLookup', function($scope, $rootScope, $window, $timeout, EnvLookup) {
    $scope.popupIsVisible = false;
    $scope.isLittleClinic = EnvLookup.bannerName === 'TheLittleClinic';

    $scope.showPopup = function() {
      $scope.popupIsVisible = true;
    };

    $scope.hidePopup = function() {
      $scope.popupIsVisible = false;
    };

    $scope.showFeedback = function() {
      $scope.hidePopup();
      new OOo.Ocode({referrerRewrite:window.location.href.split('?')[0]}).show();
    };

    $rootScope.$on('showOpinionLabPopup', $scope.showPopup);

  }]);
});

/*]]>*/
</script>

    <div ng-controller="melange.app.opinionLabController" class="scoped-to-banner">
        <div id="oo_tab" class="oo_tab_right" tabindex="0" ng-click="showPopup()" ng-hide="popupIsVisible">
            <div data-qa="opinion_lab_feedback_link">
                <span></span>
            </div>
            <div class="screen_reader">Activate to launch feedback</div>
        </div>

        <div class="opinionlab-popup" side-modal="popupIsVisible" data-qa="opinionlab popup">
            <div class="side-modal-inner">
                <h1 class="side-modal-heading">Feedback</h1>

                <div class="side-modal-close-button" ng-click="hidePopup()" data-qa="opinionlab popup close button">
                    Close
                </div>
                <div class="side-modal-scrollable-area">
                    <div class="opinionlab-popup-content -first">
                        <div id="kroger_env"></div>
                        <h2>Need assistance? Email us.</h2>

                        <p>Send us your comments, questions and suggestions by email. We'll get right back to
                            you.</p>
                        <a class="button" data-qa="opinionlab email us link" href="mailto:fmppsquestions@fredmeyer.com?subject=PPSRx%20Support&amp;body=First%20name%3A%0ALast%20name%3A">Email
                            Us</a>
                    </div>
                    <div class="opinionlab-popup-content -second">
                        <div id="kroger_girl"></div>
                        <h2>Need assistance? Call us.</h2>

                        <p>Our Customer Service Ambassadors are ready to help you at <br /><span phone-link="1-800-552-6694"></span></p>
                        <a class="button" target="_blank" data-qa="opinionlab call us link" href="/topic/contact-us-11">Call Us</a>
                    </div>
                    <div class="opinionlab-popup-content -third">
                        <div id="kroger_bubble"></div>
                        <h2>Leave website feedback</h2>

                        <p>We want to hear from you, but please note that we cannot respond directly to your
                            feedback.</p>
                        <a class="button" href="javascript:void(0)" ng-click="showFeedback()">Leave Feedback</a>
                    </div>
                </div>
            </div>
            <div class="side-modal-window-shade"></div>
        </div>
    </div>

</div>
<div class="flash-message-gadget">
  <script>/*<![CDATA[*/
requireQ(["everything"], function() {
  common.register('melange.gadgets.flashMessage', function () {
    return function ($scope, Content, Beacon) {
      var flashMessageTimeStamp;

      var initialize = function () {
        var slot_content = window.localEnvironment.flash.slotContent;
        Content.queryBySlotContent(slot_content, function (data) {
          if (!_.isEmpty(data)) {
            $scope.flashMessages = _.sortBy(data, function (flashMessage) {
              return flashMessage.order ? 1 / flashMessage.order.all : 0;
            });
            flashMessageTimeStamp = data[0].lastUpdatedOn;
          }
        });
      };

      $scope.shouldShowMessage = function () {
        return $scope.flashMessages && (
            !$.cookie("closedFlashMessageTimeStamp") ||
            (
                (
                    $.cookie("closedFlashMessageTimeStamp") !== flashMessageTimeStamp
                ) &&
                (
                    $.cookie("closedFlashMessageTimeStamp") !== encodeURIComponent(flashMessageTimeStamp)
                ) &&
                (
                    $.cookie("closedFlashMessageTimeStamp").split(' ')[0] !== flashMessageTimeStamp.split('+')[0]
                )
            )
            )
      };

      $scope.close = function () {
        Beacon.closeFlashMessage();
        $.cookie("closedFlashMessageTimeStamp", flashMessageTimeStamp, { path: '/' });
      };

      initialize();
    }
  });

  melange.controller("flashMessageController",
      ['$scope', 'content.Service', 'beacon.Service', melange.gadgets.flashMessage()]);
});
/*]]>*/</script>
  <div><html>
<body>
<div>
    <script>/*<![CDATA[*/
requireQ(["everything"], function() {
    common.register('melange.gadgets.promoRibbon',
        melange.gadgets.promoRibbon = function ($scope, $window, Beacon, EnvLookup) {
            $scope.shouldShowRibbon = function() {
                if($scope.bannerName === 'KingSoopers') {
                    return EnvLookup.isLiveNaturallyRibbonEnabled != undefined && EnvLookup.isLiveNaturallyRibbonEnabled;
                }
                return false
            };
            $scope.navigateToLiveNaturally = function() {
               Beacon.registerPromoLinkClick("topnav_livenaturallypromo2015");
               $window.open($scope.targetPromoUrl, '_blank');
            };

            $scope.bannerName = EnvLookup.bannerName;

            $scope.desktopImgUrl = EnvLookup.promotionRibbonDesktopAsset;
            $scope.tabletImgUrl = EnvLookup.promotionRibbonTabletAsset;
            $scope.mobileImgUrl = EnvLookup.promotionRibbonMobileAsset;
            $scope.targetPromoUrl = EnvLookup.liveNaturallyPromotionLink;
            $scope.promotionRibbonAltText = EnvLookup.promotionRibbonAltText;
        });
    melange.controller('promoRibbonController',
        ['$scope', '$window', 'beacon.Service', 'EnvLookup', melange.gadgets.promoRibbon]);
});
/*]]>*/
</script>
    <div ng-controller="promoRibbonController">
        <div ng-show="shouldShowRibbon()" class="promoRibbon">
            <a href="" aria-label="{{ promotionRibbonAltText }}" tabindex="0" ng-click="navigateToLiveNaturally()">
                <span show-media-src="{{ mobileImgUrl }}" show-media="(max-width: 767px) " show-media-default="false" show-media-alt=""></span>
                <span show-media-src="{{ tabletImgUrl }}" show-media="(min-width: 768px) and (max-width: 1023px)" show-media-default="false" show-media-alt=""></span>
                <span show-media-src="{{ desktopImgUrl }}" show-media="(min-width: 1024px)" show-media-default="true" show-media-alt=""></span>
            </a>
        </div>
    </div>
</div>
</body>
</html></div>

  <div ng-controller="flashMessageController">
    <div ng-show="shouldShowMessage()" class="flashMsgContainer" data-qa="lol">
      <ul id="flashMsgList">
        <li class="flashMsg" id="flashMessage{{$index}}" ng-repeat="flashMessage in flashMessages">
          <span class="leftDescriptor" ng-show="flashMessage.title">{{flashMessage.title}}:</span><span class="leftDescriptorDetails" ng-bind-html="flashMessage.body | markdown | trusted"></span>
        </li>
      </ul>
      <a class="flashCloseButton" ng-click="close()" href="" aria-describedby="flashMsgList" aria-label="Close Messages" data-qa="bahaha">X</a>
    </div>
  </div>
</div>
<div><div id="browserWarnMsg" class="-hidden">
  <p>In order to use this site, please make sure that your cookies are enabled, then click <a href="javascript:history.go(0)">here</a> to refresh the page.</p>
</div>

<script type="text/javascript">

  requireQ(["everything"], function() {
    $(function(){
      var responsiveEnabled = $('.row-fluid').length > 0;

      if(!$.smartbanner) {
        return;
      }

      $.smartbanner({
        title:'PPSRx',
        author:'PPSRx',
        price:'FREE',
        appStoreLanguage: 'us',
        inAppStore: 'On the App Store',
        inGooglePlay: 'In Google Play',
        icon: '/static/g189735f/image/appicon/ppsrx.png',
        iconGloss: null,
        button: 'View',
        scale: responsiveEnabled ? 1 : "auto",
        speedIn: 300,
        speedOut: 400,
        daysHidden: 15,
        daysReminder: 15,
        force: null  });

      var  ce = navigator.cookieEnabled;
      if (typeof navigator.cookieEnabled === "undefined") {
        if(!ce){
          document.cookie = "any";
          ce = (document.cookie.indexOf("any") !== -1);
          document.cookie = ""
        }
      }

      if(!ce )
        $( "#browserWarnMsg" ).removeClass("-hidden");

      if(!responsiveEnabled){
        $("#smartbanner").css("width", "1020px");
      }
    });
  });

</script>



</div>
    <div id="grid-flex">
        <div>

<script>/*<![CDATA[*/
requireQ(["everything"], function () {
   common.register('melange.gadgets.promoLeftPanel',
         melange.gadgets.promoLeftPanel = function ($scope, $window, Beacon, EnvLookup) {
            $scope.shouldShowLeftPanel = function () {
               if ($scope.bannerName === 'KingSoopers') {
                  return EnvLookup.promoSidePanelEnabled != undefined && EnvLookup.promoSidePanelEnabled;
               }
               return false
            };
            $scope.navigateToLiveNaturally = function () {
               Beacon.registerPromoLinkClick("leftpanel_livenaturallypromo2015");
               $window.open($scope.targetPromoUrl, '_blank');
            };

            $scope.bannerName = EnvLookup.bannerName;
            $scope.imgUrl = EnvLookup.promotionLeftPanelAsset;
            $scope.targetPromoUrl = EnvLookup.liveNaturallyLeftPanelLink;
            $scope.promotionLeftPanelAltText = EnvLookup.promotionLeftPanelAltText;
         });
   melange.controller('promoLeftPanelController',
         ['$scope', '$window', 'beacon.Service', 'EnvLookup', melange.gadgets.promoLeftPanel]);
});
/*]]>*/
</script>
<div ng-controller="promoLeftPanelController">
    <div ng-if="shouldShowLeftPanel()" class="promoPanels">
        <a href="" aria-label="{{ promotionLeftPanelAltText }}" tabindex="0" ng-click="navigateToLiveNaturally()">
            <span show-media-src="{{ imgUrl }}" show-media="(min-width: 1280px)" show-media-default="false" id="promoLeftPanelAsset"></span>
        </a>
    </div>
</div></div>
<div id="grid-wrap" class="row-fluid">
    <div class="main">
      <div><script>/*<![CDATA[*/

requireQ(["everything"], function() {
  melange.controller('melange.app.responsiveNavigationController', [
    '$scope', '$timeout', '$rootScope', 'beacon.Service', "EnvLookup",
    melange.app.responsiveNavigationController = function ($scope, $timeout, $rootScope, Beacon, EnvLookup) {
      $scope.hideResponsiveNav = true;
      $scope.showResponsiveNav = false;
      $scope.bannerIsAuthenticated = EnvLookup.bannerIsAuthenticated;
      $scope.showPickupTime = window.localEnvironment.showPickupTime;

      var toggleResponsiveNavOff = function () {
        $rootScope.$broadcast('showResponsiveNav', false);
        $scope.showResponsiveNav = false;
        $timeout(function () {
          $scope.hideResponsiveNav = true;
        }, 500);
      };

      $scope.$on("forceCloseResponsiveNav", toggleResponsiveNavOff);

      $scope.toggleResponsiveNav = function () {
        if (!$scope.showResponsiveNav) {
          Beacon.registerMobileMenuExpansion();
          $scope.hideResponsiveNav = false;
          $timeout(function () {
            $rootScope.$broadcast('showResponsiveNav', true);
            $scope.showResponsiveNav = true;
          }, 0);
        } else {
          toggleResponsiveNavOff();
        }
      };

    }
  ]);
});
/*]]>*/
</script>
<script>
  window.localEnvironment.signIn = {
    rememberMeEmail: null,
    rememberMeOption: null,
    floodLightTagsDisabled : ''
  };
  window.localEnvironment.siteLogo = {
    bannerDisplayName: 'Postal Prescription Services'
  };
  window.localEnvironment.topNavigation = {
    slotContent: ['5625dba6ab99b1baf4e712ef']
  };
</script>

<header role="banner">
  <div ng-controller="melange.app.responsiveNavigationController" class="scoped-to-banner">
    <div class="mobile-header">
      <a class="mobile-header-menu-button" data-qa="mobile header menu button" ng-class="{'active': showResponsiveNav}" ng-click="toggleResponsiveNav()"></a>
      <div class="mobile-menu-close-overlay" ng-show="showResponsiveNav" ng-click="toggleResponsiveNav()"></div>
      <a href="/" ng-click="track()" class="mobile-header-brand">PPS</a>
    </div>

    <div id="aboveNavigation">
      <script>/*<![CDATA[*/
requireQ(["everything"], function() {
  melange.controller("headerController", [
    '$rootScope', '$scope', 'storeFunctions.Service', 'beacon.Service', '$window', '$timeout', 'EnvLookup', 'waitTimeHelper', 'waitTime.Service', 'triggerChangeStoreGadgetService',
    melange.gadgets.navigationGadget =
    function ($rootScope, $scope, storeFunctions, Beacon, $window, $timeout, EnvLookup, WaitTimeHelper, WaitTimeService, triggerChangeStoreGadgetService) {
      $scope.preferredStoreId = '';

      $scope.isLittleClinic = EnvLookup.bannerName === 'TheLittleClinic';
      $scope.waitListFeatureEnabled = EnvLookup.isWaitListFeatureEnabled;
      $scope.isPPSRx = EnvLookup.bannerName === 'PPSRx';
      $scope.isHarrisTeeter = EnvLookup.bannerName === 'HarrisTeeter';
      $scope.isPharmacyOnlyBanner = $scope.isPPSRx || $scope.isHarrisTeeter;
      $scope.showStoreDrawer = false;
      $scope.storeLocatorText = EnvLookup.storeLocatorOptions.text;

      var updateWaitTime = function() {
        if($scope.isLittleClinic) {
          $scope.waitTimeLoading = true;
          var details = storeFunctions.getPreferredStoreDetails();
          if(details) {
            if ($scope.waitListFeatureEnabled) {
              details.storeInformation = {
                recordId: details.recordId
              };

              WaitTimeHelper.addWaitTimesToStores([details]).then(function (data) {
                $scope.waitTime = data[0].waitTime;
                if($scope.waitTime.available){
                  var description = $scope.waitTime.description;
                  description = description.replace(/ Hour(s?)/gi, 'hr');
                  description = description.replace(/ Minute(s?)/gi, 'min');
                  $scope.waitTime.description = description;
                }
                $scope.waitTimeLoading = false;
              });
            } else {
              WaitTimeService.getWaitTime({clinicId: details.recordId}, function (data) {
                $scope.waitTime = data.description;
              });
            }
          }
        }
      };

      var updateStoreCookies = function(){
        if(EnvLookup.loggedIn && !_.isUndefined(EnvLookup.preferredStoreDetails) && EnvLookup.preferredStoreDetails != null) {
          storeFunctions.makePreferredStore(EnvLookup.preferredStoreDetails);
        }
      };

      updateWaitTime();
      updateStoreCookies();

      $scope.isPreferredStoreSelected = function () {
        return $scope.preferredStoreId != '';
      };

      $scope.showWaitTimeIndicator = function () {
        return $scope.isLittleClinic && $scope.isPreferredStoreSelected();
      };

      $scope.hasWaitTimeWithFeatureEnabled = function () {
        return $scope.waitListFeatureEnabled && !$scope.waitTimeLoading && $scope.waitTime;
      };

      $scope.openChangeStoreDrawer = function () {
        Beacon.registerChangeStoreLinkClick('change');
        triggerChangeStoreGadgetService.trigger();
        $timeout(function() {
          $("#changeStoreSideModal").focus();
        }, 0, false);
      };

      $scope.toggleStoreDrawer = function () {
        $rootScope.$broadcast('closeStoreReminder');
        $rootScope.$broadcast('headerDrawerWasToggled', 'storeDrawer');
        $scope.showStoreDrawer = !$scope.showStoreDrawer;
      };

      $scope.$on('headerDrawerWasToggled', function (e, drawerName) {
        if (drawerName != 'storeDrawer') {
          $scope.showStoreDrawer = false;
        }
      });

      $scope.$on('updateWaitTime', function(e) {
        updateWaitTime();
      });

      $scope.getPreferredStoreDetails = function () {
        var details = storeFunctions.getPreferredStoreDetails();
        if (details) {
          $scope.preferredStoreId = details.recordId;
          return details.address.prettyString;
        }
        return "No Store Selected";
      };

      $scope.preferredStoreAddress = $scope.getPreferredStoreDetails();

      $scope.isPreferredStoreSet = function () {
        if (storeFunctions.getPreferredStoreDetails()) {
          return true;
        }
        return false;
      };

      $scope.trackPreferredStoreClick = function () {
        Beacon.registerStoreClick('my store');
        $window.location.href = '/storeHours?store=' + $scope.preferredStoreId;
      };

      $scope.trackFindStoreLink = function () {
        Beacon.registerStoreClick('find a store');
      };

      common.linkBinder.bindOne("a[data-id='find-store-link']", $scope.trackFindStoreLink);
    }
  ]);
});
/*]]>*/
</script>
      <script>/*<![CDATA[*/
requireQ(["everything"], function() {
  melange.controller("promoModalController", [
    '$rootScope','$scope', 'beacon.Service', '$window', 'EnvLookup', '$timeout',
    melange.gadgets.promoModalController =
      function ($rootScope, $scope, Beacon, $window, EnvLookup, $timeout) {

        var hidePromotionModalList = ['/signin', '/login', '/account', '/forgotPassword'];
        var modalDismissed = $.cookie("modalClosed") === "true";
        var promotionEnabled = EnvLookup.promotionModalAsset != undefined && EnvLookup.promotionModalEnabled === "true" && EnvLookup.bannerName.toLowerCase() === "kingsoopers";
        var promoLink = EnvLookup.liveNaturallyPromotionModalLink ? EnvLookup.liveNaturallyPromotionModalLink : "https://www.kingsoopers.com/livenaturally?cid=web_2015P10_livenaturally_popup";

        $scope.promotionImgUrl = EnvLookup.promotionModalAsset;
        $scope.displayPromotionModal = promotionEnabled && !modalDismissed && !filterUrls($window.location.pathname, $window.location.hash);
        $scope.modalAltText = EnvLookup.promotionModalAltText;

        if ($scope.displayPromotionModal){
          $timeout(function(){
            $('#link-modal-image')[0].focus();
          }, 500, false);
        }

        $scope.focusModal = function(){
          $timeout(function(){
            $('#link-modal-image')[0].focus();
          }, 0, false);

        };

        $scope.focusCloseBotton = function(){
          $timeout(function(){
            $('#link-close-image')[0].focus();
          }, 0, false);
        };

        $scope.closePromoModal = function () {
          $.cookie("modalClosed", "true");
          $scope.displayPromotionModal = false;
        };

        $scope.onPromotionalModalClick = function () {
          $scope.closePromoModal();

          Beacon.registerPromoLinkClick("popup_livenaturallypromo2015");

          window.open(promoLink,'_blank');
        };

        function filterUrls(pathName, hashName) {
          var pathnameList = _.filter(hidePromotionModalList, function (item) {
            return pathName.toLowerCase().indexOf(item.toLowerCase()) > -1 ||
              hashName.toLowerCase().indexOf(item.toLowerCase()) > -1;
          });

          return pathnameList && pathnameList.length > 0;
        }
      }
  ]);
});
/*]]>*/

</script>
      <div ng-include="'/fragment/promoModal'"></div>
      <div id="siteLogoContainer" class="slot">
    <div class="site-logo-gadget">
        <div id="logo" data-qa="siteLogo">
            <div id="componentLogo"></div>
        </div>
    </div>
    <script>
        var bannerName = 'PPSRx';
        var logoId = '5674684784ae2fc86a1b1f36';
        var logoProps = {banner: bannerName, src: '/asset/' + logoId + '?data=1'};
        seamless.ReactDOM.render(
                seamless.React.createElement(seamless.Logo, logoProps),
                document.getElementById('componentLogo')
        );
    </script>
</div>
      <div class="headerContainer" ng-controller="headerController">
      <div id="preferredStore" ng-class="{'-little-clinic': isLittleClinic, '-ppsrx': isPharmacyOnlyBanner}">
        <a href="javascript:void(0);" ng-click="toggleStoreDrawer()" ng-class="{active: showStoreDrawer}" class="store-drawer-toggle"><span class="drawer-toggle-hidden-label">Preferred Store Information</span></a>
        <change-store-reminder store-text="storeLocatorText"></change-store-reminder>


        <div class="preferred-store-drawer" ng-class="{'drawer-visible': showStoreDrawer}">
          <div class="preferred-store-drawer-wrapper" data-qa="preferred store section">
            <h4 data-qa="preferred store heading">My {{storeLocatorText}}: </h4>
            <a data-qa="preferred store hours link" class="storeHoursLink" ng-hide="preferredStoreId == ''" ng-click="trackPreferredStoreClick()" href="" ng-bind-html="getPreferredStoreDetails() | trusted"></a>
            <p ng-show="preferredStoreId == ''" class="no-preferred-store-message">No {{storeLocatorText}} Selected</p>
            <p id="waitTimeDivider" ng-class="{'-store-selected' : preferredStoreId != ''}" class="divider -wait-time">|</p>
            <div ng-class="{'-no-selected-store' : preferredStoreId == ''}" class="preferred-store-drawer-store-links">
              <a class="change-store-link" data-qa="navigation change store link" ng-show="isPreferredStoreSet()" ng-click="openChangeStoreDrawer()" href=""><span>Change {{storeLocatorText}}</span></a>
              <a class="change-store-link" data-qa="navigation select store link" ng-hide="isPreferredStoreSet()" ng-click="openChangeStoreDrawer()" href=""><span>Select {{storeLocatorText}}</span></a>
              <p class="divider">|</p>
              <a class="find-store-link" ng-click="trackFindStoreLink()" href="/storeLocator?hash=findStoreLink"><span> Find a {{storeLocatorText}} </span></a>
            </div>
          </div>
        </div>
      </div>
      <div>
        <div id="previewContextContainer" class="slot">
</div>
      </div>
      <div ng-hide="{{isHarrisTeeter}}" id="searchContainer" class="slot">
  <script>/*<![CDATA[*/
requireQ(["everything"], function() {
  common.register('melange.gadgets.search',
      melange.gadgets.search = function ($rootScope, $scope, $window, EnvLookup, windowSize, $location, $timeout, locationService) {


        var searchPath = '/searching';

        $scope.searchPlaceholderText = function(){
          if(windowSize.respondSmall()){
            return "Search"
          } else {
            return "What are you looking for today?";
          }
        };

        $scope.query = '';
        $scope.isLittleClinic = EnvLookup.bannerName === 'TheLittleClinic';

        $scope.toggleSearchDrawer = function () {
          if (!$scope.showSearchDrawer) {
            Beacon.registerMobileSearchIconClicked();
          }
          $rootScope.$broadcast('closeStoreReminder');
          $rootScope.$broadcast('headerDrawerWasToggled', 'searchDrawer');
          $scope.showSearchDrawer = !$scope.showSearchDrawer;
        };

        $rootScope.$on('searchTermChanged', function(e, searchQuery) {
          $scope.query = searchQuery;
        });

        $scope.$on('headerDrawerWasToggled', function (e, drawerName) {
          if (drawerName != 'searchDrawer') {
            $scope.showSearchDrawer = false;
          }
        });

        $scope.closeReminder = function () {
          $rootScope.$broadcast('closeStoreReminder');
        };

        $scope.find = function ($event) {
          if($event.currentTarget[0] && $event.currentTarget[0].nodeName === "INPUT") {
            $timeout(function() {
              $event.currentTarget[0].blur();
            });
          }
          redirectToSearch();
        };

        var redirectToSearch = function() {
          if($scope.query !== '') {
            var locationPath = locationService.locationPath();
            if (locationPath == searchPath) {
              $location.search({query: $scope.query});
            } else {
              $window.location.href = searchPath + '#?query=' + encodeURIComponent($scope.query) + '&contextUrl=' + encodeURIComponent(locationPath);
            }
          }
        };
      });

      melange.controller('melange.gadgets.searchGadgetController',
      ['$rootScope', '$scope', '$window', "EnvLookup", 'windowSize', '$location', '$timeout','locationService', melange.gadgets.search]);
});
/*]]>*/
</script>
  <div>
    <div ng-controller="melange.gadgets.searchGadgetController" class="search-container">
      <form search-and-account-name-layout="" id="search" name="search" role="search" ng-submit="find($event)" data-qa="search gadget mobile drawer">
        <div class="search-wrapper">
          <input title="What are you looking for today?" class="non-fm-search-input" type="text" name="query" ng-click="closeReminder()" ng-keydown="closeReminder()" placeholder="{{searchPlaceholderText()}}" ng-model="query" ng-focus="searchFocus=true;" ng-blur="searchFocus=false;" data-qa="header search input" />
          <button type="submit" data-qa="search gadget submit" ng-focus="find($event)" ng-style="{ 'background-color': query ? '#cccccc' : 'clear' }">Search</button>
        </div>
      </form>
      <div pinned-list="" phone-mode="true" ng-class="{ '-minimized': searchFocus }"></div>
    </div>
  </div>
</div>

      <div class="authContainer">
        <div id="signInContainer" ng-show="bannerIsAuthenticated" class="slot">
    <script>/*<![CDATA[*/
requireQ(["everything"], function () {
  common.register('melange.gadgets.signIn', function () {
    return function ($rootScope, $scope, $window, $http, StoreFunctions, PromotionProgramService, Beacon, RedirectService, UrlUtilitiesService, EnvLookup, customerProfileService, timeoutService, windowSize, ValidationsService) {
      $scope.isPasswordExpired = false;
      $scope.bannerName = EnvLookup.bannerName;
      $scope.isPPSRx = $scope.bannerName.toLowerCase() === 'ppsrx';
      $scope.show = { signIn: true, clickListSignIn: true };
      $scope.isAuthenticating = false;
      var rememberMeEmail = $window.localEnvironment.signIn.rememberMeEmail;
      var rememberMeOption = $window.localEnvironment.signIn.rememberMeOption;
      $scope.responsiveEnabled = windowSize.responsiveEnabled();
      $scope.tabletOrMobile = function () {
        return $window.innerWidth < 768;
      };
      $scope.floodLightTag = '';

      var homeShopBaseUrl = EnvLookup.homeShopBaseUrl;
      var ppsrxBaseUrl = "/myprescriptions";
      var isHomeShopPickStoreServiceIntegrationEnabled = EnvLookup.homeShopPickStoreServiceIntegrationEnabled;
      var signInPrompts = {
        myRecipes: 'Please log in to view My Recipes.',
        favorite: 'Please log in to save recipes.',
        shoppingList: 'Please log in to add ingredients to your Shopping List.',
        defaultPrompt: 'Sign in to view your account information.',
        rating:'Please log in to rate recipes.',
        productsList:'Sign in to add products to your list.'
      };
      var psc = EnvLookup.pscUrl.replace("/", "");
      var redirectUrl = RedirectService.requestHasRedirectUrl() ? RedirectService.getParameterByName('redirectUrl').replace('/', '') : "";
      var pathName = $window.location.pathname.substring($window.location.pathname.lastIndexOf('/') + 1);
      var action = $scope.action;
      signInPrompts[psc] = 'To view your Savings Center for coupons, sale items and more, please sign in.';

      $scope.pscCreateAccountPrompt = redirectUrl == psc || pathName == psc || action == psc;
      $scope.defaultCreateAccountPrompt = !$scope.pscCreateAccountPrompt;

      var redirectBasedSignInPrompt = function () {
        return RedirectService.requestHasRedirectUrl() ? signInPrompts[ RedirectService.getParameterByName('redirectUrl').replace('/', '')] : "";
      };

      var urlBasedSignInPrompt = function() {
        var url = $window.location.pathname;
        var pathname= url.substring(url.lastIndexOf('/') + 1);
        return signInPrompts[pathname];
      };

      var actionBasedSignInPrompt = function(){
        var actionBasedPrompt = $scope.action && signInPrompts[$scope.action];
        return actionBasedPrompt ? actionBasedPrompt : "";
      };

      $scope.signInPrompt = function() {
        var urlOrDefaultPrompt = urlBasedSignInPrompt() ? urlBasedSignInPrompt() : signInPrompts.defaultPrompt;
        if (actionBasedSignInPrompt()) {
          return actionBasedSignInPrompt();
        } else {
          return redirectBasedSignInPrompt() ? redirectBasedSignInPrompt() : urlOrDefaultPrompt;
        }
      };

      var getQueryParameter = function(queryParameterKey) {
        var query = window.location.href.split('?')[1];
        if (query) {
          var queryParams = query.split("&");
          var queryParameterValue = null;

          queryParams.filter(function (currentValue) {
            var keyValueArray = currentValue.split("=");
            if (keyValueArray[0] === queryParameterKey) {
              queryParameterValue = keyValueArray[1];
            }
          });
        }

        return queryParameterValue;
      };

      var init = function () {
        var userEmail = "";
        if (RedirectService.cookieEnabled()) {
          userEmail = localStorage.getItem("userEmail");
          timeoutService.timeout(function () {
            localStorage.removeItem("userEmail");
          }, 400);
        }

        $scope.account = { email: (_.isNull(userEmail) ? rememberMeEmail :
          userEmail), password: "", rememberMe: rememberMeOption };

        if ($scope.account.email === null && getQueryParameter("email")) {
          try {
            $scope.account.email = atob(getQueryParameter("email"));
          }
          catch(err) {
            console.log(err);
            $scope.account.email = null;
          }
          if ($scope.account.email !== null && $scope.tabletOrMobile() && $scope.show.clickListSignIn) {
            $scope.clickListSignIn();
          }
        }
        var href = $window.location.href;
        $scope.isHomeShop = $window.location.href.indexOf(homeShopBaseUrl) > -1;
        $scope.redirectUrlContains = function(token){
          if(RedirectService.requestHasRedirectUrl()){
            return token.indexOf(RedirectService.getParameterByName('redirectUrl')) >= 0;
          }
          return false;
        };
        $scope.show.signIn =
          ( href.indexOf('/#login') >= 0 || href.indexOf('/#/login') >= 0 ) ? true : false;
        $scope.isLoginError = false;
        $scope.isServiceError = false;
        $scope.emailErrorText = "";
        $("#emailError, #formEmailError").empty();
        $scope.passwordErrorText = "";
        $("#passwordError, #formPasswordError").empty();
        $scope.isLocked = false;
        $scope.isValidProgram = true;
        var queryParams = UrlUtilitiesService.getQueryParams();
        $scope.programName = queryParams.program;
        $scope.isEmailPreferenceError = queryParams.errorCode === "emailPreferenceNotSet";
        $scope.isSessionTimedOut = queryParams.errorCode === "sessionTimeout";

        var path = '/account/create';
        if (RedirectService.requestHasRedirectUrl()) {
          path = path + '?' + RedirectService.getSearchString();
        }
        if (queryParams.program) {
          path = path + '?program=' + queryParams.program;
        }
        $scope.createAccountLink = path;

        if($scope.isPPSRx && EnvLookup.isPPSVippsLogoApproved) {
          document.getElementById('vippsLogoContainer').innerHTML = "<a id=\"vipps-logo\" " +
            "title=\"Vipps\" " +
            "href=\"http://www.nabp.pharmacy/programs/vipps/vipps-accredited-pharmacies-list/\" " +
            "target=\"_blank\">\n" +
            "<img class=\"vippsLogo\" style=\"width: 150px\" src=\"/static/image/pharmacy/vipps.png\"/>\n" +
            "</a>"
        }
      };

      $scope.createAccount = function() {
        Beacon.registerCreateAccountClick('clicklistsignin_createanaccountlinkclicked');
        var path = '/account/create';
        $window.location.href = RedirectService.requestHasRedirectUrl() ?
            path + '?' + RedirectService.getSearchString() : path;
      };

      var hasErrors = function () {
        return  $scope.invalidEmailError || $scope.invalidPasswordError;
      };

      var validateEmail = function (isTest) {
        $scope.emailErrorText = false;
        var emailErrorText;
        if (_.isEmpty($scope.account.email)) {
          emailErrorText = 'Email is required';
          $scope.invalidEmailError = true;
        } else if (!ValidationsService.validateEmail($scope.account.email, true)) {
          emailErrorText = 'Email format is incorrect';
          $scope.invalidEmailError = true;
        }

        if($scope.invalidEmailError){
          timeoutService.timeout(function(){
              $scope.emailErrorText = emailErrorText;
          }, 0);
        }
        return $scope.emailErrorText;
      };

      var validatePassword = function () {
        $scope.passwordErrorText = undefined;

        if (_.isEmpty($scope.account.password)) {
          $scope.invalidPasswordError = true;
          timeoutService.timeout(function(){
            $scope.passwordErrorText = 'Password is required';
          });
        }

        return $scope.passwordErrorText;
      };

      var isUserHomeShopCustomer = function (data) {
        if (isHomeShopPickStoreServiceIntegrationEnabled) {
          if (data.userProfile
            && data.userProfile.bannerSpecificDetails
            && data.userProfile.bannerSpecificDetails[0]
            ) {
            return !_.isEmpty(data.userProfile.bannerSpecificDetails[0].pickupStoreDivisionNumber &&
              !_.isEmpty(data.userProfile.bannerSpecificDetails[0].pickupStoreNumber))
          }
        }
        else {
          //if homeshop has set cookie, honor it...
          var homeShopCookieName = "isHomeShopCustomer";
          var updatedValue;
          if ($.cookie(homeShopCookieName) != null) {
            updatedValue = customerProfileService.updateHomeShopCustomer($.cookie(homeShopCookieName));
          } else { //default to false since no cookie found
            updatedValue = customerProfileService.updateHomeShopCustomer(false);
          }
          return updatedValue;
        }
      };

      var isUserEmailOptedIn = function (data) {
        if (data.userProfile
                && data.userProfile.bannerSpecificDetails
                && data.userProfile.bannerSpecificDetails[0]
            && data.userProfile.bannerSpecificDetails[0].userEmailPreferences
            ) {
          var userEmailPreferences = data.userProfile.bannerSpecificDetails[0].userEmailPreferences;
          for (var index in userEmailPreferences) {
            if (userEmailPreferences[index].selected) {
              return true;
            }
          }
        }
        return false;
      };
      //TODO remove this function
      var isUserHotOffersEligible = function (data) {
        if (data.userProfile
                && data.userProfile.bannerSpecificDetails
                && data.userProfile.bannerSpecificDetails[0]
            && data.userProfile.bannerSpecificDetails[0].userEmailPreferences
            ) {
          var userEmailPreferences = data.userProfile.bannerSpecificDetails[0].userEmailPreferences;
          var couponSpecialPromotionsEmailPreferenceId = EnvLookup.couponSpecialPromotionsEmailPreferenceId;

          for (var index in userEmailPreferences) {
            if (userEmailPreferences[index].selected == true
                    && _.has(userEmailPreferences[index], "preferenceType")
                    && userEmailPreferences[index].preferenceType.indexOf("extras") > -1
                && userEmailPreferences[index].id == couponSpecialPromotionsEmailPreferenceId) {
              return true;
            }
          }
        }
        return false;
      };

      $scope.$on('signInCancelClicked', function () {
        $scope.show.clickListSignIn = true;
      });

      $scope.cancel = function () {
        Beacon.registerSignInCanceled();
        if ($scope.show.signIn) {
          $scope.show.signIn = false;
          $rootScope.$broadcast('signInCancelClicked');
          return;
        }
        if (RedirectService.requestHasCancelUrl()) {
          $window.location.href = "/weeklyAd";
          return;
        }
        if (RedirectService.requestHasRedirectUrl()) {
          // for coupon redirect
          RedirectService.performRedirect();
        }
        else {
          $window.location.href = "/";
        }
      };

      $scope.$on('headerDrawerWasToggled', function (e, drawerName) {
        if (drawerName != 'signinDrawer') {
          $scope.show.signIn = false;
        }
        else {
          $scope.show.clickListSignIn = !$scope.show.clickListSignIn;
        }
      });

      $scope.registerRegisterTabClicked = function () {
        Beacon.registerRegisterTabClicked();
      };

      $scope.modalSignInClicked = function () {
        if(!$scope.show.signIn) {
          Beacon.registerSignInClick();
        }
        $scope.toggleDrawer();
      };

      $scope.toggleDrawer = function () {
        $rootScope.$broadcast('closeStoreReminder');
        $rootScope.$broadcast('headerDrawerWasToggled', 'signinDrawer');
        if ($scope.show.signIn) {
          $scope.show.signIn = false;
          $scope.isPasswordExpired = false;
        } else {
          $scope.show.signIn = true;
          $scope.$broadcast('focusSigninEmailInput', "(min-width: 1px)");
          $window.scrollTo(0,0);
        }
      };

      $scope.$on('clickListSignInPressed', function (e) {
        $scope.toggleDrawer();
      });

      $scope.clickListSignIn = function () {
        Beacon.registerSignInClick();
        $scope.show.clickListSignIn = false;
        $rootScope.$broadcast('clickListSignInPressed');
      };

      var floodLightTagsDisabled = $window.localEnvironment.signIn.floodLightTagsDisabled.split(',');
      if(!(floodLightTagsDisabled.indexOf("clklstli") > -1)) {
        var axel = Math.random() + "";
        var a = axel * 10000000000000;

        $scope.floodLightTag = '<iframe src="https://1817628.fls.doubleclick.net/activityi;src=1817628;type=Banne0;cat=clklstli;u1=' +
            $scope.bannerName + ';dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=' + a +
            '?" width="1" height="1" frameborder="0" style="display:none"></iframe>';
      }

      function closeDrawer() {
        $scope.show.signIn = false;
      }

      $scope.$on('toggleAccountDrawer', closeDrawer);
      $scope.$on('toggleSearchDrawer', closeDrawer);
      $scope.$on('toggleStoreDrawer', closeDrawer);

      $scope.$on('signInEvent', function (event, data) {
        if(data) {
         $scope.action = data.action;
         $scope.customRedirecturl = data.redirectUrl;
        }
        $scope.show.signIn = true;
        $scope.$broadcast('focusSigninEmailInput');
        $window.scrollTo(0,0);
      });

      $scope.submitClass = function () {
        return !$scope.disableSignIn() ? "submit mobileButtonEnabled" :
            "submit mobileButtonDisabled";
      };

      $scope.disableSignIn = function () {
        return _.isEmpty($scope.account.email) || _.isEmpty($scope.account.password);
      };

      $scope.submitOnIE8 = function () {
        if (isIE() == 8) {
          $scope.submit();
        }

        function isIE() {
          var myNav = navigator.userAgent.toLowerCase();
          return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
        }
      };

      var resetErrors= function () {
        $scope.isLocked = false;
        $scope.isValidationError = false;
        $scope.isLoginError = false;
        $scope.isEmailPreferenceError = false;
        $scope.isServiceError = false;
        $scope.isSessionTimedOut = false;
        $scope.invalidEmailError = false;
        $scope.invalidPasswordError = false;
      };

      $scope.submit = function () {
        $scope.isAuthenticating = true;
        $('input[ng-model]').trigger('input');
        var href, signInLocation = '';
        href = $window.location.href;
        if ($scope.show.signIn) {
          signInLocation = 'signInModal'
        } else {
          signInLocation = ($scope.isHomeShop ? 'homeShopSignInPage' : 'signInPage');
        }
        var rememberMeFlag = $scope.account.rememberMe ? 'rememberMe_true' : 'rememberMe_false';
        Beacon.registerSignInAttempt(signInLocation, rememberMeFlag);

        resetErrors();
        var emailError = validateEmail();
        var passwordError = validatePassword();
        if (!hasErrors()) {
          $http.post("/user/authenticate",
              {account: $scope.account, location: $window.location.hash}).success(function (data) {
                data.hasOwnProperty('store') ? StoreFunctions.makePreferredStore(data['store']) :
                    StoreFunctions.removePreferredStore();
                customerProfileService.updateRegisteredUser(true);
                customerProfileService.updateHomeShopCustomer(isUserHomeShopCustomer(data));
                customerProfileService.updateEmailOptInUser(isUserEmailOptedIn(data));
                customerProfileService.updateEmailHotOffersUser(isUserEmailOptedIn(data));

                if (data.hasOwnProperty('loyaltyCard')) {
                  if (data['loyaltyCard'].length > 0) {
                    customerProfileService.updateLoyalMember(true);
                  } else {
                    customerProfileService.updateLoyalMember(false);
                  }
                }

                if (RedirectService.requestHasRedirectUrl()) {
                  Beacon.registerSignInSuccess(signInLocation, rememberMeFlag,
                      RedirectService.requestHasRedirectToExternalUrl());
                }
                else {
                  Beacon.registerSignInSuccess(signInLocation, rememberMeFlag);
                }

                if ("true" == EnvLookup.isHeartBleedEnabled) {
                  var momentLastChange = moment(data['userProfile']['dateLastPasswordChange']);
                  var momentPromptDate = moment(EnvLookup.changePasswordPromptDate, 'YYYY-MMM-DD');

                  var loginAttempts =
                      (_.isUndefined($.cookie("loginattempts")) ||
                       _.isEmpty($.cookie("loginattempts"))) ?
                          0 : $.cookie("loginattempts");

                  if ((momentLastChange.isBefore(momentPromptDate) &&
                       parseInt(loginAttempts) < parseInt(EnvLookup.noOfAllowedAttempts))) {
                    $.cookie("loginattempts", ++loginAttempts, {path: '/', expires: 730});
                    if (RedirectService.requestHasRedirectUrl()) {
                      $window.location.href = '/changePassword?redirectUrl=' +
                                              encodeURIComponent(RedirectService.getParameterByName('redirectUrl'));
                    } else {
                      $window.location.href = '/changePassword';
                    }
                  } else {
                    if (RedirectService.requestHasRedirectUrl()) {
                      timeoutService.timeout(function () { RedirectService.performRedirect(); }, 400);
                    }
                    else {
                      if ($scope.isHomeShop) {
                        $window.location.href = homeShopBaseUrl;
                        return;
                      }
                      $window.location.reload(true);
                    }
                  }
                } else {
                  if (RedirectService.requestHasRedirectUrl()) {
                    timeoutService.timeout(function () { RedirectService.performRedirect(); }, 400);
                  }
                  else {
                    if ($scope.isHomeShop) {
                      $window.location.href = homeShopBaseUrl;
                      return;
                    }

                    if ($scope.isPPSRx) {
                      $window.location.href = ppsrxBaseUrl;
                      return;
                    }

                    if ($scope.customRedirecturl) {
                      $window.location.href = $scope.customRedirecturl;
                    }

                    $window.location.reload(true);
                  }
                }
              }).error(function (data) {
                $scope.isPasswordExpired = data.isPasswordExpired;
                $scope.isLocked = data.isLocked;
                $scope.isValidationError = data.isValidationError;
                $scope.isLoginError = !($scope.isLocked) || $scope.isValidationError;
                if (data.isServiceError) {
                  $scope.isServiceError = data.isServiceError;
                  $scope.correlationId = data.correlationId;
                  $scope.errorTypeCode = data.errorTypeCode;
                  $scope.isLoginError = false;
                } else {
                  $scope.isServiceError = false;
                }
                var errorMsg = [];
                var messages = {
                  "Account has been locked": $scope.isLocked,
                  "Login credentials wrong": $scope.isLoginError,
                  "Sign In Service Error": $scope.isServiceError,
                  "Email Preferences problem": $scope.isEmailPreferenceError
                };
                _.each(_.keys(messages),
                    function (message) {
                      if (messages[message]) {
                        errorMsg.push(message);
                      }
                    });
                var trackingMessage = errorMsg.join("|");
                if ( $scope.isServiceError ) {
                  Beacon.registerSignInFailure(rememberMeFlag, signInLocation, trackingMessage,
                    $scope.errorTypeCode + ":" + $scope.correlationId);
                } else {
                  Beacon.registerSignInFailure(rememberMeFlag, signInLocation, trackingMessage);
                }
                $scope.account.password = "";
                $scope.isAuthenticating = false;
              });
        } else {
          $scope.account.password = "";
          var errorMsg;
          if (!_.isUndefined(emailError) && !_.isUndefined(passwordError)) {
            errorMsg = emailError + '_' + passwordError;
          } else if (!_.isUndefined(emailError) && _.isUndefined(passwordError)) {
            errorMsg = emailError;
          } else if (_.isUndefined(emailError) && !_.isUndefined(passwordError)) {
            errorMsg = passwordError;
          }
          Beacon.registerSignInFailure(rememberMeFlag, signInLocation, errorMsg);
          $scope.isAuthenticating = false;
        }
      };
      init();
    };
  });

  melange.controller("signInController", [
    '$rootScope', '$scope', '$window', '$http', 'storeFunctions.Service',
    'promotionalPrograms.Service', 'beacon.Service', 'redirect.Service',
    'urlUtilities.Service', 'EnvLookup' , 'customerProfile.Service',
    'timeoutService', 'windowSize', 'validations.Service',
    melange.gadgets.signIn()
  ]);
});
/*]]>*/
</script>

    <div ng-controller="signInController" class="authenticationGadget">

        <a href="javascript:void(0)" id="signIn" class="account-drawer-toggle drawer-toggle-hidden-label" ng-click="modalSignInClicked()" ng-class="{active: show.signIn}">Sign In</a>

        <div class="sign-in-drawer" ng-class="{'drawer-visible': show.signIn}">

            <div class="sign-in-drawer-tabs">
                <span class="sign-in-drawer-tab -active">Sign In</span>
                <a class="sign-in-drawer-tab" ng-click="registerRegisterTabClicked()" ng-href="{{createAccountLink}}">Register</a>
            </div>
            <div aria-hidden="{{!show.signIn}}" class="sign-in-drawer-heading">
                <h1 ng-hide="isPasswordExpired">Sign In</h1>

                <h1 ng-show="isPasswordExpired">Attention</h1>
                <a href="" class="sign-in-drawer-close" ng-click="toggleDrawer()" tabindex="{{ show.signIn ? '0' : '-1'}}" aria-label="Close Sign in Section">
                    <img src="/static/image/icon_close.9a803fcf1318d425.png" width="21" height="21" alt="" />
                </a>
            </div>

            <div ng-show="isPasswordExpired"><div>
    <p>To protect your privacy and security, your account has been locked.</p>
    <p>You will not be permitted to access account-related features until your password is reset</p>
    <p>We have sent a link to reset your password to the email address associated with this account.</p>
</div></div>
            <div ng-hide="isPasswordExpired">

<form ng-submit="submit()" method="POST" ui-keypress="{13:'submitOnIE8()'}" class="signin-drawer-form cn-modal-content" name="signInForm" id="signInForm" autocomplete="off" novalidate="novalidate">
  <div aria-hidden="{{!show.signIn}}" aria-live="assertive">
    <p><i>{{signInPrompt()}}</i></p>

    <div role="alert" aria-live="assertive" ng-show="isEmailPreferenceError" class="section-error" data-qa="signin-drawer-email-preference-error">
      <p>We're sorry, due to technical difficulties, your email preferences have not been set. Please sign in to your account and navigate to your Account Summary to reselect your email preferences.</p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isLoginError" class="section-error" data-qa="signin-drawer-login-error">
      <p>There was a problem with the information that you entered. <br />Your login attempt was not successful.
      </p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isServiceError" class="section-error" data-qa="signin-drawer-service-error">
      <p>We're sorry, an unexpected error occurred during your sign-in attempt. <br />Please try signing in again.
      </p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isLocked" class="section-error" data-qa="signin-drawer-locked-error">
      <p> This account has been locked due to a problem with the information you entered. Please wait 30 minutes
        for the account to be unlocked and try again. Or, contact<a href="/ContactUs"> Customer Service</a> for help with your account.</p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isSessionTimedOut" class="section-error">
      <p>To protect your privacy, you have been signed out due to inactivity. Please sign in again.</p>
    </div>

    <ul>
      <li class="signin-drawer-field-item">
        <label for="signin-drawer-email-address">Email Address:</label>
        <input type="email" id="signin-drawer-email-address" data-qa="signin-drawer-email-address" size="40" ng-model="account.email" set-focus="focusSigninEmailInput" ng-class="{'-field-error':emailErrorText}" remove-default-ng-validations="true" tabindex="{{ show.signIn ? '0' : '-1'}}" />
        <div ng-show="emailErrorText" role="alert" aria-relevant="all" aria-live="polite" class="alert-error" data-qa="signin-drawer-email-error-text">
          <p>{{ emailErrorText }}</p>
        </div>
      </li>
      <li class="signin-drawer-field-item">
        <label for="signin-drawer-password">Password:</label>
        <input type="password" id="signin-drawer-password" data-qa="signin-drawer-password" size="40" ng-model="account.password" ng-class="{'-field-error':passwordErrorText}" autocomplete="off" tabindex="{{ show.signIn ? '0' : '-1'}}" />
        <div ng-show="passwordErrorText" role="alert" aria-relevant="all" aria-live="polite" class="alert-error" data-qa="signin-drawer-password-error-text">
          <p>{{ passwordErrorText }}</p>
        </div>
      </li>
      <li class="field-item -checkbox -small-bottom-margin">
        <span class="field-item-input-wrapper"><input type="checkbox" id="signin-drawer-remember-me" name="rememberMe" size="40" ng-model="account.rememberMe" tabindex="{{ show.signIn ? '0' : '-1'}}" /></span>
        <label for="signin-drawer-remember-me" class="unbold">Remember Me</label>
      </li>
    </ul>
    <div class="sign-in-other-actions">
      <a href="/forgotPassword" tabindex="{{ show.signIn ? '0' : '-1'}}">Forgot your password?</a>
      <p class="sign-in-drawer-create-account-link" ng-show="defaultCreateAccountPrompt">
        New to <span>PPS</span>? <a ng-href="{{createAccountLink}}" tabindex="{{ show.signIn ? '0' : '-1'}}"> Create an account</a>
      </p>
      <p class="sign-in-drawer-create-account-link" ng-show="pscCreateAccountPrompt">
        Don't have a <span>PPS Rx</span> account? <a ng-href="{{createAccountLink}}" tabindex="{{ show.signIn ? '0' : '-1'}}"> Create an account</a> for access to your Savings Center and more.
      </p>
    </div>
    <div class="signin-drawer-field-item-buttons">
      <input id="signin-drawer-submit" ng-disabled="isAuthenticating" data-qa="signin-drawer-submit" type="submit" value="Sign In" tabindex="{{ show.signIn ? '0' : '-1'}}" />
      <input type="button" id="signin-drawer-cancel" ng-click="cancel()" value="Cancel" class="cancelButton" tabindex="{{ show.signIn ? '0' : '-1'}}" />
    </div>
  </div>
</form>
</div>
        </div>

    </div>

</div>
        <div id="registrationContainer" ng-show="bannerIsAuthenticated" class="slot">

  <script type="text/javascript">
    requireQ(["everything"], function() {
      melange.controller('registration_identifier', [
        '$scope', '$window', 'beacon.Service', 'redirect.Service', 'EnvLookup',
        function ($scope, $window, Beacon, RedirectService, EnvLookup) {
          var pathName = window.location.href.split('/');
          var pageName = pathName[pathName.length - 1];
          $scope.register = function () {
            var path = '/account/create';
            Beacon.registerCreateAccountClick();
            $window.location.href = RedirectService.requestHasRedirectUrl() ?
                path + '?' + RedirectService.getSearchString() : path;
          }
        }
      ]);
    });
  </script>

  <div class="createAccountGadget" ng-controller="registration_identifier">
    <span id="createAccountLabel" class="register">No Account?</span>
    <a id="createAccount" href="javascript:void(0)" ng-click="register()" class="register">Register</a>
  </div>
</div>
        <div id="waitTimeContainer" ng-if="hasWaitTimeWithFeatureEnabled()" ng-show="showWaitTimeIndicator()" class="wait-time-display">
          <div class="store-locator-store-info-wait-time" name="clinicWaitTime">
            <div>
              <img src="/static/image/Clock_Blue_1x.447302f7575d05bc.png" />
              Current Wait Time:
              <a ng-if="!waitTime.available" href="#" class="wait-time-tooltip">
                <img src="/static/image/alert_Yellow_16x16.30f9003eb24c0f17.png" />
                <div class="tooltip-area" ng-bind-html="waitTime.description">
                </div>
              </a>
            </div>
            <span ng-if="waitTime.available" data-qa="store locator result preferred clinic wait time">{{waitTime.description}}</span>
          </div>
          <div class="store-locator-store-info-wait-list-enqueue">
            <wait-list-button-link store-id="preferredStoreId" wait-time="waitTime" wait-time-loading="waitTimeLoading"></wait-list-button-link>
          </div>
        </div>
        <div id="waitTimeContainerOld" ng-show="showWaitTimeIndicator()" ng-if="!waitListFeatureEnabled" class="wait-time-display-old">
          <div class="wait-time-header">
            Current Wait Time
          </div>
          <div class="wait-time-value">
            <div class="wait_time-text">{{waitTime}}</div>
          </div>
        </div>
      </div>

      <div id="preferredStoreBelow" ng-show="isLittleClinic">
        <h4 data-qa="preferred store heading">My {{storeLocatorText}}: </h4>
        <a data-qa="preferred store hours link" class="storeHoursLink" ng-hide="preferredStoreId == ''" ng-click="trackPreferredStoreClick()" href="" ng-bind-html="getPreferredStoreDetails() | trusted"></a>
        <span ng-show="preferredStoreId == ''">No {{storeLocatorText}} Selected</span>
        <p ng-show="waitTime" class="wait-time-label">
          <div>
            <div ng-if="!waitListFeatureEnabled">
              <img src="/static/image/Clock_Blue_1x.447302f7575d05bc.png" />
              <span ng-if="!waitListFeatureEnabled" class="wait-time-text">Current Wait Time: {{waitTime}}</span>
            </div>
            <div ng-if="hasWaitTimeWithFeatureEnabled()" class="mobile-wait-time-display">
              <div>
                <img src="/static/image/Clock_Blue_1x.447302f7575d05bc.png" />
                Current Wait Time:
              </div>
              <span class="mobile-wait-time-description" ng-class="{'unavailableDescription': !waitTime.available}" data-qa="store locator result preferred clinic wait time mobile" ng-bind-html="waitTime.description"></span>
            </div>
          </div>
        </p>
        <div class="store-locator-store-info-wait-list-enqueue">
          <wait-list-button-link store-id="preferredStoreId" wait-time="waitTime" wait-time-loading="waitTimeLoading"></wait-list-button-link>
        </div>
      </div>

      </div>

    </div>

    <div class="navbarNavigation navbarNav">
      <a href="/" ng-click="track()" class="brand">Postal Prescription Services</a>
      
      <div class="top-navigation" role="navigation" ng-class="{'-hidden-respond-small' : hideResponsiveNav }">
    <span class="desktop-navigation">
        <ul></ul>
    </span>
    <span class="mobile-navigation" inject-feedback-link="true" feedback-li-class="mobile-navigation__item -level-1" feedback-a-class="mobile-navigation__link -level-1">
        <ul></ul>
    </span>
    <broadcast-top-nav-loaded></broadcast-top-nav-loaded>
    <div pinned-list="" phone-mode="false"></div>

</div>
    </div>
  </div>
</header></div>
      <section role="main" id="accountContainer">
  <script>/*<![CDATA[*/
requireQ(["everything"], function () {
  common.register('melange.gadgets.signIn', function () {
    return function ($rootScope, $scope, $window, $http, StoreFunctions, PromotionProgramService, Beacon, RedirectService, UrlUtilitiesService, EnvLookup, customerProfileService, timeoutService, windowSize, ValidationsService) {
      $scope.isPasswordExpired = false;
      $scope.bannerName = EnvLookup.bannerName;
      $scope.isPPSRx = $scope.bannerName.toLowerCase() === 'ppsrx';
      $scope.show = { signIn: true, clickListSignIn: true };
      $scope.isAuthenticating = false;
      var rememberMeEmail = $window.localEnvironment.signIn.rememberMeEmail;
      var rememberMeOption = $window.localEnvironment.signIn.rememberMeOption;
      $scope.responsiveEnabled = windowSize.responsiveEnabled();
      $scope.tabletOrMobile = function () {
        return $window.innerWidth < 768;
      };
      $scope.floodLightTag = '';

      var homeShopBaseUrl = EnvLookup.homeShopBaseUrl;
      var ppsrxBaseUrl = "/myprescriptions";
      var isHomeShopPickStoreServiceIntegrationEnabled = EnvLookup.homeShopPickStoreServiceIntegrationEnabled;
      var signInPrompts = {
        myRecipes: 'Please log in to view My Recipes.',
        favorite: 'Please log in to save recipes.',
        shoppingList: 'Please log in to add ingredients to your Shopping List.',
        defaultPrompt: 'Sign in to view your account information.',
        rating:'Please log in to rate recipes.',
        productsList:'Sign in to add products to your list.'
      };
      var psc = EnvLookup.pscUrl.replace("/", "");
      var redirectUrl = RedirectService.requestHasRedirectUrl() ? RedirectService.getParameterByName('redirectUrl').replace('/', '') : "";
      var pathName = $window.location.pathname.substring($window.location.pathname.lastIndexOf('/') + 1);
      var action = $scope.action;
      signInPrompts[psc] = 'To view your Savings Center for coupons, sale items and more, please sign in.';

      $scope.pscCreateAccountPrompt = redirectUrl == psc || pathName == psc || action == psc;
      $scope.defaultCreateAccountPrompt = !$scope.pscCreateAccountPrompt;

      var redirectBasedSignInPrompt = function () {
        return RedirectService.requestHasRedirectUrl() ? signInPrompts[ RedirectService.getParameterByName('redirectUrl').replace('/', '')] : "";
      };

      var urlBasedSignInPrompt = function() {
        var url = $window.location.pathname;
        var pathname= url.substring(url.lastIndexOf('/') + 1);
        return signInPrompts[pathname];
      };

      var actionBasedSignInPrompt = function(){
        var actionBasedPrompt = $scope.action && signInPrompts[$scope.action];
        return actionBasedPrompt ? actionBasedPrompt : "";
      };

      $scope.signInPrompt = function() {
        var urlOrDefaultPrompt = urlBasedSignInPrompt() ? urlBasedSignInPrompt() : signInPrompts.defaultPrompt;
        if (actionBasedSignInPrompt()) {
          return actionBasedSignInPrompt();
        } else {
          return redirectBasedSignInPrompt() ? redirectBasedSignInPrompt() : urlOrDefaultPrompt;
        }
      };

      var getQueryParameter = function(queryParameterKey) {
        var query = window.location.href.split('?')[1];
        if (query) {
          var queryParams = query.split("&");
          var queryParameterValue = null;

          queryParams.filter(function (currentValue) {
            var keyValueArray = currentValue.split("=");
            if (keyValueArray[0] === queryParameterKey) {
              queryParameterValue = keyValueArray[1];
            }
          });
        }

        return queryParameterValue;
      };

      var init = function () {
        var userEmail = "";
        if (RedirectService.cookieEnabled()) {
          userEmail = localStorage.getItem("userEmail");
          timeoutService.timeout(function () {
            localStorage.removeItem("userEmail");
          }, 400);
        }

        $scope.account = { email: (_.isNull(userEmail) ? rememberMeEmail :
          userEmail), password: "", rememberMe: rememberMeOption };

        if ($scope.account.email === null && getQueryParameter("email")) {
          try {
            $scope.account.email = atob(getQueryParameter("email"));
          }
          catch(err) {
            console.log(err);
            $scope.account.email = null;
          }
          if ($scope.account.email !== null && $scope.tabletOrMobile() && $scope.show.clickListSignIn) {
            $scope.clickListSignIn();
          }
        }
        var href = $window.location.href;
        $scope.isHomeShop = $window.location.href.indexOf(homeShopBaseUrl) > -1;
        $scope.redirectUrlContains = function(token){
          if(RedirectService.requestHasRedirectUrl()){
            return token.indexOf(RedirectService.getParameterByName('redirectUrl')) >= 0;
          }
          return false;
        };
        $scope.show.signIn =
          ( href.indexOf('/#login') >= 0 || href.indexOf('/#/login') >= 0 ) ? true : false;
        $scope.isLoginError = false;
        $scope.isServiceError = false;
        $scope.emailErrorText = "";
        $("#emailError, #formEmailError").empty();
        $scope.passwordErrorText = "";
        $("#passwordError, #formPasswordError").empty();
        $scope.isLocked = false;
        $scope.isValidProgram = true;
        var queryParams = UrlUtilitiesService.getQueryParams();
        $scope.programName = queryParams.program;
        $scope.isEmailPreferenceError = queryParams.errorCode === "emailPreferenceNotSet";
        $scope.isSessionTimedOut = queryParams.errorCode === "sessionTimeout";

        var path = '/account/create';
        if (RedirectService.requestHasRedirectUrl()) {
          path = path + '?' + RedirectService.getSearchString();
        }
        if (queryParams.program) {
          path = path + '?program=' + queryParams.program;
        }
        $scope.createAccountLink = path;

        if($scope.isPPSRx && EnvLookup.isPPSVippsLogoApproved) {
          document.getElementById('vippsLogoContainer').innerHTML = "<a id=\"vipps-logo\" " +
            "title=\"Vipps\" " +
            "href=\"http://www.nabp.pharmacy/programs/vipps/vipps-accredited-pharmacies-list/\" " +
            "target=\"_blank\">\n" +
            "<img class=\"vippsLogo\" style=\"width: 150px\" src=\"/static/image/pharmacy/vipps.png\"/>\n" +
            "</a>"
        }
      };

      $scope.createAccount = function() {
        Beacon.registerCreateAccountClick('clicklistsignin_createanaccountlinkclicked');
        var path = '/account/create';
        $window.location.href = RedirectService.requestHasRedirectUrl() ?
            path + '?' + RedirectService.getSearchString() : path;
      };

      var hasErrors = function () {
        return  $scope.invalidEmailError || $scope.invalidPasswordError;
      };

      var validateEmail = function (isTest) {
        $scope.emailErrorText = false;
        var emailErrorText;
        if (_.isEmpty($scope.account.email)) {
          emailErrorText = 'Email is required';
          $scope.invalidEmailError = true;
        } else if (!ValidationsService.validateEmail($scope.account.email, true)) {
          emailErrorText = 'Email format is incorrect';
          $scope.invalidEmailError = true;
        }

        if($scope.invalidEmailError){
          timeoutService.timeout(function(){
              $scope.emailErrorText = emailErrorText;
          }, 0);
        }
        return $scope.emailErrorText;
      };

      var validatePassword = function () {
        $scope.passwordErrorText = undefined;

        if (_.isEmpty($scope.account.password)) {
          $scope.invalidPasswordError = true;
          timeoutService.timeout(function(){
            $scope.passwordErrorText = 'Password is required';
          });
        }

        return $scope.passwordErrorText;
      };

      var isUserHomeShopCustomer = function (data) {
        if (isHomeShopPickStoreServiceIntegrationEnabled) {
          if (data.userProfile
            && data.userProfile.bannerSpecificDetails
            && data.userProfile.bannerSpecificDetails[0]
            ) {
            return !_.isEmpty(data.userProfile.bannerSpecificDetails[0].pickupStoreDivisionNumber &&
              !_.isEmpty(data.userProfile.bannerSpecificDetails[0].pickupStoreNumber))
          }
        }
        else {
          //if homeshop has set cookie, honor it...
          var homeShopCookieName = "isHomeShopCustomer";
          var updatedValue;
          if ($.cookie(homeShopCookieName) != null) {
            updatedValue = customerProfileService.updateHomeShopCustomer($.cookie(homeShopCookieName));
          } else { //default to false since no cookie found
            updatedValue = customerProfileService.updateHomeShopCustomer(false);
          }
          return updatedValue;
        }
      };

      var isUserEmailOptedIn = function (data) {
        if (data.userProfile
                && data.userProfile.bannerSpecificDetails
                && data.userProfile.bannerSpecificDetails[0]
            && data.userProfile.bannerSpecificDetails[0].userEmailPreferences
            ) {
          var userEmailPreferences = data.userProfile.bannerSpecificDetails[0].userEmailPreferences;
          for (var index in userEmailPreferences) {
            if (userEmailPreferences[index].selected) {
              return true;
            }
          }
        }
        return false;
      };
      //TODO remove this function
      var isUserHotOffersEligible = function (data) {
        if (data.userProfile
                && data.userProfile.bannerSpecificDetails
                && data.userProfile.bannerSpecificDetails[0]
            && data.userProfile.bannerSpecificDetails[0].userEmailPreferences
            ) {
          var userEmailPreferences = data.userProfile.bannerSpecificDetails[0].userEmailPreferences;
          var couponSpecialPromotionsEmailPreferenceId = EnvLookup.couponSpecialPromotionsEmailPreferenceId;

          for (var index in userEmailPreferences) {
            if (userEmailPreferences[index].selected == true
                    && _.has(userEmailPreferences[index], "preferenceType")
                    && userEmailPreferences[index].preferenceType.indexOf("extras") > -1
                && userEmailPreferences[index].id == couponSpecialPromotionsEmailPreferenceId) {
              return true;
            }
          }
        }
        return false;
      };

      $scope.$on('signInCancelClicked', function () {
        $scope.show.clickListSignIn = true;
      });

      $scope.cancel = function () {
        Beacon.registerSignInCanceled();
        if ($scope.show.signIn) {
          $scope.show.signIn = false;
          $rootScope.$broadcast('signInCancelClicked');
          return;
        }
        if (RedirectService.requestHasCancelUrl()) {
          $window.location.href = "/weeklyAd";
          return;
        }
        if (RedirectService.requestHasRedirectUrl()) {
          // for coupon redirect
          RedirectService.performRedirect();
        }
        else {
          $window.location.href = "/";
        }
      };

      $scope.$on('headerDrawerWasToggled', function (e, drawerName) {
        if (drawerName != 'signinDrawer') {
          $scope.show.signIn = false;
        }
        else {
          $scope.show.clickListSignIn = !$scope.show.clickListSignIn;
        }
      });

      $scope.registerRegisterTabClicked = function () {
        Beacon.registerRegisterTabClicked();
      };

      $scope.modalSignInClicked = function () {
        if(!$scope.show.signIn) {
          Beacon.registerSignInClick();
        }
        $scope.toggleDrawer();
      };

      $scope.toggleDrawer = function () {
        $rootScope.$broadcast('closeStoreReminder');
        $rootScope.$broadcast('headerDrawerWasToggled', 'signinDrawer');
        if ($scope.show.signIn) {
          $scope.show.signIn = false;
          $scope.isPasswordExpired = false;
        } else {
          $scope.show.signIn = true;
          $scope.$broadcast('focusSigninEmailInput', "(min-width: 1px)");
          $window.scrollTo(0,0);
        }
      };

      $scope.$on('clickListSignInPressed', function (e) {
        $scope.toggleDrawer();
      });

      $scope.clickListSignIn = function () {
        Beacon.registerSignInClick();
        $scope.show.clickListSignIn = false;
        $rootScope.$broadcast('clickListSignInPressed');
      };

      var floodLightTagsDisabled = $window.localEnvironment.signIn.floodLightTagsDisabled.split(',');
      if(!(floodLightTagsDisabled.indexOf("clklstli") > -1)) {
        var axel = Math.random() + "";
        var a = axel * 10000000000000;

        $scope.floodLightTag = '<iframe src="https://1817628.fls.doubleclick.net/activityi;src=1817628;type=Banne0;cat=clklstli;u1=' +
            $scope.bannerName + ';dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=' + a +
            '?" width="1" height="1" frameborder="0" style="display:none"></iframe>';
      }

      function closeDrawer() {
        $scope.show.signIn = false;
      }

      $scope.$on('toggleAccountDrawer', closeDrawer);
      $scope.$on('toggleSearchDrawer', closeDrawer);
      $scope.$on('toggleStoreDrawer', closeDrawer);

      $scope.$on('signInEvent', function (event, data) {
        if(data) {
         $scope.action = data.action;
         $scope.customRedirecturl = data.redirectUrl;
        }
        $scope.show.signIn = true;
        $scope.$broadcast('focusSigninEmailInput');
        $window.scrollTo(0,0);
      });

      $scope.submitClass = function () {
        return !$scope.disableSignIn() ? "submit mobileButtonEnabled" :
            "submit mobileButtonDisabled";
      };

      $scope.disableSignIn = function () {
        return _.isEmpty($scope.account.email) || _.isEmpty($scope.account.password);
      };

      $scope.submitOnIE8 = function () {
        if (isIE() == 8) {
          $scope.submit();
        }

        function isIE() {
          var myNav = navigator.userAgent.toLowerCase();
          return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
        }
      };

      var resetErrors= function () {
        $scope.isLocked = false;
        $scope.isValidationError = false;
        $scope.isLoginError = false;
        $scope.isEmailPreferenceError = false;
        $scope.isServiceError = false;
        $scope.isSessionTimedOut = false;
        $scope.invalidEmailError = false;
        $scope.invalidPasswordError = false;
      };

      $scope.submit = function () {
        $scope.isAuthenticating = true;
        $('input[ng-model]').trigger('input');
        var href, signInLocation = '';
        href = $window.location.href;
        if ($scope.show.signIn) {
          signInLocation = 'signInModal'
        } else {
          signInLocation = ($scope.isHomeShop ? 'homeShopSignInPage' : 'signInPage');
        }
        var rememberMeFlag = $scope.account.rememberMe ? 'rememberMe_true' : 'rememberMe_false';
        Beacon.registerSignInAttempt(signInLocation, rememberMeFlag);

        resetErrors();
        var emailError = validateEmail();
        var passwordError = validatePassword();
        if (!hasErrors()) {
          $http.post("/user/authenticate",
              {account: $scope.account, location: $window.location.hash}).success(function (data) {
                data.hasOwnProperty('store') ? StoreFunctions.makePreferredStore(data['store']) :
                    StoreFunctions.removePreferredStore();
                customerProfileService.updateRegisteredUser(true);
                customerProfileService.updateHomeShopCustomer(isUserHomeShopCustomer(data));
                customerProfileService.updateEmailOptInUser(isUserEmailOptedIn(data));
                customerProfileService.updateEmailHotOffersUser(isUserEmailOptedIn(data));

                if (data.hasOwnProperty('loyaltyCard')) {
                  if (data['loyaltyCard'].length > 0) {
                    customerProfileService.updateLoyalMember(true);
                  } else {
                    customerProfileService.updateLoyalMember(false);
                  }
                }

                if (RedirectService.requestHasRedirectUrl()) {
                  Beacon.registerSignInSuccess(signInLocation, rememberMeFlag,
                      RedirectService.requestHasRedirectToExternalUrl());
                }
                else {
                  Beacon.registerSignInSuccess(signInLocation, rememberMeFlag);
                }

                if ("true" == EnvLookup.isHeartBleedEnabled) {
                  var momentLastChange = moment(data['userProfile']['dateLastPasswordChange']);
                  var momentPromptDate = moment(EnvLookup.changePasswordPromptDate, 'YYYY-MMM-DD');

                  var loginAttempts =
                      (_.isUndefined($.cookie("loginattempts")) ||
                       _.isEmpty($.cookie("loginattempts"))) ?
                          0 : $.cookie("loginattempts");

                  if ((momentLastChange.isBefore(momentPromptDate) &&
                       parseInt(loginAttempts) < parseInt(EnvLookup.noOfAllowedAttempts))) {
                    $.cookie("loginattempts", ++loginAttempts, {path: '/', expires: 730});
                    if (RedirectService.requestHasRedirectUrl()) {
                      $window.location.href = '/changePassword?redirectUrl=' +
                                              encodeURIComponent(RedirectService.getParameterByName('redirectUrl'));
                    } else {
                      $window.location.href = '/changePassword';
                    }
                  } else {
                    if (RedirectService.requestHasRedirectUrl()) {
                      timeoutService.timeout(function () { RedirectService.performRedirect(); }, 400);
                    }
                    else {
                      if ($scope.isHomeShop) {
                        $window.location.href = homeShopBaseUrl;
                        return;
                      }
                      $window.location.reload(true);
                    }
                  }
                } else {
                  if (RedirectService.requestHasRedirectUrl()) {
                    timeoutService.timeout(function () { RedirectService.performRedirect(); }, 400);
                  }
                  else {
                    if ($scope.isHomeShop) {
                      $window.location.href = homeShopBaseUrl;
                      return;
                    }

                    if ($scope.isPPSRx) {
                      $window.location.href = ppsrxBaseUrl;
                      return;
                    }

                    if ($scope.customRedirecturl) {
                      $window.location.href = $scope.customRedirecturl;
                    }

                    $window.location.reload(true);
                  }
                }
              }).error(function (data) {
                $scope.isPasswordExpired = data.isPasswordExpired;
                $scope.isLocked = data.isLocked;
                $scope.isValidationError = data.isValidationError;
                $scope.isLoginError = !($scope.isLocked) || $scope.isValidationError;
                if (data.isServiceError) {
                  $scope.isServiceError = data.isServiceError;
                  $scope.correlationId = data.correlationId;
                  $scope.errorTypeCode = data.errorTypeCode;
                  $scope.isLoginError = false;
                } else {
                  $scope.isServiceError = false;
                }
                var errorMsg = [];
                var messages = {
                  "Account has been locked": $scope.isLocked,
                  "Login credentials wrong": $scope.isLoginError,
                  "Sign In Service Error": $scope.isServiceError,
                  "Email Preferences problem": $scope.isEmailPreferenceError
                };
                _.each(_.keys(messages),
                    function (message) {
                      if (messages[message]) {
                        errorMsg.push(message);
                      }
                    });
                var trackingMessage = errorMsg.join("|");
                if ( $scope.isServiceError ) {
                  Beacon.registerSignInFailure(rememberMeFlag, signInLocation, trackingMessage,
                    $scope.errorTypeCode + ":" + $scope.correlationId);
                } else {
                  Beacon.registerSignInFailure(rememberMeFlag, signInLocation, trackingMessage);
                }
                $scope.account.password = "";
                $scope.isAuthenticating = false;
              });
        } else {
          $scope.account.password = "";
          var errorMsg;
          if (!_.isUndefined(emailError) && !_.isUndefined(passwordError)) {
            errorMsg = emailError + '_' + passwordError;
          } else if (!_.isUndefined(emailError) && _.isUndefined(passwordError)) {
            errorMsg = emailError;
          } else if (_.isUndefined(emailError) && !_.isUndefined(passwordError)) {
            errorMsg = passwordError;
          }
          Beacon.registerSignInFailure(rememberMeFlag, signInLocation, errorMsg);
          $scope.isAuthenticating = false;
        }
      };
      init();
    };
  });

  melange.controller("signInController", [
    '$rootScope', '$scope', '$window', '$http', 'storeFunctions.Service',
    'promotionalPrograms.Service', 'beacon.Service', 'redirect.Service',
    'urlUtilities.Service', 'EnvLookup' , 'customerProfile.Service',
    'timeoutService', 'windowSize', 'validations.Service',
    melange.gadgets.signIn()
  ]);
});
/*]]>*/
</script>
  <div class="contentBox ppsrx" id="contentBox">
    <section id="ppsrxSignIn">

      <div role="main" ng-controller="signInController" class="authenticationGadget signIn-container">


        <responsive-program-image></responsive-program-image>

        <div>

<form ng-submit="submit()" method="POST" ui-keypress="{13:'submitOnIE8()'}" class="sign-in-form cn-modal-content" name="signInForm" id="signInForm" autocomplete="off" novalidate="novalidate">
  <div aria-live="assertive">
    <p ng-hide="isHomeShop || isPPSRx"><i>Sign in to view your account information.</i></p>
    <p ng-show="isHomeShop"><i>Please sign in to shop.</i></p>
    <p ng-show="isPPSRx"><i>Please sign in.</i></p>

    <div role="alert" aria-live="assertive" ng-show="isEmailPreferenceError" class="section-error">
      <p>We're sorry, due to technical difficulties, your email preferences have not been set. Please sign in to your account and navigate to your Account Summary to reselect your email preferences.</p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isLoginError &amp;&amp; !isPasswordExpired" class="section-error" data-qa="failedLoginAttempt">
      <p>There was a problem with the information that you entered. <br />Your login attempt was not successful.
      </p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isServiceError" class="section-error">
      <p>We're sorry, an unexpected error occurred during your sign-in attempt. <br />Please try signing in again.
      </p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isLocked" class="section-error">
      <p> This account has been locked due to a problem with the information you entered. Please wait 30 minutes
        for the account to be unlocked and try again. Or, contact<a href="/ContactUs"> Customer Service</a> for help with your account.</p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isSessionTimedOut" class="section-error">
      <p>To protect your privacy, you have been signed out due to inactivity. Please sign in again.</p>
    </div>
    <div role="alert" aria-live="assertive" ng-show="isPasswordExpired" class="section-error">
      <div><div>
    <p>To protect your privacy and security, your account has been locked.</p>
    <p>You will not be permitted to access account-related features until your password is reset</p>
    <p>We have sent a link to reset your password to the email address associated with this account.</p>
</div></div>
    </div>

    <div ng-hide="isPasswordExpired">
      <ul>
        <li class="field-item">
          <label for="emailAddress">Email Address:</label>
          <input type="email" id="emailAddress" size="40" ng-model="account.email" ng-class="{'-field-error':emailErrorText}" remove-default-ng-validations="true" />
          <div ng-show="emailErrorText" role="alert" aria-relevant="all" aria-live="polite" class="alert-error" data-qa="emailErrorText">
            <p>{{ emailErrorText }}</p>
          </div>
        </li>
        <li class="field-item">
          <label for="password">Password:</label>
          <input type="password" id="password" size="40" ng-model="account.password" ng-class="{'-field-error':passwordErrorText}" autocomplete="off" />
          <div ng-show="passwordErrorText" role="alert" aria-relevant="all" aria-live="polite" class="alert-error" data-qa="passwordErrorText">
            <p>{{ passwordErrorText }}</p>
          </div>

        </li>
        <li class="field-item -checkbox -small-bottom-margin">
          <span class="field-item-input-wrapper"><input type="checkbox" id="rememberMe" name="rememberMe" size="40" ng-model="account.rememberMe" /></span>
          <label for="rememberMe" class="unbold">Remember Me</label>
        </li>
      </ul>
      <div class="marginBottom">
        <a href="/forgotPassword">Forgot your password?</a>
        <p class="sign-in-drawer-create-account-link" ng-show="defaultCreateAccountPrompt">
          New to <span>PPS</span>? <a ng-click="createAccount()" href="javascript:void(0)"> Create an account</a>
        </p>
        <p class="sign-in-drawer-create-account-link" ng-show="pscCreateAccountPrompt">
          Don't have a <span>PPS Rx</span> account? <a ng-click="createAccount();" href="javascript:void(0)"> Create an account</a> for access to your Savings Center and more.
        </p>
      </div>
      <div class="field-item-buttons">
        <input id="submit" ng-disabled="isAuthenticating" type="submit" value="Sign In" />
      </div>
    </div>
  </div>
</form>
</div>
      </div>
          <span class="responsive-image-container">
              <span show-media-alt="{{ hero.imageMetadata.name }}" show-media-src="/static/image/PPS_SignIn_WelcomeImage.jpg" show-media="(min-width: 768px)" show-media-default="true"></span>
          </span>
    </section>
    <section id="ppsrxHowWorks">
      <h1 id="howWorksHOne">PPS Benefits</h1><br />
      <ul>
        <li>
              <span class="responsive-image-container">
                      <span show-media-src="/static/image/Refill_Icon.png" show-media="(min-width: 550px)" show-media-default="true"></span>
                      <span show-media-src="/static/image/Refill_Icon.png" show-media="(max-width: 549px)"></span>
              </span>
          <h1>Refill</h1><br />
          <div>
            <p>Order prescription refills online, check order status, and track your package with convenient ship-to-home delivery.</p>
          </div>
        </li>
        <li>
              <span class="responsive-image-container">
                      <span show-media-src="/static/image/Manage_Icon.png" show-media="(min-width: 550px)" show-media-default="true"></span>
                      <span show-media-src="/static/image/Manage_Icon.png" show-media="(max-width: 549px)"></span>
              </span>
          <h1>Rx Management</h1><br />
          <div>
            <p>Manage prescriptions for multiple patients, including children and other family members.</p>
          </div>
        </li>
        <li>
              <span class="responsive-image-container">
                      <span show-media-src="/static/image/Expense_Icon.png" show-media="(min-width: 550px)" show-media-default="true"></span>
                      <span show-media-src="/static/image/Expense_Icon.png" show-media="(max-width: 549px)"></span>
              </span>
          <h1>Expense</h1><br />
          <div>
            <p>Quickly print expense reports for easier filing at tax time.</p>
          </div>
        </li>
      </ul>
    </section>
  </div>

</section>
    </div>

</div>
        <div><script>/*<![CDATA[*/
requireQ(["everything"], function () {
   common.register('melange.gadgets.promoRightPanel',
         melange.gadgets.promoRightPanel = function ($scope, $window, Beacon, EnvLookup) {
            $scope.shouldShowRightPanel = function () {
               if ($scope.bannerName === 'KingSoopers') {
                  return EnvLookup.promoSidePanelEnabled != undefined && EnvLookup.promoSidePanelEnabled;
               }
               return false
            };
            $scope.navigateToLiveNaturally = function () {
               Beacon.registerPromoLinkClick("rightpanel_livenaturallypromo2015");
               $window.open($scope.targetPromoUrl, '_blank');
            };

            $scope.bannerName = EnvLookup.bannerName;
            $scope.imgUrl = EnvLookup.promotionRightPanelAsset;
            $scope.targetPromoUrl = EnvLookup.liveNaturallyRightPanelLink;
            $scope.promotionRightPanelAltText = EnvLookup.promotionRightPanelAltText;
         });
   melange.controller('promoRightPanelController',
         ['$scope', '$window', 'beacon.Service', 'EnvLookup', melange.gadgets.promoRightPanel]);
});
/*]]>*/
</script>
<div ng-controller="promoRightPanelController">
    <div ng-if="shouldShowRightPanel()" class="promoPanels">
        <a href="" aria-label="{{ promotionRightPanelAltText }}" tabindex="0" ng-click="navigateToLiveNaturally()">
            <span show-media-src="{{ imgUrl }}" show-media="(min-width: 1280px)" show-media-default="false" id="promoRightPanelAsset"></span>
        </a>
    </div>
</div></div>
    </div>

    <div><footer role="contentinfo">
    <div>
  <div class="scoped-to-banner footer-background">
    <script>
      requireQ(["everything"], function() {
        melange.controller('footer_identifier', [
          '$scope', 'content.Service', '$window', 'trackable.Service',
          function ($scope, Content, $window, Trackable) {
            var slot_content =
            ['5625dba6ab99b1baf4e712f0']
            ||
            [];
            Content.queryBySlotContent(slot_content, function (data) {
              var html = $(data[0].body);
              var trackableHTML = $(Trackable.trackAnchors(html, "footer"));
              trackableHTML.find('#responsive-footer-feedback')
                  .attr('onclick', 'return openOpinionLabPopup()');

              $window.openOpinionLabPopup = function () {
                $scope.$emit('showOpinionLabPopup');
                $scope.$apply();
                return false;
              };

              if (trackableHTML.size() > 0) {
                $scope.messages = trackableHTML[0].outerHTML;
              }
            });
          }
        ]);
      });
    </script>
    <div class="banner-footer" ng-bind-html="messages | trusted" ng-controller="footer_identifier"></div>
    <div class="version">
      <div style="display:none;">site</div>
      <div style="display:none;">5.57.12-3_g189735f/13</div>
    </div>
    <span seo-crawlable-indicator="true"></span>
  </div>
</div>
    <div>
  <div class="scoped-to-banner">
    <div class="footerCopyRights">
      <p>All Contents &copy; Copyright <span>2017</span> The Kroger Co. All Rights Reserved </p>
      <p class="policyLinks"><a href="/pharmacyprivacy">Pharmacy Privacy Notice</a> <span class="footer-copyright-pipe">|</span>
        <a data-qa="terms_and_conditions" href="/termsandconditions">Terms and Conditions</a> <span class="footer-copyright-pipe">|</span>
        <a data-qa="privacy_policy" href="/privacypolicy">Privacy Policy</a></p>

      <!-- DO NOT REMOVE. Used in RxWeb -->
      <div id="vippsLogoContainer"></div>
      <!-- END NOT REMOVE -->

    </div>
  </div>
</div>
    <div>

<script type="text/javascript">
window.localEnvironment.socialRibbon = {
  facebook:'',
  twitter:'',
  youtube:'',
  pinterest:'',
  mobilegoogleplay:'',
  mobileappstore:''
};


</script>
<script>/*<![CDATA[*/
requireQ(["everything"], function() {
  common.register('melange.gadgets.socialRibbon',
      melange.gadgets.socialRibbon = function ($scope, $window) {
        $scope.twitter = $window.localEnvironment.socialRibbon.twitter;
        $scope.facebook = $window.localEnvironment.socialRibbon.facebook;
        $scope.youtube = $window.localEnvironment.socialRibbon.youtube;
        $scope.pinterest = $window.localEnvironment.socialRibbon.pinterest;
        $scope.android = $window.localEnvironment.socialRibbon.mobilegoogleplay;
        $scope.apple = $window.localEnvironment.socialRibbon.mobileappstore;

        $scope.showTwitter = !_.isEmpty($scope.twitter);
        $scope.showFacebook = !_.isEmpty($scope.facebook);
        $scope.showPinterest = !_.isEmpty($scope.pinterest);
        $scope.showYoutube = !_.isEmpty($scope.youtube);
        $scope.showAndroid = !_.isEmpty($scope.android);
        $scope.showApple = !_.isEmpty($scope.apple);
        $scope.isSocialIconsEmpty =
        (_.isEmpty($scope.twitter) && _.isEmpty($scope.facebook) && _.isEmpty($scope.youtube) &&
         _.isEmpty($scope.pinterest));
        $scope.isMobileIconsEmpty = (_.isEmpty($scope.android) && _.isEmpty($scope.apple));
        $scope.ribbonVisible = !($scope.isSocialIconsEmpty && $scope.isMobileIconsEmpty);
      });

  melange.controller('socialRibbonController', ['$scope', '$window', melange.gadgets.socialRibbon]);
});
/*]]>*/
</script>
<div ng-controller="socialRibbonController" ng-show="ribbonVisible" class="scoped-to-banner footer-background">
  <div class="socialIconRibbon">
    <ul id="socialRibbon">
      <li class="twitter" data-qa="socialRibbon.twitter" ng-show="showTwitter"><a ng-href="{{twitter}}"><span class="hide">Find us on Twitter</span></a></li>
      <li class="facebook" data-qa="socialRibbon.facebook" ng-show="showFacebook"><a ng-href="{{facebook}}"><span class="hide">Find us on Facebook</span></a></li>
      <li class="youtube" data-qa="socialRibbon.youtube" ng-show="showYoutube"><a ng-href="{{youtube}}"><span class="hide">Find us on Youtube</span></a></li>
      <li class="pininterest" data-qa="socialRibbon.pininterest" ng-show="showPinterest"><a ng-href="{{pinterest}}"><span class="hide">Find us on Pinterest</span></a></li>
      <li class="separator" data-qa="socialRibbon.separator" ng-hide="isSocialIconsEmpty || isMobileIconsEmpty"></li>
      <ul class="mobile-app-icons">
        <li class="android" data-qa="socialRibbon.android" ng-show="showAndroid"><a ng-href="{{android}}"><span class="hide">Download the Android app</span></a></li>
        <li class="apple" data-qa="socialRibbon.apple" ng-show="showApple"><a ng-href="{{apple}}"><span class="hide">Download the iOS app</span></a></li>
      </ul>
    </ul>
  </div>
</div>
</div>
</footer></div>
    <div><script language="JavaScript">
  requireQ(["everything"], function() {
    var omnitureEnabled = 'true';
    melange.app.beacon.omnitureAccount = 'krgrppsrxprod,krgrglobalprod';
    melange.app.beacon.globals =
    {
      loggedIn: false,
      bannerName: 'PPSRx',
      pid: '',
      channel: 'web',
      loyalMember: null
    };

    var track = function() {};

    melange.controller('TrackingController', [
      '$rootScope', 'beacon.Service', function ($rootScope, Beacon) {
        var topNavLoaded, topicLoaded, pageLoadSent = false;
        var waitForTopic = location.pathname.indexOf("/topic/") == 0;

        $rootScope.$on('topNavigationLoaded', function () {
          topNavLoaded = true;
          if (!waitForTopic || topicLoaded) {
            pageLoad();
          }
        });

        $rootScope.$on('topicLoaded', function () {
          topicLoaded = true;
          if (topNavLoaded) {
            pageLoad();
          }
        });

        function pageLoad() {
          if (!pageLoadSent) {
            pageLoadSent = true;
            Beacon.registerPageLoad();
          }
        };

        window.track = function (elementName, pageName, href, navType) {
          if (omnitureEnabled === 'true') {
            if (navType == 'topnav') {
              return Beacon.registerNavClick('topnav_' + elementName, href);
            }
            else if(navType == 'topic') {
              return Beacon.registerTopicHrefClick('topic_' + pageName + '_' + elementName, href);
            }
            else {
              return Beacon.registerFooterLinkClick('footer_' + elementName, href);
            }
          }
        };
      }
    ]);
  });
</script>
<noscript>
  <a href="http://www.omniture.com" title="Web Analytics">
    <img height="1" width="1" border="0" alt="" src="http://krgrppsrxprod,krgrglobalprod.112.2O7.net/b/ss/krgrppsrxprod,krgrglobalprod/1/H.14--NS/0" />
  </a>
</noscript>

<div ng-controller="TrackingController" style="display:none;">
</div></div>
</div>
<div><script>
  Q.all(allAppPromises).then(function() {
    appReadyDeferred.resolve();
  });
  var addViewportMetaTagForResponsive = function() {
    if(document.getElementById("grid-wrap").className.indexOf('row-fluid') > -1){
      var viewPortTag = document.createElement('meta');
      viewPortTag.id = "viewport";
      viewPortTag.name = "viewport";
      viewPortTag.content = "user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1";
      window.parent.document.getElementsByTagName('head')[0].appendChild(viewPortTag);
    }
  }
  addViewportMetaTagForResponsive();

</script>

</div>
</body>
</html>