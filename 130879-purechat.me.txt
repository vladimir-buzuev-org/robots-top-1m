<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,user-scalable=no">
	<title>Personal Chat Page - Pure Chat</title>
	<link href="/favicon.ico" rel="Shortcut Icon" />
	
	<link href="https://cdn.purechat.com/Assets/fonts.8514.css" rel="stylesheet">
	
	<link href="https://cdn.purechat.com/Assets/pcp_editor_styles.8514.css" rel="stylesheet">
	
	<link href="https://cdn.purechat.com/Assets/pcp_styles.8514.css" rel="stylesheet">
	
	<style>
		body {
			margin: 0;
		}
	</style>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
	<script>
		(function() {
			document.domain = 'purechat.com';
		})();
	</script>
</head>
<body class="purechat-direct-access">
	<!-- #if editor -->
	<form action="https://api.purechat.com/files/create?isPersonalAvatar=true&isWidgetImage=false" method="post" enctype="multipart/form-data" id="AvatarUploadForm" style="display: none !important;">
		<input type="file" name="PersonalAvatarImageUpload" accept="image/*" data-accept=".gif,.jpeg,.jpg,.bmp,.png" />
	</form>
	<div id="my-url" style="display:none"></div>
	<div id="states-bar" style="display:none"></div>
	<!-- / -->

	<div id="background-image"></div>
	<div id="temp-mask" style="background-color: #fff; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999;"></div>

	<!-- #if editor -->
	<div id="sidebar" style="display:none"></div>
	<!-- / -->

	<div id="state-tabs"></div>
	<div id="personal-container" class="purechat-widget-personal-container"></div>
	<div id="state-bar-overlay"></div>
	<div id="spinner"></div>

	<script src="https://cdn.purechat.com/Assets/editor.8514.js"></script>
	<script src="https://cdn.purechat.com/Assets/dashboard_widget.8514.js"></script>
	<script>
	function NewPcWidget(stateOverrides) {
		var dataController = null;
		var isInEditorMode = viewOptions.isInEditorMode;
		if (isInEditorMode && !firstRun) {
			dataController = purechatApp.Services.DataServiceSingleton.setInstance(new purechatApp.Services.DemoDataService(dataServiceOptions));
			viewOptions = $.extend(viewOptions, {
				isDemo: true,
				killForPreview: true
			});
			if ((!stateOverrides || !stateOverrides.force) && window.location.hash != '#' && window.location.hash.length > 1) {
				stateOverrides = {
					selectedState: window.location.hash
				};
			}
			if (stateOverrides) {
				if (stateOverrides.selectedState == '#noOperators') {
					dataController.chatAvailable = false;
					viewOptions.initialState = purechatApp.Constants.WidgetStates.Inactive;
				} else {
					dataController.chatAvailable = true;
					switch (stateOverrides.selectedState) {
						case '#inChat':
							viewOptions.initialState = purechatApp.Constants.WidgetStates.Chatting;
							break;
						case '#chatClosed':
							viewOptions.initialState = purechatApp.Constants.WidgetStates.Closed;
							break;
						case '#startChat':
							viewOptions.initialState = purechatApp.Constants.WidgetStates.Inactive;
						default:
							break;
					}
				}
			}
			if (window.pcPersonalEditorSettings) {
				window.pcPersonalEditorSettings.set({
					'initialState': viewOptions.initialState,
					'forceDemo': true
				});
			}
		} else {
			viewOptions.initialState = purechatApp.Constants.WidgetStates.Initializing;
			dataController = purechatApp.Services.DataServiceSingleton.setInstance(new purechatApp.Services.PCDataService(dataServiceOptions));
		}
		viewOptions = $.extend(viewOptions, {
			dataController: dataController
		});
		var c1 = new purechatApp.Controllers.PureChatController(
			new purechatApp.Models.WidgetSettings(viewOptions)
		);
		purechatApp.Notifications.controller = new purechatApp.Notifications.Controller({
			settings: c1.options
		});
		return c1;

	}

	function widgetIsReady(keepOldEditor) {
		var chatModel = w.getChatModel();
		var widgetLayout = w.widgetLayout;
		var inRoomOnLoad = w.getDataController().checkInRoom() !== null && typeof w.getDataController().checkInRoom() !== 'undefined';
		w.widgetLayout.expand(true, inRoomOnLoad);
		$('#temp-mask').addClass('purechat-hide');

		var chatPageData = window.chatPageData;

		if (chatPageData.isPersonalEditor)
		{
			try {
				w.off('stateChanged')
			} catch (ex) {
				console.log(ex);
			}
			if (viewOptions.isInEditorMode) {
				w.on('stateChanged', function(stateType, state) {
					if (stateType == purechatApp.Constants.WidgetStates.Chatting) {
						chatModel.set('userId', 1);
						w.getDataController().newMessage("I've got some questions about your product and / or service");
						chatModel.get('messages').add({ type: purechatApp.Constants.MessageTypes.Note, message: w.widgetLayout.getResource('chat_noOperatorMessage'), resourceKey: 'chat_noOperatorMessage', date: new Date() });

						try {
							w.getDataController().handler.onJoined(2, pcPersonalEditorSettings.get('UserWidgetSettings').get('DisplayName'), 1, "Joe Smith", 5, false);
						} catch (ex) {
							console.log(ex);
						}

						try {
							w.getDataController().handler.onMessage({
								userId: 2,
								userDisplayName: pcPersonalEditorSettings.get('UserWidgetSettings').get('DisplayName'),
								roomId: 1,
								roomDisplayName: "Joe Smith",
								time: (new Date().getTime() / 1000),
								message: "Sure thing, how can I help?",
								isHistory: false,
								timeElapsed: null,
								protocolVersion: null,
								avatarUrl: personalAvatarUrl || (pcPersonalEditorSettings.get('UserWidgetSettings').get('PersonalAvatarImage').FileExtension !== null
									? ('https://api.purechat.com/files/download/' + pcPersonalEditorSettings.get('UserWidgetSettings').get('PersonalAvatarImage').FileId + '.' + pcPersonalEditorSettings.get('UserWidgetSettings').get('PersonalAvatarImage').FileExtension) :
									'/content/i-operator-skinny.png'),
								type: 0
							});
						} catch (ex) {
							console.log(ex);
						}

						try {
							w.getDataController().handler.onTyping(2, pcPersonalEditorSettings.get('UserWidgetSettings').get('DisplayName'),
								1, "Joe Smith", true, 9);
						} catch (ex) {
							console.log(ex);
						}
					}
				});
			}
			if (!keepOldEditor) {
				window.pcPersonalEditorSettings = w.options;
				window.pcPersonalEditorSettings.set('UserWidgetSettings', new pcPersonalEditor.Models.PersonalWidgetModel(window.pcPersonalEditorSettings.get('UserWidgetSettings').attributes));
				window.pcDataController = window.pcPersonalEditorSettings.get('dataController');
				window.pcRenderInto = window.pcPersonalEditorSettings.get('renderInto');
				window.pcPersonalEditorSettings.set({
					'dataController': null,
					'oldDataController': window.pcDataController,
					'renderInto': null
				});

				window.pcWidgetSettings = firstRun ? new pcPersonalEditor.Models.WidgetSettings(chatPageData.directAccessModel.WidgetSettings) : window.pcWidgetSettings;
				window.pcWidgetSettings.set('UserWidgetSettings', window.pcPersonalEditorSettings.get('UserWidgetSettings'));
				window.pcWidgetSettings.set('SiteRootUrl', chatPageData.directAccessModel.PureChatUrl);
				window.pcWidgetSettings.set('ApiCdnUrl', chatPageData.directAccessModel.ApiCdnUrl);
				window.pcWidgetSettings.set('removeBrandingEnabled', chatPageData.removeBrandingEnabled);
				window.pcPersonalEditorSettingsChanged = false;
				pcPersonalEditor.Sidebar.instance = new pcPersonalEditor.Sidebar.Views.SidebarLayout({
					model: window.pcWidgetSettings,
					collection: new Backbone.Collection(window.pcWidgetSettings.get('StockBackgroundImages'))
				});
				pcPersonalEditor.sidebar.show(pcPersonalEditor.Sidebar.instance);
				if (window.pcPersonalEditorSettings.get('isInEditorMode')) {
					pcPersonalEditor.MyUrl.instance = new pcPersonalEditor.MyUrl.Views.UrlTab({
						model: window.pcWidgetSettings
					});
					pcPersonalEditor.myUrl.show(pcPersonalEditor.MyUrl.instance);
				}
				pcPersonalEditor.Sidebar.instance.triggerMethod('afterInserted');
				var editorSelector = '.editor-section';
				var contentSelector = '.content-section';

				if (firstRun) {
					firstRun = false;
					window.w.widgetLayout.on('afterInsertion', function() {
						//pcPersonalEditor.execute('sidebar:open', true);
					});
					if (showPersonalEditorEditPopup) {
						var d = new pcPersonalEditor.Dialog.Views.CompositeViewDialog({
							view: new pcPersonalEditor.Onboarding.Views.Welcome({
								model: new pcPersonalEditor.Models.WelcomeModel({
									Id: chatPageData.currentUserId
									})
							}),
							title: 'Hey!',
							blankDialog: true,
							width: 600
						});
						d.show();
					} else {
						$(pcPersonalEditor.statesBar.el).find('.fa-arrow-left, .fa-arrow-right').remove();
					}
				}

				$('body').off('click.ToggleEditor').on('click.ToggleEditor', '.purechat-additional-details-container .content-section, .purechat-personal-details-container .content-section', function(e) {
					var sender = $(e.currentTarget).find('.purechat-edit-button');
					if (sender.data('editorfor') != '.my-url') {
						var editableSelector = sender.data('editorfor');
						var editorSection = $(editableSelector).find(editorSelector);
						var contentSection = $(editableSelector).find(contentSelector);
						if (editableSelector != '.purechat-personal-avatar') {
							if (contentSection.hasClass('purechat-hide')) {
								contentSection.removeClass('purechat-hide');
								var view = editorSection.data('editor-view');
								view.destroy(); // This has been superceded by destroy() in the new versions of Marionette
							}
							contentSection.addClass('purechat-hide');
						}
						var view = null;
						window.openSidebarEditors = window.openSidebarEditors || [];
						if (editableSelector != '.purechat-personal-avatar' && window.openSidebarEditors.indexOf(editableSelector) == -1) {
							window.openSidebarEditors.push(editableSelector);
						}
						switch (editableSelector) {
							case '.purechat-social-buttons':
								view = new pcPersonalEditor.Views.SocialButtonsEditor({
									model: w.options.get('UserWidgetSettings'),
									editorFor: editableSelector
								});
								break;
							case '.purechat-website':
								view = new pcPersonalEditor.Views.WebsiteEditor({
									model: w.options.get('UserWidgetSettings'),
									theValue: w.options.get('UserWidgetSettings').get('Website'),
									editorFor: editableSelector
								});
								break;
							case '.purechat-phone':
								view = new pcPersonalEditor.Views.PhoneEditor({
									model: w.options.get('UserWidgetSettings'),
									theValue: w.options.get('UserWidgetSettings').get('PhoneNumber'),
									editorFor: editableSelector
								});
								break;
							case '.purechat-location':
								view = new pcPersonalEditor.Views.LocationEditor({
									model: w.options.get('UserWidgetSettings'),
									theValue: w.options.get('UserWidgetSettings').get('Location'),
									editorFor: editableSelector
								});
								break;
							case '.purechat-bio':
								view = new pcPersonalEditor.Views.BioEditor({
									model: w.options.get('UserWidgetSettings'),
									theValue: w.options.get('UserWidgetSettings').get('Bio'),
									editorFor: editableSelector
								});
								break;
							case '.purechat-personal-avatar':
								$('#AvatarUploadForm').find('input[type="file"]').trigger('click').off('change.UploadFile').on('change.UploadFile', function() {
									pcPersonalEditor.request('uploadPersonalAvatarImage').done(function() {
									}).fail(function() {
									});
								});
								break;
							case '.purechat-name':
								view = new pcPersonalEditor.Views.DisplayNameEditor({
									model: w.options.get('UserWidgetSettings'),
									theValue: w.options.get('UserWidgetSettings').get('DisplayName'),
									editorFor: editableSelector
								});
								break;
							default:
								break;
						}
						if (view) {
							view.render();
							editorSection.append(view.$el);
							editorSection.data('editor-view', view);
						}
					}
					return false;
				});
			}
		}
	}


	var url = 'https://api.purechat.com' +
		(window.location.pathname.indexOf('/u') === 0 ? window.location.pathname : '/u' + window.location.pathname);
	$.ajax({
		url: url,
		xhrFields: {
			withCredentials: true
		},
		crossDomain: true,
		headers: {'X-Requested-With': 'XMLHttpRequest'}
	})
	.fail(function(jqXHR) {
		if (jqXHR.status === 404) {
			window.location.href = 'https://app.purechat.com/404';
		} else {
			window.location.href = 'https://app.purechat.com/oops';
		}
	})
	.done(function (chatPageData) {
		$(function() {
			if (typeof pcPersonalEditor !== 'undefined' && chatPageData.isPersonalEditor) {
				pcPersonalEditor.Settings = new Backbone.Model({
					upgradeCheckoutUrl: chatPageData.upgradeCheckoutUrl.replace(/&amp;/gi, '&')
				});
			}
			window.showPersonalEditorEditPopup = chatPageData.ShowPersonalEditorEditPopup;
			window.showPersonalPublishPrompt = chatPageData.ShowPersonalPublishPrompt;
			window.firstRun = true;
			window.personalUrlBase = chatPageData.directAccessModel.PersonalChatUrlRoot;
			window.personalAvatarUrl = chatPageData.personalChatAvatar;
			window.openEditorOnLoad = true;
			window.chatPageData = chatPageData;

			document.title = chatPageData.displayName + ' - Personal Chat Page';

			if (chatPageData.isPersonalEditor)
			{
				window.currentUserId = chatPageData.currentUserId;
				window.myUrlOnLoad = chatPageData.directAccessKey;
				window.published = true;

				$('#my-url, #states-bar, #sidebar').show();

				if (window.ga) {
					ga('create', 'UA-50105816-3', 'auto');
					ga('send', 'pageview');
				}

			}

			window.widgetConstructorSettings = connectionSettings = {
				pureServerUrl: chatPageData.directAccessModel.PureChatUrl,
				cdnServerUrl: chatPageData.directAccessModel.CdnChatUrl,
				apiCdnServerUrl: chatPageData.directAccessModel.ApiCdnUrl,
				c: chatPageData.directAccessModel.WidgetSettings.Id,
				f: true
			};
			window.dataServiceOptions = {
				test: false,
				widgetId: connectionSettings.widgetId || connectionSettings.c,
				connectionSettings: connectionSettings,
				isWidget: connectionSettings.isWidget || connectionSettings.f,
				isOperator: (connectionSettings.d == undefined ? false : connectionSettings.d),
				pureServerUrl: connectionSettings.pureServerUrl,
				cdnServerUrl: connectionSettings.cdnServerUrl,
				apiCdnServerUrl: connectionSettings.apiCdnServerUrl,
				apiServerUrl: "https://api.purechat.com",
				renderInto: $('#personal-container'),
				isDirectAccess: true,
				isPersonalChat: true,
				isInEditorMode: chatPageData.isPersonalEditor
			};
			window.viewOptions = {
				test: false,
				pureServerUrl: connectionSettings.pureServerUrl,
				cdnServerUrl: connectionSettings.cdnServerUrl,
				apiCdnServerUrl: connectionSettings.apiCdnServerUrl,
				apiServerUrl: "https://api.purechat.com",
				widgetId: connectionSettings.widgetId || connectionSettings.c,
				isWidget: connectionSettings.isWidget || connectionSettings.f,
				isOperator: (connectionSettings.d == undefined ? false : connectionSettings.d),
				renderInto: $('#personal-container'),
				isPersonalChat: true,
				isInEditorMode: chatPageData.isPersonalEditor,
				origin: personalUrlBase + '/' + chatPageData.directAccessModel.WidgetSettings.DirectAccessKey,
				IPIsBanned: chatPageData.directAccessModel.IPIsBanned,
				BrowserDetails: chatPageData.browserDetails,
				ChatBoxEnabled: chatPageData.directAccessModel.ChatBoxEnabled,
				VisitorTrackingEnabled: chatPageData.directAccessModel.VisitorTrackingEnabled
			};

			window.localStorage.superMinimize = false;
			window.w = window._pcwi = new NewPcWidget();
			w.on('widget:ready', function(){
				widgetIsReady(null)
			});
		});

	})
	</script>

	
	<script>
		(function(i, s, o, g, r, a, m) {
			i['GoogleAnalyticsObject'] = r;
			i[r] = i[r] || function() {
				(i[r].q = i[r].q || []).push(arguments)
			}, i[r].l = 1 * new Date();
			a = s.createElement(o),
				m = s.getElementsByTagName(o)[0];
			a.async = 1;
			a.src = g;
			m.parentNode.insertBefore(a, m)
		})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
	</script>
	

</body>
</html>
