<!DOCTYPE html><html><head><meta charset="utf-8" class="next-head"/><title class="next-head">An Exploration of the Web â€“ Luke Morton</title><meta class="next-head"/><meta name="viewport" content="initial-scale=1.0, width=device-width" class="next-head"/><meta name="google-site-verification" content="lzxFltmFH5mp8y-5rFiNDfH9qQN8rHw_1zcwFVWQl7A" class="next-head"/><link rel="stylesheet" href="/static/reset.css" class="next-head"/><link rel="stylesheet" href="/static/screen.css" class="next-head"/></head><body><div><div id="__next"><div class="page" data-reactroot="" data-reactid="1" data-react-checksum="-1738815478"><!-- react-empty: 2 --><nav class="navigation" id="navigation" data-reactid="3"><div class="h3" data-reactid="4">Chapters</div><ol data-reactid="5"><li data-reactid="6"><a href="/" data-reactid="7">Introduction</a></li><li data-reactid="8"><a href="/thoughts/archive" data-reactid="9">Thoughts</a></li><li data-reactid="10"><a href="/about" data-reactid="11">About Author</a></li></ol></nav><div class="animated fadeIn" data-reactid="12"><main data-reactid="13"><h1 data-reactid="14"><span class="break--mobile" data-reactid="15">An Exploration</span><!-- react-text: 16 --> of the Web<!-- /react-text --></h1><p class="meta" data-reactid="17"><a href="/" data-reactid="18"><img src="https://s.gravatar.com/avatar/e7f62d126dec76b03e6d2393e44247ad?s=180" style="height:3em;width:3em;" data-reactid="19"/></a><em data-reactid="20"><!-- react-text: 21 -->By <!-- /react-text --><a href="/about" data-reactid="22">Luke Morton</a></em></p><div class="content" data-reactid="23"><p data-reactid="24">You know what interests me? Writing code and delivering systems that solve real problems. Why? Because it&#x27;s fun.</p><p data-reactid="25"><!-- react-text: 26 -->Here you will find a collection of <!-- /react-text --><a href="/thoughts/archive" data-reactid="27">my thoughts</a><!-- react-text: 28 --> about software and people problems. If you want you can find a little more <!-- /react-text --><a href="/about" data-reactid="29">about me</a><!-- react-text: 30 --> and please do get in touch via twitter <!-- /react-text --><a href="https://twitter.com/lukemorton" data-reactid="31">@LukeMorton</a><!-- react-text: 32 -->.<!-- /react-text --></p></div></main><aside data-reactid="33"><div class="thoughts" data-reactid="34"><h2 data-reactid="35">Thoughts</h2><ul data-reactid="36"><li class="post" data-reactid="37"><h3 data-reactid="38"><a href="/thoughts/2017-01-17-lightweight-docker-images-for-go" data-reactid="39">Lightweight docker images for Go</a></h3><p class="meta" data-reactid="40"><em data-reactid="41">17th January 2017</em></p><div class="content" data-reactid="42"><p>On building lightweight Docker images for Go applications.</p>
</div></li><li class="post" data-reactid="43"><h3 data-reactid="44"><a href="/thoughts/2017-01-15-deploying-go-on-zeit-now" data-reactid="45">Deploying a Go app on Now</a></h3><p class="meta" data-reactid="46"><em data-reactid="47">15th January 2017</em></p><div class="content" data-reactid="48"><p>A walkthrough on how to use Docker to deploy a Go app on Zeit&#39;s Now realtime global deployment platform.</p>
</div></li><li class="post" data-reactid="49"><h3 data-reactid="50"><a href="/thoughts/2016-09-24-business-logic-in-rails" data-reactid="51">Business logic in Rails</a></h3><p class="meta" data-reactid="52"><em data-reactid="53">24th September 2016</em></p><div class="content" data-reactid="54"><p>On structuring Rails apps for growth. Often a tricky area this article will walk you through a refactor and hopefully you&#39;ll walk away with a few more ideas for structuring your business logic.</p>
</div></li><li class="post" data-reactid="55"><h3 data-reactid="56"><a href="/thoughts/2016-01-12-do-the-thing-that-hurts-the-most" data-reactid="57">Do the thing that hurts the most</a></h3><p class="meta" data-reactid="58"><em data-reactid="59">12th January 2016</em></p><div class="content" data-reactid="60"><p>A story of fight over flight. Or how doing the things you&#39;re uncomfortable with
can help you in the long run.</p>
</div></li><li class="post" data-reactid="61"><h3 data-reactid="62"><a href="/thoughts/2016-01-09-feature-testing-in-2016" data-reactid="63">Feature testing in 2016</a></h3><p class="meta" data-reactid="64"><em data-reactid="65">9th January 2016</em></p><div class="content" data-reactid="66"><p>In which I outline a strategy for Feature testing with rspec and capybara.</p>
</div></li><li class="post" data-reactid="67"><h3 data-reactid="68"><a href="/thoughts/2015-09-12-better-active-record-mileage" data-reactid="69">Getting better mileage out of Active Record</a></h3><p class="meta" data-reactid="70"><em data-reactid="71">12th September 2015</em></p><div class="content" data-reactid="72"><p>In which I provide a few links to help scale the M in MVC,
the ActiveRecord in rails.</p>
</div></li><li class="post" data-reactid="73"><h3 data-reactid="74"><a href="/thoughts/2015-07-19-hiatus-over" data-reactid="75">Hiatus Over</a></h3><p class="meta" data-reactid="76"><em data-reactid="77">19th July 2015</em></p><div class="content" data-reactid="78"><p>Where I explain what I&#39;ve been up to.</p>
</div></li><li class="post" data-reactid="79"><h3 data-reactid="80"><a href="/thoughts/2013-11-14-more-methods-more-problems" data-reactid="81">More methods, more problems</a></h3><p class="meta" data-reactid="82"><em data-reactid="83">14th November 2013</em></p><div class="content" data-reactid="84"><p>An explanation as to why I don&#39;t like more than one <strong>public
method</strong> per class.</p>
</div></li><li class="post" data-reactid="85"><h3 data-reactid="86"><a href="/thoughts/2013-09-28-sans-framework-generation" data-reactid="87">Sans framework generation</a></h3><p class="meta" data-reactid="88"><em data-reactid="89">28th September 2013</em></p><div class="content" data-reactid="90"><p>That&#39;s right. It&#39;s time to leave your <strong>frameworks</strong> behind
you.</p>
</div></li><li class="post" data-reactid="91"><h3 data-reactid="92"><a href="/thoughts/2013-09-27-IDV" data-reactid="93">IDV</a></h3><p class="meta" data-reactid="94"><em data-reactid="95">27th September 2013</em></p><div class="content" data-reactid="96"><p>Introducing the <strong>Interaction</strong>, <strong>Data</strong> and <strong>View</strong>
design pattern.</p>
</div></li></ul><!-- react-text: 97 -->---<!-- /react-text --><p data-reactid="98"><!-- react-text: 99 -->Please do read more from <!-- /react-text --><a href="/thoughts/archive" data-reactid="100">the archives</a><!-- react-text: 101 -->.<!-- /react-text --></p></div><div class="projects" data-reactid="102"><h2 data-reactid="103">Open Source Projects</h2><ul data-reactid="104"><li class="post" data-reactid="105"><h3 data-reactid="106"><a href="https://github.com/madetech/market_town" data-reactid="107">MarketTown</a></h3><div class="content" data-reactid="108"><p data-reactid="109">A collection of open source libraries for e-commerce.</p></div></li><li class="post" data-reactid="110"><h3 data-reactid="111"><a href="https://github.com/madetech/cf-deploy" data-reactid="112">cf-deploy</a></h3><div class="content" data-reactid="113"><p data-reactid="114">cf-deploy is the tool you use to deploy your rails app to CloudFoundry providers like Pivotal.</p></div></li><li class="post" data-reactid="115"><h3 data-reactid="116"><a href="https://github.com/lukemorton/rui" data-reactid="117">rui</a></h3><div class="content" data-reactid="118"><p data-reactid="119">Very experimental ruby user interface library for HTML/CSS.</p></div></li><li class="post" data-reactid="120"><h3 data-reactid="121"><a href="https://github.com/lukemorton/lily" data-reactid="122">Lily</a></h3><div class="content" data-reactid="123"><p data-reactid="124">A lightweight web application library for PHP.</p></div></li></ul><!-- react-text: 125 -->---<!-- /react-text --><p data-reactid="126"><!-- react-text: 127 -->You can find even more of my open source work on my <!-- /react-text --><a data-reactid="128">GitHub profile</a><!-- react-text: 129 -->.<!-- /react-text --></p></div></aside></div><div data-reactid="130"></div></div></div><script>__NEXT_DATA__ = {"component":"module.exports=webpackJsonp([3],{121:function(e,t,o){\"use strict\";function n(e){return e\u0026\u0026e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(59),a=n(i),s=o(4),r=n(s),l=o(23),h=n(l),c=function(e){var t=e.plainTitle,o=e.thoughtTitleWrapper,n=e.url,i=e.slug,a=e.publishedAt,s=e.intro;return r.default.createElement(\"li\",{className:\"post\"},o(r.default.createElement(h.default,{href:\"/thoughts/show?slug=\"+i,as:n},t)),r.default.createElement(\"p\",{className:\"meta\"},r.default.createElement(\"em\",null,a)),r.default.createElement(\"div\",{className:\"content\",dangerouslySetInnerHTML:{__html:s}}))},d=function(e){return function(t,o){return r.default.createElement(c,(0,a.default)({},t,{key:o,thoughtTitleWrapper:e}))}};t.default=function(e){var t=e.title,o=e.thoughtTitleWrapper,n=e.thoughts,i=e.after;return r.default.createElement(\"div\",{className:\"thoughts\"},t,r.default.createElement(\"ul\",null,n.map(d(o))),\"---\",i)}},215:function(e,t,o){\"use strict\";function n(e){return e\u0026\u0026e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(11),a=n(i),s=o(7),r=n(s),l=o(8),h=n(l),c=o(13),d=n(c),p=o(12),u=n(p),m=o(4),g=n(m),f=o(23),w=n(f),b=o(57),y=n(b),k=o(121),v=n(k),I=o(333),T=n(I),M=o(220),A=n(M),j=function(e){function t(){return(0,r.default)(this,t),(0,d.default)(this,(t.__proto__||(0,a.default)(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,h.default)(t,[{key:\"render\",value:function(){return g.default.createElement(y.default,{title:\"An Exploration of the Web\"},g.default.createElement(\"main\",null,g.default.createElement(\"h1\",null,g.default.createElement(\"span\",{className:\"break--mobile\"},\"An Exploration\"),\" of the Web\"),g.default.createElement(\"p\",{className:\"meta\"},g.default.createElement(w.default,{href:this.props.indexUrl},g.default.createElement(\"img\",{src:this.props.avatarSrc,style:{height:\"3em\",width:\"3em\"}})),g.default.createElement(\"em\",null,\"By \",g.default.createElement(w.default,{href:this.props.aboutUrl},\"Luke Morton\"))),g.default.createElement(\"div\",{className:\"content\"},g.default.createElement(\"p\",null,\"You know what interests me? Writing code and delivering systems that solve real problems. Why? Because it's fun.\"),g.default.createElement(\"p\",null,\"Here you will find a collection of \",g.default.createElement(w.default,{href:this.props.archiveUrl},\"my thoughts\"),\" about software and people problems. If you want you can find a little more \",g.default.createElement(w.default,{href:this.props.aboutUrl},\"about me\"),\" and please do get in touch via twitter \",g.default.createElement(\"a\",{href:this.props.twitterUrl},this.props.twitterHandle),\".\"))),g.default.createElement(\"aside\",null,g.default.createElement(v.default,{title:g.default.createElement(\"h2\",null,\"Thoughts\"),thoughtTitleWrapper:function(e){return g.default.createElement(\"h3\",null,e)},thoughts:this.props.thoughts,after:g.default.createElement(\"p\",null,\"Please do read more from \",g.default.createElement(\"a\",{href:this.props.archiveUrl},\"the archives\"),\".\")}),g.default.createElement(T.default,{title:g.default.createElement(\"h2\",null,\"Open Source Projects\"),projects:this.props.projects,after:g.default.createElement(\"p\",null,\"You can find even more of my open source work on my \",g.default.createElement(\"a\",{href:this.props.githubUrl},\"GitHub profile\"),\".\")})))}}],[{key:\"getInitialProps\",value:function(){return{indexUrl:\"/\",aboutUrl:\"/about\",archiveUrl:\"/thoughts/archive\",twitterUrl:\"https://twitter.com/lukemorton\",avatarSrc:\"https://s.gravatar.com/avatar/e7f62d126dec76b03e6d2393e44247ad?s=180\",twitterHandle:\"@LukeMorton\",thoughts:A.default,projects:[{name:\"MarketTown\",description:\"A collection of open source libraries for e-commerce.\",url:\"https://github.com/madetech/market_town\"},{name:\"cf-deploy\",description:\"cf-deploy is the tool you use to deploy your rails app to CloudFoundry providers like Pivotal.\",url:\"https://github.com/madetech/cf-deploy\"},{name:\"rui\",description:\"Very experimental ruby user interface library for HTML/CSS.\",url:\"https://github.com/lukemorton/rui\"},{name:\"Lily\",description:\"A lightweight web application library for PHP.\",url:\"https://github.com/lukemorton/lily\"}]}}}]),t}(g.default.Component);t.default=j},220:function(e,t){e.exports=[{title:'\u003ch1 id=\"lightweight-docker-images-for-go\"\u003eLightweight docker images for Go\u003c/h1\u003e\\n',plainTitle:\"Lightweight docker images for Go\",intro:\"\u003cp\u003eOn building lightweight Docker images for Go applications.\u003c/p\u003e\\n\",publishedAt:\"17th January 2017\",publishedAtISO:\"2017-01-17T00:00:00.000+00:00\",content:'\u003cp\u003eOn building lightweight Docker images for Go applications.\u003c/p\u003e\\n\u003cp\u003eIn my last article I wrote about \u003ca href=\"/thoughts/2017-01-15-deploying-go-on-zeit-now\"\u003edeploying Go apps to Now\u003c/a\u003e. I arrived at a solution that compiled a Go app inside a Docker container. This means that the Docker container needed to be built with all the dependencies necessary to compile Go code into something useful.\u003c/p\u003e\\n\u003ch2 id=\"measuring-the-size-of-a-docker-image\"\u003eMeasuring the size of a Docker image\u003c/h2\u003e\\n\u003cp\u003eWe can find out the size of an image by building it with a tag. Using the article\u0026#39;s example hello-world app we can run \u003ccode\u003edocker build\u003c/code\u003e in it\u0026#39;s directory.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world .\\n\\nSending build context to Docker daemon 5.701 MB\\nStep 1 : FROM golang:alpine\\n ---\u0026gt; 00371bbb49d5\\nStep 2 : ADD . /go/src/github.com/lukemorton/hello-world\\n ---\u0026gt; Using cache\\n ---\u0026gt; dda524fc2668\\nStep 3 : RUN go install github.com/lukemorton/hello-world\\n ---\u0026gt; Using cache\\n ---\u0026gt; f830049507ec\\nStep 4 : CMD /go/bin/hello-world\\n ---\u0026gt; Using cache\\n ---\u0026gt; ba41def5c5d6\\nStep 5 : EXPOSE 3000\\n ---\u0026gt; Using cache\\n ---\u0026gt; 9bd3101ccc6b\\nSuccessfully built 9bd3101ccc6b\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the image has been built and tagged we can then check the size with the \u003ccode\u003edocker images\u003c/code\u003e command:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ docker images hello-world --format {{.Size}}\\n\\n251.9 MB\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI filtered the results of docker images by passing the tag I gave the image when I built it, \u003ccode\u003ehello-world\u003c/code\u003e. I also provided the \u003ccode\u003e--format\u003c/code\u003e flag to only output the size. Try running \u003ccode\u003edocker images\u003c/code\u003e without any arguments to see a more detailed list of your images.\u003c/p\u003e\\n\u003ch2 id=\"size-of-a-go-binary\"\u003eSize of a Go binary\u003c/h2\u003e\\n\u003cp\u003eOkay so how much larger is this image than the Go binary that it compiles? In other words, how much cruft does the Docker image add? From the directory of our hello world example we can find out.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ go build -o hello-world .\\n$ du -kh hello-world\\n\\n5.4M    hello-world\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWoah, 5.4MB of the 251.9MB image is taken up by our application. Thats about 2% of the image size. The rest of the space is taken up by the operating system and dependencies required to build the binary.\u003c/p\u003e\\n\u003cp\u003eIt\u0026#39;s worth saying that the base image I used was \u003ccode\u003egolang:alpine\u003c/code\u003e which is the smallest possible image on which you can build Go code. If you change \u003ccode\u003eFROM golang:alpine\u003c/code\u003e in the \u003ccode\u003eDockerfile\u003c/code\u003e to \u003ccode\u003eFROM golang\u003c/code\u003e, compile the Docker image and check the size, you\u0026#39;ll see it\u0026#39;s much bigger.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world:large .\\n$ docker images hello-world:large --format {{.Size}}\\n\\n691 MB\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0026#39;s like over 2.7 times the size of our alpine based image.\u003c/p\u003e\\n\u003ch2 id=\"going-microcontainer\"\u003eGoing microcontainer\u003c/h2\u003e\\n\u003cp\u003eWhat if I told you we could get the image size down the size of our binary? You\u0026#39;d believe me right :)\u003c/p\u003e\\n\u003cp\u003eIn order to get the image size down further we need to make a decision to compile our Go application outside of the Docker container. We then switch our base image from \u003ccode\u003egolang:alpine\u003c/code\u003e to \u003ccode\u003escratch\u003c/code\u003e, the lightest image of them all, it\u0026#39;s empty! It\u0026#39;s name is actually a pun, \u003ccode\u003eFROM scratch\u003c/code\u003e.\u003c/p\u003e\\n\u003cp\u003eI\u0026#39;m getting excited, let\u0026#39;s update our Dockerfile:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003eFROM scratch\\nADD hello-world /\\nCMD [\u0026quot;/hello-world\u0026quot;]\\nEXPOSE 3000\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow before we run \u003ccode\u003edocker build\u003c/code\u003e we need to compile our Go binary before hand. If you notice the \u003ccode\u003eADD hello-world /\u003c/code\u003e that\u0026#39;s copying the binary into the image. We need to build it.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o hello-world .\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnlike my original article, we provide a number of flags to the \u003ccode\u003ego build\u003c/code\u003e command. This is making our Go binary portable enough to run inside our empty image. Without these flags we get errors about missing shared libraries, it gets real ugly real quick, trust me.\u003c/p\u003e\\n\u003cp\u003eNow let\u0026#39;s build:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world:light .\\n$ docker images hello-world:light --format {{.Size}}\\n\\n5.635 MB\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe did it! Small huh? Let me know what you think on Twitter \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\\n\u003ch4 id=\"footnotes\"\u003eFootnotes\u003c/h4\u003e\\n\u003cul\u003e\\n\u003cli\u003eCredit goes to \u003ca href=\"https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/\"\u003eNick Gauthier\u0026#39;s article\u003c/a\u003e for codeship on showing me how to build Go microcontainers.\u003c/li\u003e\\n\u003cli\u003eIf you\u0026#39;re using Now.sh to deploy your application you\u0026#39;ll need to be paying for the service as the binary file will always be larger than the 1MB file upload limit in place for free users of their service. If you want to keep on the free tier, you\u0026#39;ll have to put up with the image size of using \u003ccode\u003eFROM golang:alpine\u003c/code\u003e.\u003c/li\u003e\\n\u003c/ul\u003e\\n',url:\"/thoughts/2017-01-17-lightweight-docker-images-for-go\",slug:\"2017-01-17-lightweight-docker-images-for-go\"},{title:'\u003ch1 id=\"deploying-a-go-app-on-now\"\u003eDeploying a Go app on Now\u003c/h1\u003e\\n',plainTitle:\"Deploying a Go app on Now\",intro:\"\u003cp\u003eA walkthrough on how to use Docker to deploy a Go app on Zeit\u0026#39;s Now realtime global deployment platform.\u003c/p\u003e\\n\",publishedAt:\"15th January 2017\",publishedAtISO:\"2017-01-15T00:00:00.000+00:00\",content:'\u003cp\u003eA walkthrough on how to use Docker to deploy a Go app on Zeit\u0026#39;s Now realtime global deployment platform.\u003c/p\u003e\\n\u003cp\u003eI recently moved www.lukemorton.co.uk to being hosted on \u003ca href=\"https://now.sh\"\u003eNow\u003c/a\u003e. It\u0026#39;s a node.js app built with Next.js and I\u0026#39;m telling ya, it was a great experience as Now is super easy to get going on.\u003c/p\u003e\\n\u003cp\u003eAfter moving this site across I felt excited to try Now for something else. I\u0026#39;ve always wanted to write an API in Go and Now can serve pretty much any tech stack as it supports Docker. So I gave it a shot and this hello world blog post documents my learnings.\u003c/p\u003e\\n\u003ch2 id=\"setting-up-your-development-environment\"\u003eSetting up your development environment\u003c/h2\u003e\\n\u003cp\u003eIn case you haven\u0026#39;t built a Go app before, I\u0026#39;ll quickly go over how to set it up on your machine.\u003c/p\u003e\\n\u003col\u003e\\n\u003cli\u003eInstall \u003ca href=\"https://golang.org/doc/install#install\"\u003eGo\u003c/a\u003e for your platform\u003c/li\u003e\\n\u003cli\u003eThen create your Go workspace, it\u0026#39;s an odd concept but essentially vendored libraries and your own projects will be installed in this workspace, run \u003ccode\u003emkdir ~/GoWork\u003c/code\u003e and then \u003ccode\u003eexport $GOPATH=~/GoWork\u003c/code\u003e\u003c/li\u003e\\n\u003cli\u003eInstall the \u003ca href=\"https://github.com/zeit/now-cli/\"\u003enow-cli\u003c/a\u003e with \u003ccode\u003enpm install -g now-cli\u003c/code\u003e\u003c/li\u003e\\n\u003c/ol\u003e\\n\u003ch2 id=\"creating-a-hello-world\"\u003eCreating a hello world\u003c/h2\u003e\\n\u003cp\u003eNow let\u0026#39;s create a quick HTTP hello world example in Go. First we need a directory within your Go workspace to:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003emkdir -p $GOPATH/src/github.com/lukemorton/hello-world\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can replace \u003ccode\u003elukemorton\u003c/code\u003e with your own GitHub username.\u003c/p\u003e\\n\u003cp\u003eNow we need some code, below is my quick Go hello world. It\u0026#39;s a very simple hello world web app that runs on port 3000. There\u0026#39;s some logging in the to let you know when it starts and if something goes wrong.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode class=\"lang-go\"\u003epackage main\\n\\nimport (\\n    \u0026quot;fmt\u0026quot;\\n    \u0026quot;log\u0026quot;\\n    \u0026quot;net/http\u0026quot;\\n)\\n\\nfunc main() {\\n    http.HandleFunc(\u0026quot;/\u0026quot;, func(w http.ResponseWriter, r *http.Request) {\\n        fmt.Fprintln(w, \u0026quot;Hello world\u0026quot;)\\n    })\\n\\n    log.Println(\u0026quot;Serving on localhost:3000\u0026quot;)\\n    err := http.ListenAndServe(\u0026quot;:3000\u0026quot;, nil)\\n    log.Fatal(err)\\n}\\n\u003c/code\u003e\u003c/pre\u003e\\n\u003cp\u003eSave this file in your new directory as \u003ccode\u003ehello.go\u003c/code\u003e. Now we can run it:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003ego run hello.go\\n# =\u0026gt; 2017/01/15 15:36:26 Serving on localhost:3000\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVisit your hello world in your browser \u003ca href=\"http://localhost:3000\"\u003ehttp://localhost:3000\u003c/a\u003e. You should see \u0026quot;Hello world\u0026quot; printed.\u003c/p\u003e\\n\u003ch2 id=\"deploying-with-docker\"\u003eDeploying with Docker\u003c/h2\u003e\\n\u003cp\u003eCoooooool, so we\u0026#39;ve got our Go web app and now we want to deploy it. To do this we are going to create a Docker image that compiles and runs our Go app for us. Once we have this we can deploy it to Now.\u003c/p\u003e\\n\u003cp\u003eWe then create our \u003ccode\u003eDockerfile\u003c/code\u003e which uses golangs official alpine image. Alpine is a lightweight operating system ideal of creating small(er) docker images.\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003eFROM golang:alpine\\nADD . /go/src/github.com/lukemorton/hello-world\\nRUN go install github.com/lukemorton/hello-world\\nCMD [\u0026quot;/go/bin/hello-world\u0026quot;]\\nEXPOSE 3000\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNot much to it is there. Make sure you save this as \u003ccode\u003eDockerfile\u003c/code\u003e in the same directory as your \u003ccode\u003ehello.go\u003c/code\u003e file. All it does is copy \u003ccode\u003ehello.go\u003c/code\u003e into the container, compiles it into a binary, runs that binary and exposes the port 3000. Again you can replace \u003ccode\u003elukemorton\u003c/code\u003e with your own GitHub username.\u003c/p\u003e\\n\u003cp\u003eNow we are ready to deploy:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003enow\\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd thats it. It\u0026#39;ll upload your files, build a Docker container and run it for you. In case you wanted to look over all the files, I\u0026#39;ve placed them on \u003ca href=\"https://github.com/lukemorton/hello-world\"\u003emy GitHub\u003c/a\u003e. Let me know what you think on Twitter \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\\n',url:\"/thoughts/2017-01-15-deploying-go-on-zeit-now\",slug:\"2017-01-15-deploying-go-on-zeit-now\"},{title:'\u003ch1 id=\"business-logic-in-rails\"\u003eBusiness logic in Rails\u003c/h1\u003e\\n',plainTitle:\"Business logic in Rails\",intro:\"\u003cp\u003eOn structuring Rails apps for growth. Often a tricky area this article will walk you through a refactor and hopefully you\u0026#39;ll walk away with a few more ideas for structuring your business logic.\u003c/p\u003e\\n\",publishedAt:\"24th September 2016\",publishedAtISO:\"2016-09-24T00:00:00.000+00:00\",content:'\u003cp\u003eOn structuring Rails apps for growth. Often a tricky area this article will walk you through a refactor and hopefully you\u0026#39;ll walk away with a few more ideas for structuring your business logic.\u003c/p\u003e\\n\u003cp\u003eI read and loved Tom Dalling\u0026#39;s post about \u003ca href=\"https://semaphoreci.com/community/tutorials/isolate-side-effects-in-ruby\"\u003eIsolating Side Effects in Ruby\u003c/a\u003e today and agree with a lot of his sentiments with regards to functional core, imperative shell. I want to expand on the testing of \u003ca href=\"https://en.wikipedia.org/wiki/Business_logic\"\u003ebusiness logic\u003c/a\u003e (also known as domain logic) in Rails with his examples and continue on to explain how we can evolve our applications as we add more features to them. I\u0026#39;ll be referring to the post quite a bit so it is probably best you read that first.\u003c/p\u003e\\n\u003cp\u003eTom discusses moving the business logic into what he calls functionally pure methods within a static/singleton class. His use of the phrase \u0026quot;functionally pure\u0026quot; is quite the liberty as he admits in his own article.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=01.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eRevisiting the \u003ccode\u003eBilling\u003c/code\u003e module we can observe a few things:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003ccode\u003e.billable_accounts\u003c/code\u003e performs an SQL query using an ActiveRecord object\u003c/li\u003e\\n\u003cli\u003e\u003ccode\u003e.monthly_bill\u003c/code\u003e returns an initialised ActiveRecord object\u003c/li\u003e\\n\u003cli\u003e\u003ccode\u003e.discounts\u003c/code\u003e is functionally pure business logic\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003ch2 id=\"testing-business-logic\"\u003eTesting business logic\u003c/h2\u003e\\n\u003cp\u003eThe first two methods aren\u0026#39;t really functionally pure but how does this affect their testability? We can jump straight into testing \u003ccode\u003e.billable_accounts\u003c/code\u003e.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=02.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eUnfortunately this test hit the DB. The fact the method hits the DB will to some mean the method isn\u0026#39;t functionally pure or business logic at all. The method isn\u0026#39;t functionally pure because even though you do not pass any parameters, the values it change can vary depending on what is in the DB. \u003ca href=\"https://en.wikipedia.org/wiki/Pure_function\"\u003ePure functions\u003c/a\u003e should return the same results every time they are called with the same arguments. It\u0026#39;s not business logic either as it deals with implmentation specific details such as it is use of ActiveRecord methods.\u003c/p\u003e\\n\u003cp\u003eFor now, I suppose we could do some mocking to get around this.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=03.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eI\u0026#39;m not opposed to resorting to this if we need to get a method under test quickly. Luckily ruby and RSpec make this kind of thing easy. You certainly would not be able to do this in PHP or Java.\u003c/p\u003e\\n\u003cp\u003eMoving onto \u003ccode\u003e.monthly_bill\u003c/code\u003e we should notice it is a little easier to test.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=04.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eThe tests here are not too bad. \u003ccode\u003e.monthly_bill\u003c/code\u003e is easier to test as it is mostly business logic and doesn\u0026#39;t rely on complex external interfaces. The only external interfaces it relys on is \u003ccode\u003eaccount#plan#amount\u003c/code\u003e, \u003ccode\u003eaccount#type\u003c/code\u003e and \u003ccode\u003eBill.new\u003c/code\u003e.\u003c/p\u003e\\n\u003ch2 id=\"reviewing-the-test-suite\"\u003eReviewing the test suite\u003c/h2\u003e\\n\u003cp\u003eIf we structure our assertions into an actual RSpec suite, our tests describe our billing domain well. This isn\u0026#39;t a bad place to be. The suite entirely avoids hitting the DB so it\u0026#39;ll be fast.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=05.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eOne thing to note is that we are testing \u003ccode\u003e.discounts\u003c/code\u003e in the \u003ccode\u003e.monthly_bill\u003c/code\u003e example as well as in it is own specific test. To me this signals that we are probably exposing functionality that does not need to be exposed. Calculating discounts is only used when we are creating a monthly bill so we can probably hide that functionality and test it indirectly with our \u0026quot;creating monthly bill\u0026quot; context.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=06.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eAfter making \u003ccode\u003e.discounts\u003c/code\u003e private our test suite will begin to fail with \u003ccode\u003eNoMethodError: private method \u0026#39;discount\u0026#39; called for Billing:Module\u003c/code\u003e. This is okay, we can now delete this failing test.\u003c/p\u003e\\n\u003ch2 id=\"growing-the-domain\"\u003eGrowing the domain\u003c/h2\u003e\\n\u003cp\u003eTom goes on to talk about Skinny Models and using objects in Rails to model actions rather than things. The \u003ccode\u003eBilling\u003c/code\u003e module is an object that performs actions rather than modelling a thing.\u003c/p\u003e\\n\u003cp\u003eThe \u003ccode\u003eAccount\u003c/code\u003e and \u003ccode\u003eBill\u003c/code\u003e ActiveRecord objects do model things, but we\u0026#39;ve kept the business logic separate by not placing that logic inside the models.\u003c/p\u003e\\n\u003cp\u003eUnfortunately the way we\u0026#39;ve built \u003ccode\u003eBilling\u003c/code\u003e module means it will only have a short shelf life. Billing is a large domain so the module will likely get bigger and bigger. Not only that but it is responsible for two separate actions: querying billing accounts and creating bills. Once we start adding more billing related actions to this module, for example refunding a bill, the test suite will grow along with the module itself which to me means it is more difficult for Engineers to quickly understand the responsibilities of the module and therefore more difficult to change it.\u003c/p\u003e\\n\u003cp\u003eLuckily the piece of wisdom shared in the post provides the answer.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eEnlightenment comes when you use objects in a server-side web application to model actions, not things.\u003c/p\u003e\\n\u003cp\u003eâ€“ Brad Urani\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eWe need to use objects (read: plural) to model actions. We simply need to split the file down into responsibilities.\u003c/p\u003e\\n\u003cp\u003eWhat would breaking down the billing module into individual actions look like?\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=07.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eWe can then split out the RSpec examples.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=08.rb\"\u003e\u003c/script\u003e\\n\\n\u003ch2 id=\"model-actions-not-things\"\u003eModel actions not things\u003c/h2\u003e\\n\u003cp\u003eWe\u0026#39;ve now got two billing modules for two different topics, \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e. However from the name of these modules it still feels like we\u0026#39;ve moved back to modelling things rather than actions.\u003c/p\u003e\\n\u003cp\u003eIn order to categorise our logic into actions we need to think about triggers the actions. What is consuming our business logic? From Tom\u0026#39;s original example he was tying everything together in a job class.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=09.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eAbove is the updated job to match the changes we\u0026#39;ve made in this article. From the name of the classes I\u0026#39;m still not getting a clear picture what is happening here. Reading the code of the job does tell us, but it is not easy to understand at a glance. What if the job called an action object?\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=10.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eI think this is a lot easier to understand. We\u0026#39;re passing in our \u003ccode\u003ecreate_and_send_monthly_bill\u003c/code\u003e object and calling \u003ccode\u003e#to_all_accounts\u003c/code\u003e on it. From the name of the parameter and the method called we paint a clear picture of what is going on.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=11.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eAs you can see our \u003ccode\u003eMonthlyBillingJob\u003c/code\u003e can now be tested without as many mocks as before.\u003c/p\u003e\\n\u003cp\u003eWe of course now need to create our create and send monthly bill action.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=12.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eEssentially the code from the job class is now in this domain specific action class. The RSpec example will therefore be fairly similar to the old job spec.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=13.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eQuite a jumble as in the original post. I think this in itself is a smell about the way our code works. We have to do a fair bit of mocking in order to test our action because our \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e action calls \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e directly. We are also duplicating our testing efforts again.\u003c/p\u003e\\n\u003cp\u003eOne solution to this problem would be to inject \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e into our action. This will allow us to create doubles in our test and pass those in. This would mean our mocking would be simplified and we will reduce the duplication of our tests.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=14.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eHa, that didn\u0026#39;t go as well as I expected. It\u0026#39;s actually more number of lines than our previous test. I think this is a reflection of the design of our business logic. Business logic should be easy to understand and easy to test. These properties should exist when we reach a good design. I often find gut instinct tells me if the design is good and I think this is informed by how easily my brain can understand the code.\u003c/p\u003e\\n\u003cp\u003eWe\u0026#39;ll need to update our implementation of \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e to satisfy this test.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=15.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eWe\u0026#39;ve called the variable storing the \u003ccode\u003eMonthlyBill\u003c/code\u003e \u003ccode\u003emonthly_bill_initialiser\u003c/code\u003e which does clearly explain what it does, but the method \u003ccode\u003e#to_all_accounts\u003c/code\u003e is now a little harder to understand.\u003c/p\u003e\\n\u003ch2 id=\"composing-actions\"\u003eComposing actions\u003c/h2\u003e\\n\u003cp\u003eWe should probably move the creation and sending of bills into their own actions that are composed together in order to achieve the larger create and send action. The \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e contains the word \u0026quot;and\u0026quot;. This to me signals there are two separate concerns here. We could move the two concerns into their own classes and then use them within the bigger action.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=16.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eLooking at \u003ccode\u003eCreateAndSendMonthlyBill#to_all_accounts\u003c/code\u003e the code now makes more sense when you read it.\u003c/p\u003e\\n\u003cp\u003eOur test can now be split up which will reduce the complexity of them and make them easy to understand too.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=17.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eOur app is a lot easier to understand from the filesystem level too.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=22.txt\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eWe can at a glance of the file names know what our application does.\u003c/p\u003e\\n\u003ch2 id=\"finishing-up\"\u003eFinishing up\u003c/h2\u003e\\n\u003cp\u003eWe are almost there but we still have our \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e modules that represent things rather than actions.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=18.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003e\u003ccode\u003eBilling::Accounts\u003c/code\u003e is an easy win as we just change the class name to begin with a verb, \u0026quot;find\u0026quot;.\u003c/p\u003e\\n\u003cp\u003e\u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e is a little harder to change. It is responsible for initialising a \u003ccode\u003eBill\u003c/code\u003e object with a correct amount. This feels very much related to the creation of the bill to me. It\u0026#39;s almost as if we could move all the logic into \u003ccode\u003eBilling::CreateMonthlyBill\u003c/code\u003e.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=19.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eDoing this violates one of Tom\u0026#39;s rules about not mixing business logic with things that have side effects. However for me, at this point in time no other object needs to initialise a \u003ccode\u003eBill\u003c/code\u003e with the same logic so until that need arises I would in fact keep it all in this class.\u003c/p\u003e\\n\u003cp\u003eYou\u0026#39;ll have probably noticed that we now inject an empty \u003ccode\u003eBill\u003c/code\u003e object. This is to keep things easy to test.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=20.rb\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eThe tests don\u0026#39;t look too bad at all. Our folder structure is looking really informative too.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=21.txt\"\u003e\u003c/script\u003e\\n\\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\\n\u003cp\u003eCode\u0026#39;s testability is very much affected by its design and structure. You might say that your tests inform the design of your code. I prefer to think that the design supports easier testing because it has an easy to understand structure. Code that is easily tested is typically easier to understand.\u003c/p\u003e\\n\u003cp\u003eBusiness logic is easier to understand when expressed as actions. This allows Engineers to understand the function of your domain by simply reading file names. It also means it is easy to find relevant parts of your domain and they remain easy to test.\u003c/p\u003e\\n\u003cp\u003eThe structure presented in this article isn\u0026#39;t new. \u003ca href=\"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003eUncle Bob\u003c/a\u003e and \u003ca href=\"https://www.destroyallsoftware.com/talks/boundaries\"\u003eGary Bernhardt\u003c/a\u003e along with many others have been talking about this before. Some call \u0026quot;actions\u0026quot; by their other name \u0026quot;use case classes\u0026quot;.\u003c/p\u003e\\n\u003cp\u003eHopefully with this design you can avoid fat controllers and fat models. Instead we can have skinny everything when we break down our domain into easy to understand pieces.\u003c/p\u003e\\n\u003cp\u003eThanks for bearing with me, and feel free to \u003ca href=\"https://twitter.com/LukeMorton\"\u003etweet your feedback to me\u003c/a\u003e.\u003c/p\u003e\\n',url:\"/thoughts/2016-09-24-business-logic-in-rails\",slug:\"2016-09-24-business-logic-in-rails\"},{title:'\u003ch1 id=\"-span-class-break-always-do-the-thing-span-that-hurts-the-most\"\u003e\u003cspan class=\"break--always\"\u003eDo the thing\u003c/span\u003e that hurts the most\u003c/h1\u003e\\n',plainTitle:\"Do the thing that hurts the most\",intro:\"\u003cp\u003eA story of fight over flight. Or how doing the things you\u0026#39;re uncomfortable with\\ncan help you in the long run.\u003c/p\u003e\\n\",publishedAt:\"12th January 2016\",publishedAtISO:\"2016-01-12T00:00:00.000+00:00\",content:'\u003cp\u003eA story of fight over flight. Or how doing the things you\u0026#39;re uncomfortable with\\ncan help you in the long run.\u003c/p\u003e\\n\u003cp\u003eLiving life can hurt sometimes. There is a lot of pleasure in the world but pain\\nexists. Not only does it exist but it is important, it is a survival instinct.\\nPain is the thing that triggers your fight or flight. This blog post is about\\nchoosing to fight and the advantages of fighting rather than flying off.\u003c/p\u003e\\n\u003cp\u003eNow let me start by saying this post isn\u0026#39;t about violence. It is about a braver\\nkind of fighting that doesn\u0026#39;t harm anyone. It\u0026#39;s in relation to being a better\\ndeveloper though this practice can stand you in good stead for handling life\\ntoo.\u003c/p\u003e\\n\u003ch2 id=\"feel-the-pain\"\u003eFeel the pain\u003c/h2\u003e\\n\u003cp\u003ePain is an indicator that something is going wrong. Noticing pain is your chance\\nto fix the thing that\u0026#39;s going wrong. Take a team that are suffering from slow\\nand risky deployments.\u003c/p\u003e\\n\u003cp\u003eA team is in charge of deploying a large and rather unmagnificent monolithic\\napplication. It is built in PHP and has a mix of spaghetti western style and\\nsome newer features in Symfony v1.\u003c/p\u003e\\n\u003cp\u003eDeployments of the application are done over FTP with a maintenance mode so that\\ndatabase changes can be made by hand without resulting in user data loss. At\\nleast there is a staging version of the site for dry runs though keeping things\\nconsistent across environments is a continued pain for the team.\u003c/p\u003e\\n\u003cp\u003eEvery member of the team feels the pain. The project manager has a strict\\nrelease management process that involves NASA-style checklists for every deploy\\nand backout plans if anything goes wrong mid process. There is a strict\\nquarterly deploy cycle since contemplating more regular deploys is just too\\nscary.\u003c/p\u003e\\n\u003ch2 id=\"self-perpetuating-problems\"\u003eSelf-perpetuating problems\u003c/h2\u003e\\n\u003cp\u003eThis pain and the fear thereof is indicative of an infection untreated.\\nPlastered over carelessly the situation is only getting worse with time. Sure\\ndeploys are spaced apart but they still go wrong most of the time. Enacting the\\nbackout procedure finishes off what remains of the day.\u003c/p\u003e\\n\u003cp\u003eWhen they finally get all the changes made to production they take the\\nmaintenance mode page down only to find more bugs reported by users. These bugs\\noften find themselves mysteriously fixed outside of the release cycle.\u003c/p\u003e\\n\u003cp\u003eDrifting code on production then requires back porting to staging when\\ndifferences are noticed. No one really knows which environment should be\\ncanonical. The sign up on staging has a remember me feature missing on production\\nand production has email verification that staging does not. The team vaguely\\nremember email verification being too hard to setup for staging as well as\\nproduction. This problem needless to say is self perpetuating. The more it\\ncontinues the harder change becomes.\u003c/p\u003e\\n\u003cp\u003eChange gets harder because of two factors:\u003c/p\u003e\\n\u003col\u003e\\n\u003cli\u003eAs the process is slow and cumbersome so too is change to the application\u003c/li\u003e\\n\u003cli\u003eAs the team gets battered by process the less energy they have fighting it\\nto make changes\u003c/li\u003e\\n\u003c/ol\u003e\\n\u003cp\u003eSo the more the team fears the deploys, the more process they put in place, the\\nslower things get and the worse things become. Fear of pain in this case has\\nresulted in flight mode for the company.\u003c/p\u003e\\n\u003ch2 id=\"deploys-are-painful-so-do-them-more\"\u003eDeploys are painful so do them more\u003c/h2\u003e\\n\u003cp\u003eIn this case, fighting is the solution. The pain indicates the solution. If\\ndeploys are painful, and doing them less is causing problems, go in the other\\ndirection. Deploys are painful so do them more.\u003c/p\u003e\\n\u003cp\u003eOnce the team comes to the agreement that the ever slowing process isn\u0026#39;t helping\\nthey brainstorm to identify problem areas. Large amounts of time spent on UAT to\\ncover 3 months worth of changes. Equally large amounts of time spent on planning\\nAPI integrations which still go wrong when deployed. Differences between staging\\nand production mean deployments still require debugging when going to\\nproduction. Paperwork specifications and deploy plans are usually out of date\\nand inaccurate. Bugs need to be fixed quicker than every 3 months.\u003c/p\u003e\\n\u003cp\u003eThey realise there is too much work around their deploys but struggle to think\\nof anything other than inventing more process and bureaucracy. Then one day a\\ndeveloper coming back from a conference suggests the revolutionary idea of\\ncontinuous delivery. The idea that deploying more often will reduce the pains\\naround deployment.\u003c/p\u003e\\n\u003cp\u003eInitially everyone was scared of making their pain more regular. They worried\\nthat daily deploys would lead to no time for anything other than deployment.\\nHowever a VP had heard the crazy idea circulating, did her own research and\\nenforced a mandate to increase the teams delivery rate.\u003c/p\u003e\\n\u003ch2 id=\"facing-the-fear\"\u003eFacing the fear\u003c/h2\u003e\\n\u003cp\u003eThe team came up with a plan. They would aim to deliver every 10 business\\ndays. They decided any problem they face they would solve rather than use it as\\na reason as to why regular delivery was a bad idea.\u003c/p\u003e\\n\u003cp\u003eThe first struggle was the time it took to deploy. Instead of running from the\\npain they instead looked for ways to reduce the time it took to deploy. Most of\\nthe time taken was lack of parity between environments. To resolve this they\\nsetup a code repository so they had a canonical source for their code. They then\\nsetup an SSH script to use git to clone their code to each environment instead\\nof FTP.\u003c/p\u003e\\n\u003cp\u003eWith repeatable deployments they then had to focus on what they were going to\\ndeliver. They started to plan their work into deployable achievable chunks. They\\nhad to ensure code completion two days before deployment in order to ensure\\nenough time for UAT. This is lightyears faster than their process before!\u003c/p\u003e\\n\u003cp\u003eAlthough not at the eXtreme end of the agile spectrum this team have felt the\\nrewards of pushing against their fears and coming out the other side. They did\\nthe thing that hurt until it hurt no more.\u003c/p\u003e\\n\u003ch2 id=\"pinch-of-salt\"\u003ePinch of salt\u003c/h2\u003e\\n\u003cp\u003eOf course you should not do everything that hurts. That would be silly.\u003c/p\u003e\\n\u003cp\u003eWriting unit tests that sometimes pass and sometimes fail does not mean you\\nshould start writing those kinds of tests more.\u003c/p\u003e\\n\u003cp\u003eYou can also speed up too fast and cause disasters. If the team described above\\ndid not fix their deployment pipeline first or simply cut out UAT to speed up\\ntheir cycle they may have simply deployed code that was not fit for purpose.\u003c/p\u003e\\n\u003cp\u003eYou have to take your advice with a pinch of salt.\u003c/p\u003e\\n\u003ch2 id=\"move-faster-enjoy-yourself\"\u003eMove faster, enjoy yourself\u003c/h2\u003e\\n\u003cp\u003eThat said, a lot of the pain and fear of software delivery is caused by\\nmalpractice sustained by unnecessary process. Management layers, excessive\\nmeetings and planning, bureaucracy generally are all symptoms that we are\\noperating under the condition of fear.\u003c/p\u003e\\n\u003cp\u003eThrough facing up to indicative pain, in looking for actual solutions and\\nremoving process where it bandages wounds that could have been avoided\\naltogether, software teams can move faster and enjoy themselves at the same\\ntime.\u003c/p\u003e\\n\u003cp\u003eLet me know what you think. Share your own experiences. Tweet me\\n\u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\\n',\nurl:\"/thoughts/2016-01-12-do-the-thing-that-hurts-the-most\",slug:\"2016-01-12-do-the-thing-that-hurts-the-most\"},{title:'\u003ch1 id=\"feature-testing-in-2016\"\u003eFeature testing in 2016\u003c/h1\u003e\\n',plainTitle:\"Feature testing in 2016\",intro:\"\u003cp\u003eIn which I outline a strategy for Feature testing with rspec and capybara.\u003c/p\u003e\\n\",publishedAt:\"9th January 2016\",publishedAtISO:\"2016-01-09T00:00:00.000+00:00\",content:'\u003cp\u003eIn which I outline a strategy for Feature testing with rspec and capybara.\u003c/p\u003e\\n\u003cp\u003eAt the end of last year I, along with friend, \u003ca href=\"https://www.madetech.com\"\u003ecolleague\u003c/a\u003e and \u003ca href=\"http://theisland.io\"\u003efellow islander\u003c/a\u003e\\n\u003ca href=\"http://twitter.com/davidwinter\"\u003eDavid\u003c/a\u003e decided upon a set way of writing\\nfeature tests across our rails projects. Based on frustrations with cucumber,\\nregex and too much code sharing between scenarios the following strategy was\\ndevised.\u003c/p\u003e\\n\u003cp\u003eIt builds upon a blog post by Future Learn on\\n\u003ca href=\"https://about.futurelearn.com/blog/how-we-write-readable-feature-tests-with-rspec/\"\u003ewriting readable feature tests in rspec\u003c/a\u003e. Without further ado:\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/6f56ef24dea0516803be.js\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eAlong with this structure there are some rules for keeping things tidy and\\nmaintainable:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eOnly one \u0026quot;given/when/then\u0026quot; per scenario (never start a step with \u0026quot;and\u0026quot;)\u003c/li\u003e\\n\u003cli\u003eNever reuse \u0026quot;given/when/then\u0026quot; steps between scenarios\u003c/li\u003e\\n\u003cli\u003eAlways define steps within the scope of the feature\u003c/li\u003e\\n\u003cli\u003eDefine lets after private declaration for separation\u003c/li\u003e\\n\u003cli\u003eAny shared logic between steps should be placed in private methods defined\\nbelow your let statements\u003c/li\u003e\\n\u003cli\u003eComplicated or multiple assertions in your \u0026quot;then\u0026quot; steps should be placed\\nin well named methods like \u003ccode\u003e#assert_something\u003c/code\u003e\u003c/li\u003e\\n\u003cli\u003eRely on lets rather than instance variables\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003cp\u003eI wrote up more of the whys over on our\\n\u003ca href=\"https://www.madetech.com/blog/feature-testing-with-rspec\"\u003eMade Tech blog\u003c/a\u003e. This\\nwas before some of our more stricter rules were put in place.\u003c/p\u003e\\n\u003cp\u003eWhat do you think? Get in touch via twitter\\n\u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\\n',url:\"/thoughts/2016-01-09-feature-testing-in-2016\",slug:\"2016-01-09-feature-testing-in-2016\"},{title:'\u003ch1 id=\"getting-better-mileage-out-of-active-record\"\u003eGetting better mileage out of Active Record\u003c/h1\u003e\\n',plainTitle:\"Getting better mileage out of Active Record\",intro:\"\u003cp\u003eIn which I provide a few links to help scale the M in MVC,\\nthe ActiveRecord in rails.\u003c/p\u003e\\n\",publishedAt:\"12th September 2015\",publishedAtISO:\"2015-09-12T00:00:00.000+00:00\",content:'\u003cp\u003eIn which I provide a few links to help scale the M in MVC,\\nthe ActiveRecord in rails.\u003c/p\u003e\\n\u003cp\u003eThe basis of this post comes from one tweet I read.\u003c/p\u003e\\n\u003cp\u003e\u003cblockquote class=\"twitter-tweet\" lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eThe greatest trick the ORM ever pulled was convincing the world the DB doesn\u0026#39;t exist... and it\u0026#39;s a disaster for a generation of devs\u003c/p\u003e\u0026mdash; Brad Urani (@bradurani) \u003ca href=\"https://twitter.com/bradurani/status/640330896885727232\"\u003eSeptember 6, 2015\u003c/a\u003e\u003c/blockquote\u003e\u003c/p\u003e\\n\u003cp\u003e\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\\n\u003cbr /\u003e\u003c/p\u003e\\n\u003cp\u003eI saw this tweet by Brad and had a response that I commonly have to positions\\nor declarations in the world of software engineering.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eThat\u0026#39;s a bit extreme.\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eMore and more I have this view. I feel rather mellow. That said, I responded on\\ntwitter almost a troll comment which immediately sinks me into having a view\\nwhich again could be considered extreme.\u003c/p\u003e\\n\u003cp\u003e\u003cblockquote class=\"twitter-tweet\" lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/bradurani\"\u003e@bradurani\u003c/a\u003e \u003ca href=\"https://twitter.com/Baranosky\"\u003e@Baranosky\u003c/a\u003e People are still shipping products though?\u003c/p\u003e\u0026mdash; Luke Morton (@LukeMorton) \u003ca href=\"https://twitter.com/LukeMorton/status/640479014919012352\"\u003eSeptember 6, 2015\u003c/a\u003e\u003c/blockquote\u003e\u003c/p\u003e\\n\u003cp\u003e\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\\n\u003cbr /\u003e\u003c/p\u003e\\n\u003cp\u003eAh, isn\u0026#39;t life full of ironic opportunities. Anyway...\u003c/p\u003e\\n\u003cp\u003ePeople are still shipping products but I think Brad is right in a way. The more\\nwe introduce engineers to the world of web development via rails the more\\nabstracted away from the concepts of the database they are. In the world of\\nsmall business, the one I choose to operate in, roles aren\u0026#39;t well defined.\\nFull stack is about as defined as my role can get since on any given day I can\\nbe building out UI components with Sass/BEM/\u003ca href=\"https://github.com/lukemorton/pieces\"\u003epieces\u003c/a\u003e, designing refund\\nsystems for Spree applications, setting up continuous delivery practices for new\\nclients, writing chef recipes, finding \u003ca href=\"madetech.com/careers\"\u003enew hires\u003c/a\u003e or writing blog\\nposts. I didn\u0026#39;t even mention databases here or the scaling of your models\\nwhich are yet more skills required for generalists.\u003c/p\u003e\\n\u003cp\u003eFor small businesses and for people entering the world of rails (or whatever\\nyour framework) it\u0026#39;s easy to become a generalist and suffer the consequences of\\nbecoming the \u003ca href=\"https://en.wikipedia.org/wiki/Jack_of_all_trades,_master_of_none\"\u003emaster of none\u003c/a\u003e. We need to be mindful as our\\napplications grow how to keep control of our ORMs.\u003c/p\u003e\\n\u003ch2 id=\"resources-for-getting-along-with-your-orm\"\u003eResources for getting along with your ORM\u003c/h2\u003e\\n\u003cp\u003eBrad wrote a follow up post which I recommend you go read now before continuing.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"https://medium.com/@bradurani/turning-the-tables-how-to-get-along-with-your-object-relational-mapper-e5d2d6a76573\"\u003ehttps://medium.com/@bradurani/turning-the-tables-how-to-get-along-with-your-object-relational-mapper-e5d2d6a76573\u003c/a\u003e\u003c/p\u003e\\n\u003cp\u003eThe author writes the common pitfalls of Active Record, statements of denial\\nand provides some resources to how we might fix these problems. I\u0026#39;d like to add\\nto the mix a bunch of resources I find useful for tackling these issues.\u003c/p\u003e\\n\u003ch3 id=\"tackling-god-objects-with-entities-data-objects-and-repositories\"\u003eTackling god objects with entities, data objects and repositories\u003c/h3\u003e\\n\u003cp\u003eGreat article on how to break down models with a trip of patterns.\\nAlthough this author introduces these concepts with the aid of a gem, I think\\nwe can achieve these patterns without any additional dependencies.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://victorsavkin.com/post/41016739721/building-rich-domain-models-in-rails-separating\"\u003ehttp://victorsavkin.com/post/41016739721/building-rich-domain-models-in-rails-separating\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"learn-from-others\"\u003eLearn from others\u003c/h3\u003e\\n\u003cp\u003ePiotr wrote a great piece on the things he\u0026#39;s learnt whilst being a rails\\ndeveloper:\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://solnic.eu/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails.html\"\u003ehttp://solnic.eu/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails.html\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"use-oo-boundaries-more-efficiently\"\u003eUse OO boundaries more efficiently\u003c/h3\u003e\\n\u003cp\u003eAlright, this is a plug to one of my blog posts at Made. It\u0026#39;s on topic though\\nand highlights how we might better use object oriented as well as functional\\nprogramming practices to scale our models further.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"https://www.madetech.com/blog/boundaries-in-object-oriented-design\"\u003ehttps://www.madetech.com/blog/boundaries-in-object-oriented-design\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"use-data-objects\"\u003eUse data objects\u003c/h3\u003e\\n\u003cp\u003eRather than leaning on complex models we can instead lean on hashes or hash\\nlike objects to transfer data around our applications.\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003ca href=\"http://brewhouse.io/2015/07/31/be-nice-to-others-and-your-future-self-use-data-objects.html\"\u003ehttp://brewhouse.io/2015/07/31/be-nice-to-others-and-your-future-self-use-data-objects.html\u003c/a\u003e\u003c/li\u003e\\n\u003cli\u003e\u003ca href=\"http://lukemorton.co.uk/thoughts/2013-09-23-hashes-for-data\"\u003ehttp://lukemorton.co.uk/thoughts/2013-09-23-hashes-for-data\u003c/a\u003e\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003ch3 id=\"moar-patterns\"\u003eMoar patterns\u003c/h3\u003e\\n\u003cp\u003eI hesistated in posting this one since it\u0026#39;s yet another list of design patterns.\\nThen again, this whole blog post is about links to design patterns so it\u0026#39;s\\nincluded for completeness.\u003c/p\u003e\\n\u003cp\u003eI\u0026#39;m going to write in the future on how design patterns are introducing more\\nproblems to our applications through their blind use.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\"\u003ehttp://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"avoid-callbacks\"\u003eAvoid callbacks\u003c/h3\u003e\\n\u003cp\u003eBy using Query and Command objects we can avoid the necessity for callbacks\\nwhich are often a cause for confusing bugs.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://www.mattjohnston.co/blog/2013/07/07/dumb-data-objects/\"\u003ehttp://www.mattjohnston.co/blog/2013/07/07/dumb-data-objects/\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"use-sql-prepared-statements-in-rails-5\"\u003eUse SQL prepared statements in rails 5\u003c/h3\u003e\\n\u003cp\u003eIt\u0026#39;s getting easier to use straight up SQL in rails.\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"https://github.com/rails/rails/pull/21536\"\u003ehttps://github.com/rails/rails/pull/21536\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"avoid-activerecord\"\u003eAvoid ActiveRecord\u003c/h3\u003e\\n\u003cp\u003eUse ROM.rb instead!!\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://rom-rb.org/\"\u003ehttp://rom-rb.org/\u003c/a\u003e\u003c/p\u003e\\n\u003ch3 id=\"avoid-rails\"\u003eAvoid rails\u003c/h3\u003e\\n\u003cp\u003eUse Lotus instead!!\u003c/p\u003e\\n\u003cp\u003e\u003ca href=\"http://lotusrb.org/\"\u003ehttp://lotusrb.org/\u003c/a\u003e\u003c/p\u003e\\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\\n\u003cp\u003eOkay those last two links are more inspirational than aspirational. As engineers\\nwho chose shops that use rails, we won\u0026#39;t be escaping Active Record or rails in\\ngeneral any time soon. Hopefully I\u0026#39;ve provided a few more links that\\ncan help you scale out your models and ORMs further.\u003c/p\u003e\\n\u003cp\u003eI haven\u0026#39;t however provided resources to how you can utilise the power of your\\ndatabase further. Or even learn as a rubyist how to be a DBA. One thing that\\ncame out of my education was database normalisation a concept some developers\\nhaven\u0026#39;t heard of. Let the conversation continue...\u003c/p\u003e\\n',url:\"/thoughts/2015-09-12-better-active-record-mileage\",slug:\"2015-09-12-better-active-record-mileage\"},{title:'\u003ch1 id=\"hiatus-over\"\u003eHiatus Over\u003c/h1\u003e\\n',plainTitle:\"Hiatus Over\",intro:\"\u003cp\u003eWhere I explain what I\u0026#39;ve been up to.\u003c/p\u003e\\n\",publishedAt:\"19th July 2015\",publishedAtISO:\"2015-07-19T00:00:00.000+00:00\",content:'\u003cp\u003eWhere I explain what I\u0026#39;ve been up to.\u003c/p\u003e\\n\u003cp\u003eWhen I moved from the startup world of uncertainty to a little more certain\\nworld of \u003ca href=\"https://madetech.com\"\u003edelivering web apps\u003c/a\u003e, e-commerce and otherwise, my writing\\nslowed. Getting your knowledge down, distilling it into written form is an\\nimportant part of consuming information. So here I am back ready to distill\\nmy current thought processes about the world wide web.\u003c/p\u003e\\n\u003cp\u003eMoving to \u003ca href=\"https://madetech.com\"\u003eMade\u003c/a\u003e, introducing \u003ca href=\"https://www.madetech.com/news/continuous-delivery-with-jenkins\"\u003econtinuous delivery pipelines\u003c/a\u003e,\\nbringing agile rails to \u003ca href=\"https://www.madetech.com/news/made-appointed-to-redevelop-cdp-online-platforms\"\u003eteams\u003c/a\u003e who want to modernise, writing for\\n\u003ca href=\"https://madetech.com/news\"\u003eMade\u0026#39;s blog\u003c/a\u003e and \u003ca href=\"https://www.madetech.com/news/scary-new-code\"\u003ehiring\u003c/a\u003e fledgling developers has been\\na career changer for me. It\u0026#39;s all very exciting stuff!\u003c/p\u003e\\n\u003cp\u003eThe opportunities presented at Made Tech are eye openers and exciting but I\u0026#39;m\\nalso very busy. Being pushed into blogging with the rest of our team has only\\nhighlighted the neglect I\u0026#39;ve been giving my own site. I am pretty opinionated\\nbut I also hope I\u0026#39;m a conduit for interesting conversations, I want to put more\\neffort into my personal blogging.\u003c/p\u003e\\n\u003cp\u003eOver the past year and a half my idealism has been balanced out with a healthy\\nsense of pragmatism. I am a fan of using \u003ca href=\"http://rubyonrails.org/\"\u003ethe\u003c/a\u003e \u003ca href=\"https://www.chef.io/chef/\"\u003etools\u003c/a\u003e\\n\u003ca href=\"https://jenkins-ci.org/\"\u003eavailable\u003c/a\u003e rather than \u003ca href=\"https://github.com/lukemorton/lily\"\u003ereinventing\u003c/a\u003e \u003ca href=\"https://github.com/lukemorton/marionetta\"\u003eseveral\u003c/a\u003e\\nwheels. That said, I always have my idealism as an end goal, it\u0026#39;s just one\\nI\u0026#39;m getting more and more relaxed about not reaching.\u003c/p\u003e\\n\u003cp\u003eFunctional programming is still having a huge impact on the way I see systems\\nand components interacting. I\u0026#39;m an avid fan of map/reduce and using more basic\\nconstructs of arrays and hashes eeks into my rails work. I\u0026#39;m testing like crazy\\nthese days at both the \u003ca href=\"https://www.madetech.com/news/feature-testing-with-rspec\"\u003efeature and unit\u003c/a\u003e level.\u003c/p\u003e\\n\u003cp\u003eAs I work with teams and improve our workflows, my understanding of agile is\\ngrowing. There are no magic bullets to controlling and delivering projects, but\\nthe understanding that it\u0026#39;s always a human issue and that conversation beats\\nany tool and process is now engrained in me.\u003c/p\u003e\\n\u003cp\u003eI hope over the coming weeks and months I will be able to share some of my more\\npersonal journeys through the web.\u003c/p\u003e\\n',url:\"/thoughts/2015-07-19-hiatus-over\",slug:\"2015-07-19-hiatus-over\"},{title:'\u003ch1 id=\"-span-class-break-always-more-methods-span-more-problems\"\u003e\u003cspan class=\"break--always\"\u003eMore methods,\u003c/span\u003e more problems\u003c/h1\u003e\\n',plainTitle:\"More methods, more problems\",intro:\"\u003cp\u003eAn explanation as to why I don\u0026#39;t like more than one \u003cstrong\u003epublic\\nmethod\u003c/strong\u003e per class.\u003c/p\u003e\\n\",publishedAt:\"14th November 2013\",publishedAtISO:\"2013-11-14T00:00:00.000+00:00\",content:'\u003cp\u003eAn explanation as to why I don\u0026#39;t like more than one \u003cstrong\u003epublic\\nmethod\u003c/strong\u003e per class.\u003c/p\u003e\\n\u003cp\u003eI\u0026#39;ve written about this \u003ca href=\"/thoughts/2013-09-22-data-and-behaviour\"\u003ebefore\u003c/a\u003e. If your classes are\\ngoing to have a single responsibility why offer more than\\none way to perform that responsibility?\u003c/p\u003e\\n\u003cp\u003eMultiple methods per class â€“ and by this I mean publically\\nexposed ones â€“ cause problems in a number of ways.\u003c/p\u003e\\n\u003ch2 id=\"multiple-responsibilities\"\u003eMultiple responsibilities\u003c/h2\u003e\\n\u003cp\u003eFirstly methods should do something. If your class has\\nmultiple public methods it will likely be doing multiple\\nthings.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/7466167.js\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eSo here we have a large model \u003ccode\u003eUserModel\u003c/code\u003e. You should already\\nhave your nose up at this unimplemented class. It does too\\nmuch. The methods \u003ccode\u003e#register\u003c/code\u003e, \u003ccode\u003e#login\u003c/code\u003e and \u003ccode\u003e#update_profile\u003c/code\u003e\\nmight have logic in common but they are very different and\\nhave different responsibilities. Having all these methods in\\none class means you will have some shared logic in private\\nmethods but a hell of a lot of specific private methods that\\naren\u0026#39;t used by the other public methods.\u003c/p\u003e\\n\u003cp\u003eUsing the \u003ca href=\"/thoughts/2013-09-25-data\"\u003eData\u003c/a\u003e component of \u003ca href=\"/thoughts/2013-09-27-IDV\"\u003eIDV\u003c/a\u003e you could create\\nthree data actions:\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/7466181.js\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eThey might share some logic but package that logic up in\\nanother class they all share rather than putting all this\\nlogic in one class.\u003c/p\u003e\\n\u003cp\u003eYou could share logic by an abstract class but this isn\u0026#39;t wise\\nin the long run. Inheritence should be avoided as much as\\nmultiple public methods. Multiple responsibilities and\\nextension of abstract (or even worse concrete) classes are\\nexamples of coupling and aren\u0026#39;t as flexible as dependency\\ninjection.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eInject shared logic at runtime rather than couple your code\\nall the time\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003ch2 id=\"an-exception\"\u003eAn Exception\u003c/h2\u003e\\n\u003cp\u003eLet\u0026#39;s move onto an exception. Sometimes your methods might be completely related to one another. The only two examples of\\nvalid multi-method classes I can think of are\\n\u003ca href=\"/thoughts/2013-09-26-interaction\"\u003eInteraction Controllers\u003c/a\u003e and \u003ca href=\"/thoughts/2013-09-25-data\"\u003eData Mappers\u003c/a\u003e.\u003c/p\u003e\\n\u003cp\u003eLet\u0026#39;s take a user data mapper for example.\u003c/p\u003e\\n\u003cscript src=\"https://gist.github.com/lukemorton/7466187.js\"\u003e\u003c/script\u003e\\n\\n\u003cp\u003eSo why do I think this is okay? Well firstly a mongo specific\\ndata mapper for a user is a pretty specific responsibility.\\nThe class does not have one single responsibility though. It\\nhas the responsibility of finding one document by ID and many\\ndocuments by an array of IDs. Two responsibilities but I still\\nthink this is okay and let me explain why.\u003c/p\u003e\\n\u003cp\u003eThe methods \u003ccode\u003e#find_one_by_id\u003c/code\u003e and \u003ccode\u003e#find_by_ids\u003c/code\u003e are\\nstandalone but will share the collection instance injected so\\nthis is one bit of logic that would need to be repeated or\\ninherited if we split this class into two.\u003c/p\u003e\\n\u003cp\u003eBoth methods share the state initialised on construction, the collection, however they are still fairly independent and\\natomic. I see these methods as single responsibilties packaged\\nunder a single namespace \u003ccode\u003eUserMongoDataMapper\u003c/code\u003e. As long as the methods remain SRP and share the majority of logic within the\\ndata mapper then they can remain in one class.\u003c/p\u003e\\n\u003cp\u003eSo we\u0026#39;ve now identified an exception â€“ that is â€“ when methods\\nare independent, atomic and share most private logic in the\\nclass then it might be okay to keep them in one object.\u003c/p\u003e\\n\u003ch2 id=\"atomic\"\u003eAtomic\u003c/h2\u003e\\n\u003cp\u003eAtomicity is important. I might have just made that word up\\nso I\u0026#39;ll define it. When calling the method it should be\\ntotally independent and rely on no shared state with other\\npublic methods. If by calling \u003ccode\u003e#find_one_by_id\u003c/code\u003e affected a\\nlater call to \u003ccode\u003e#find_by_ids\u003c/code\u003e then these methods would not be\\natomic. They are coupled and definitely not single\\nresponsibility. Furthermore leaking these implementation side\\neffects into your application means you are introducing hidden\\ncoupling into your application. Little secrets such as the\\nside effects of calling methods of an instance in different\\norders lead to many subtle bugs. Just don\u0026#39;t do it!\u003c/p\u003e\\n\u003ch2 id=\"the-obvious\"\u003eThe obvious\u003c/h2\u003e\\n\u003cp\u003eMultiple public methods make a class more difficult to reason\\nabout. The developer using it will need to know when to use\\nwhat methods, the interfaces for each method and so will your\\ncode. The more methods in your program the more coupled to implementation your application will become. This should be\\nobvious:\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eThe more code you write the more problems you are going to\\nhave so don\u0026#39;t write as much\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\\n\u003cp\u003eI\u0026#39;m going to quickly summarise the points I\u0026#39;ve made so you can\\nargue in favour of the statement \u0026quot;more methods, more\\nproblems\u0026quot;.\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eMethods have a single responsibility, having multiple\\nmethods per class means the class does not have a single\\nresponsibility\u003c/li\u003e\\n\u003cli\u003eMethods may share logic with related methods but they will\\nalso have independent logic â€“ coupling related methods is\\na messy way to share logic between components â€“\\ntry injecting logic instead\u003c/li\u003e\\n\u003cli\u003eMethods should be atomic operations, if they aren\u0026#39;t then\\nyou\u0026#39;ll be introducing hidden coupling (think method call\\norder) and subtle bugs into your application\u003c/li\u003e\\n\u003cli\u003eThe more methods you write, the more code your application\\nwill have, the more the code, the more the bugs\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003cp\u003eThe OOP lot like to hide complexity in pretty looking\\nchainable fluid interfaces. That\u0026#39;s an ironically complex\\nsolution for a problem aimed at reducing complexity.\u003c/p\u003e\\n\u003cp\u003eI know what the magicians are saying, \u0026quot;a class with a few\\nsetters and getters is hardly complex.\u0026quot;\u003c/p\u003e\\n\u003cp\u003eMaybe not but I\u0026#39;m not buying your evil magic friend. You and\\nyour tempting class of tricks can stay away from my\\napplication party.\u003c/p\u003e\\n',url:\"/thoughts/2013-11-14-more-methods-more-problems\",slug:\"2013-11-14-more-methods-more-problems\"},{title:'\u003ch1 id=\"sans-framework-generation\"\u003eSans framework generation\u003c/h1\u003e\\n',plainTitle:\"Sans framework generation\",intro:\"\u003cp\u003eThat\u0026#39;s right. It\u0026#39;s time to leave your \u003cstrong\u003eframeworks\u003c/strong\u003e behind\\nyou.\u003c/p\u003e\\n\",publishedAt:\"28th September 2013\",publishedAtISO:\"2013-09-28T00:00:00.000+00:00\",content:'\u003cp\u003eThat\u0026#39;s right. It\u0026#39;s time to leave your \u003cstrong\u003eframeworks\u003c/strong\u003e behind\\nyou.\u003c/p\u003e\\n\u003cp\u003eThis isn\u0026#39;t advice. Okay it is. But you seriously need to think\\nabout what I\u0026#39;m about to say. Read and reread the following\\nstatement.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eFrameworks aren\u0026#39;t bad, but being locked into them is\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eWhat do I mean by this? I mean bad things come from projects\\nthat get locked to a framework. By locked I mean coupled. Slow\\nrails tests anyone? Difficulty deconstructing applications\\ninto smaller services due to reliance on a particular way of\\ndoing something? Decided omakase isn\u0026#39;t for you?\u003c/p\u003e\\n\u003cp\u003eWhatever the problem it comes down to locking yourself in.\\nVendor lock in is shitty. When your entire business gives\\nitself to one vendor it\u0026#39;s a risk.\u003c/p\u003e\\n\u003cp\u003eThere\u0026#39;s a better way. Write your business logic before\\nchoosing a framework. Work out your wireframes, build HTML\\nprototypes, do some TDD for your user stories. The key is to\\ndefer the framework decision. Hell, \u003ca href=\"http://www.youtube.com/watch?v=WpkDN78P884#t=49m48s\"\u003edefer\u003c/a\u003e \u003ca href=\"http://www.allaboutagile.com/lean-principles-4-defer-commitment/\"\u003eall\u003c/a\u003e your\\n\u003ca href=\"http://www.codinghorror.com/blog/2006/10/the-last-responsible-moment.html\"\u003ebase\u003c/a\u003e.\u003c/p\u003e\\n\u003cp\u003eI\u0026#39;m serious here. Why write your framework code first? How\\ndoes it make any sense to do something the rails way? You\\nshould do it your applications way. That doesn\u0026#39;t mean your\\napplication logic won\u0026#39;t fit into the rails paradigm. Just\\nwrite your application logic so it doesn\u0026#39;t care for what\\ninterface it uses to deliver content to the user. Rails does\\nthis particularly poorly since you end up using a lot of logic\\nprovided by it\u0026#39;s framework. To get the benefits of rails you\\ndo really have to go the rails way, but then you\u0026#39;re fucked.\u003c/p\u003e\\n\u003cp\u003eYou decide where you stand but I\u0026#39;m of the sans framework\\ngeneration.\u003c/p\u003e\\n\u003cp\u003eComments to \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e please.\u003c/p\u003e\\n',url:\"/thoughts/2013-09-28-sans-framework-generation\",slug:\"2013-09-28-sans-framework-generation\"},{title:'\u003ch1 id=\"idv\"\u003eIDV\u003c/h1\u003e\\n',plainTitle:\"IDV\",intro:\"\u003cp\u003eIntroducing the \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e\\ndesign pattern.\u003c/p\u003e\\n\",publishedAt:\"27th September 2013\",publishedAtISO:\"2013-09-27T00:00:00.000+00:00\",content:'\u003cp\u003eIntroducing the \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e\\ndesign pattern.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eIDV = I + D + V\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eEvery project I\u0026#39;ve been employed to work on so far I\u0026#39;ve taken\\non the responsibility for reorganising brownfield and\\ndesigning the architecture for greenfield applications. The\\nIDV pattern comes from my frustration of change. Not that I\\ndon\u0026#39;t like change â€“ I love what change brings. No, it\u0026#39;s the\\nfact \u003cem\u003echange is hard\u003c/em\u003e.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eChange should be cheap\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eI really believe this. Change happens and is required in\\nbusiness. Applications represent businesses. Applications need\\nto be changed for business reasons. If change is inevitable,\\nshouldn\u0026#39;t we prepare for it? What would being prepared for\\nchange look like? Or, to put it another way. What does not\\nbeing prepared for change look like?\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eThings are tightly coupled\u003c/li\u003e\\n\u003cli\u003eLocked to vendors (concrete implementations everywhere)\u003c/li\u003e\\n\u003cli\u003eLeaky encapsulation\u003c/li\u003e\\n\u003cli\u003eConfusing or undocumented interfaces\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003cp\u003eFace it, it looks a mess and we\u0026#39;ve all been there.\u003c/p\u003e\\n\u003cp\u003eLike I said, IDV came from a frustration of change caused by\\nthe problems listed above. So I have potential solutions. In\\nfact I\u0026#39;d call them working solutions because I\u0026#39;ve developed\\nand utilised them over time.\u003c/p\u003e\\n\u003cp\u003eThe main premise is the separation of concerns by introducing\\nclear boundaries to your business and application logic. By\\nusing a small set of interfaces we can avoid a lot of these\\nproblems of change.\u003c/p\u003e\\n\u003cp\u003eI say small set, it\u0026#39;s purposefully a small set. The idea is\\nthat the interfaces you introduce \u003cem\u003ewill not change\u003c/em\u003e. So we\\ndefine broad and generic method interfaces so these unchanging\\nparts never cause a problem.\u003c/p\u003e\\n\u003ch2 id=\"unchanging-interfaces\"\u003eUnchanging interfaces\u003c/h2\u003e\\n\u003cp\u003eWhat does an unchanging interface look like?\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cp\u003eAn unchanging interface will be method based rather than\\nclass based so that we can switch implementations at\\nanytime.\u003c/p\u003e\\n\u003c/li\u003e\\n\u003cli\u003e\u003cp\u003eMethod names will be generic enough not to hint any\\nimplementation details.\u003c/p\u003e\\n\u003c/li\u003e\\n\u003cli\u003e\u003cp\u003eThe only parameter will be a hash. This allows any and all\\nkinds of information to be passed in. (At least in\\ndynamically typed languages.)\u003c/p\u003e\\n\u003c/li\u003e\\n\u003cli\u003e\u003cp\u003eThe only returned value will also be a hash. This means\\nanyone can consume the data returned. Hashes and scalar\\nvalues should be the only values returned within the main\\nhash.\u003c/p\u003e\\n\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003cp\u003eA flexible unchanging interface means that communication\\nbetween areas of your application can happen in a limited way.\\nThis means change to logic inside the interfaces are fully\\nencapsulated and are less likely to cause problems in other\\nareas of the application.\u003c/p\u003e\\n\u003cp\u003eWe do however need to decide where to draw these interface\\nlines.\u003c/p\u003e\\n\u003ch2 id=\"separation-of-concerns\"\u003eSeparation of concerns\u003c/h2\u003e\\n\u003cp\u003eIn order to decide where to implement these unchanging\\ninterfaces we need to understand the separation of concerns.\\nWe need to work out where to separate. The answer is in the\\nname. We need to separate out the parts that aren\u0026#39;t concerned\\nwith how the other parts do things.\u003c/p\u003e\\n\u003cp\u003eHow do most web frameworks split out application logic? MVC!\\nMVC tells us that Model, View and Controller logic are\\nseparate concerns.\u003c/p\u003e\\n\u003cp\u003eMVC fails with the unchanging interface criteria.\\nModels in web application world often have many methods and\\nare used in views and controllers. Controllers can have many\\nactions and views have many methods and often mix logic with\\ntemplates or logic in controllers. This makes for disaster\\nbecause the interface of a class is the public methods it\\nexposes. The more methods exposed the more weakness your\\napplication will have to the changes made in these methods.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eMVC is a bastardised separation of concerns\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eSo what areas is MVC trying to tackle? Uncle Bob \u003ca href=\"http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003etells us\u003c/a\u003e\\nthat the business logic should be wrapped in interface logic.\\nSo we have business logic, M. Snug in between the interface\\nand business logic is a view layer for presenting the business\\ndata and logic, that\u0026#39;s V. C is the controller layer which\\nis basically the communication of the areas of the application\\nto the interface by which the application is delivered.\u003c/p\u003e\\n\u003cp\u003eI\u0026#39;d like to define these better. And not in some weird circle\\ndiagram. I\u0026#39;d still split it into three layers like MVC:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eThe protocol for delivering the application\u003c/li\u003e\\n\u003cli\u003eThe data layer for applying business logic to data\u003c/li\u003e\\n\u003cli\u003eThe view layer for presentation\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003cp\u003eOr in other words IDV: \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e.\u003c/p\u003e\\n\u003cp\u003eThis isn\u0026#39;t clearly defined enough yet though. Each one of\\nthese concerns have several concerns themselves. We\u0026#39;ll discuss\\neach section and their concerns briefly.\u003c/p\u003e\\n\u003ch3 id=\"interaction\"\u003eInteraction\u003c/h3\u003e\\n\u003cp\u003eInteraction is the application itself. It is the delivery\\nmechanism for the applications content. It is also the\\nlayer that communicates with the domain in order to produce\\nthe applications content. That\u0026#39;s two concerns right there.\u003c/p\u003e\\n\u003col\u003e\\n\u003cli\u003eInteraction with user over protocol communication\u003c/li\u003e\\n\u003cli\u003eInteraction with the business (domain) layer\u003c/li\u003e\\n\u003c/ol\u003e\\n\u003cp\u003eOr in two simple terms \u003cstrong\u003eApplication\u003c/strong\u003e and \u003cstrong\u003eController\u003c/strong\u003e.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eI = A + C\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eTypicalling routing and protocol handling will be done in the\\napplication layer. This layer will then communicate with one\\nor more controllers. The controllers will then interact with\\nthe data and view layers and produce a response which is then\\nreturned back to the application for delivery to the user.\u003c/p\u003e\\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-26-interaction\"\u003einteraction layer\u003c/a\u003e if you\\nwish to find out more.\u003c/p\u003e\\n\u003ch3 id=\"data\"\u003eData\u003c/h3\u003e\\n\u003cp\u003eData is the core business logic. It deals with asking business\\nquestions of data. It also handles the inserting, updating and\\ndeletion of business data. Along with this business logic it\\nalso handles the communication with the data sources of the\\napplication. Three concerns.\u003c/p\u003e\\n\u003col\u003e\\n\u003cli\u003eInteraction with data sources\u003c/li\u003e\\n\u003cli\u003eModelling of data for answering business questions\u003c/li\u003e\\n\u003cli\u003ePerforming business actions on data\u003c/li\u003e\\n\u003c/ol\u003e\\n\u003cp\u003eOr more simply \u003cstrong\u003eMapper\u003c/strong\u003e, \u003cstrong\u003eModel\u003c/strong\u003e and \u003cstrong\u003eAction\u003c/strong\u003e.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eD = Ma + Mo + A\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eModels and actions will be called by a controller. The\\ncontroller will pass in mappers and other request information\\nto the models and actions and pass their responses into the\\nview layer or immediately return control to the application\\nlayer.\u003c/p\u003e\\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-25-data\"\u003edata layer\u003c/a\u003e if you wish to\\nfind out more.\u003c/p\u003e\\n\u003ch3 id=\"view\"\u003eView\u003c/h3\u003e\\n\u003cp\u003eView is the translation of business data into a presentation\\nfor the user. It handles the structure of data for\\npresentation. It also handles the modelling of data for\\npresentation. Along with these responsibilities it also needs\\nto merge the modelled data into the structure. Three concerns\\njust like data.\u003c/p\u003e\\n\u003col\u003e\\n\u003cli\u003eStructuring data for presentation\u003c/li\u003e\\n\u003cli\u003eModelling data for presentation\u003c/li\u003e\\n\u003cli\u003eMerging the structure and modelled data for presentation\u003c/li\u003e\\n\u003c/ol\u003e\\n\u003cp\u003eOr more simply \u003cstrong\u003eTemplate\u003c/strong\u003e, \u003cstrong\u003eModel\u003c/strong\u003e and\\n\u003cstrong\u003eTemplate Engine\u003c/strong\u003e.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eV = T + M + TE\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eThe controller will first pass data from the view layer and\\nrequest into the view model. It will then use the template\\nengine to merge this view model with a template. This data\\nwill then be formed into a response and passed back to the\\napplication layer.\u003c/p\u003e\\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-24-views\"\u003eview layer\u003c/a\u003e if you wish to\\nfind out more.\u003c/p\u003e\\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\\n\u003cp\u003eUsing unchanging interfaces between each one of the sub\\nconcerns defined above will allow you to substitute each\\nconcern as per the \u003ca href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\"\u003eLiskov substitution principle\u003c/a\u003e. Being\\nable to switch out each component separately means they can\\nbe tested independently, parts can be replaced without\\naffecting other sections of the application and you only have\\nto introduce 8 types of interfaces to your entire application.\u003c/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eIDV = (A + C) (Ma + Mo + A) (T + M + TE)\u003c/p\u003e\\n\u003c/blockquote\u003e\\n\u003cp\u003eThis article was more theory than code examples so I apologise\\nfor that. You\u0026#39;ll find in the links throughout code examples of\\neach layer of IDV. If I tried to fit them all into this one\\narticle there would have been trouble.\u003c/p\u003e\\n\u003cp\u003eLet me know what you think \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\\n',url:\"/thoughts/2013-09-27-IDV\",slug:\"2013-09-27-IDV\"}]},333:function(e,t,o){\"use strict\";function n(e){return e\u0026\u0026e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(4),a=n(i),s=function(e,t){\nvar o=e.name,n=e.description,i=e.url;e.after;return a.default.createElement(\"li\",{className:\"post\",key:t},a.default.createElement(\"h3\",null,a.default.createElement(\"a\",{href:i},o)),a.default.createElement(\"div\",{className:\"content\"},a.default.createElement(\"p\",null,n)))};t.default=function(e){var t=e.title,o=e.projects,n=e.after;e.githubUrl;return a.default.createElement(\"div\",{className:\"projects\"},t,a.default.createElement(\"ul\",null,o.map(s)),\"---\",n)}},412:function(e,t,o){e.exports=o(215)}},[412]);","errorComponent":"module.exports=webpackJsonp([7],{213:function(e,t,r){\"use strict\";function u(e){return e\u0026\u0026e.__esModule?e:{default:e}}function n(e,t){var r=e?e.statusCode:t?t.status:null;return 404===r?\"Page not found\":\"An error occured\"}Object.defineProperty(t,\"__esModule\",{value:!0});var l=r(11),a=u(l),o=r(7),f=u(o),d=r(8),i=u(d),s=r(13),c=u(s),p=r(12),h=u(p),m=r(4),_=u(m),v=r(23),x=u(v),y=r(57),E=u(y),k=function(e){function t(){return(0,f.default)(this,t),(0,c.default)(this,(t.__proto__||(0,a.default)(t)).apply(this,arguments))}return(0,h.default)(t,e),(0,i.default)(t,[{key:\"render\",value:function(){return _.default.createElement(E.default,{title:this.props.error},_.default.createElement(\"main\",null,_.default.createElement(\"h1\",null,this.props.error),_.default.createElement(\"p\",null,\"Sorry, \",_.default.createElement(x.default,{href:this.props.indexUrl},\"back to home\"),\"?\")))}}],[{key:\"getInitialProps\",value:function(e){var t=e.res,r=e.xhr;return{error:n(t,r),indexUrl:\"/\"}}}]),t}(_.default.Component);t.default=k},410:function(e,t,r){e.exports=r(213)}},[410]);","props":{"indexUrl":"/","aboutUrl":"/about","archiveUrl":"/thoughts/archive","twitterUrl":"https://twitter.com/lukemorton","avatarSrc":"https://s.gravatar.com/avatar/e7f62d126dec76b03e6d2393e44247ad?s=180","twitterHandle":"@LukeMorton","thoughts":[{"title":"\u003ch1 id=\"lightweight-docker-images-for-go\"\u003eLightweight docker images for Go\u003c/h1\u003e\n","plainTitle":"Lightweight docker images for Go","intro":"\u003cp\u003eOn building lightweight Docker images for Go applications.\u003c/p\u003e\n","publishedAt":"17th January 2017","publishedAtISO":"2017-01-17T00:00:00.000+00:00","content":"\u003cp\u003eOn building lightweight Docker images for Go applications.\u003c/p\u003e\n\u003cp\u003eIn my last article I wrote about \u003ca href=\"/thoughts/2017-01-15-deploying-go-on-zeit-now\"\u003edeploying Go apps to Now\u003c/a\u003e. I arrived at a solution that compiled a Go app inside a Docker container. This means that the Docker container needed to be built with all the dependencies necessary to compile Go code into something useful.\u003c/p\u003e\n\u003ch2 id=\"measuring-the-size-of-a-docker-image\"\u003eMeasuring the size of a Docker image\u003c/h2\u003e\n\u003cp\u003eWe can find out the size of an image by building it with a tag. Using the article\u0026#39;s example hello-world app we can run \u003ccode\u003edocker build\u003c/code\u003e in it\u0026#39;s directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world .\n\nSending build context to Docker daemon 5.701 MB\nStep 1 : FROM golang:alpine\n ---\u0026gt; 00371bbb49d5\nStep 2 : ADD . /go/src/github.com/lukemorton/hello-world\n ---\u0026gt; Using cache\n ---\u0026gt; dda524fc2668\nStep 3 : RUN go install github.com/lukemorton/hello-world\n ---\u0026gt; Using cache\n ---\u0026gt; f830049507ec\nStep 4 : CMD /go/bin/hello-world\n ---\u0026gt; Using cache\n ---\u0026gt; ba41def5c5d6\nStep 5 : EXPOSE 3000\n ---\u0026gt; Using cache\n ---\u0026gt; 9bd3101ccc6b\nSuccessfully built 9bd3101ccc6b\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce the image has been built and tagged we can then check the size with the \u003ccode\u003edocker images\u003c/code\u003e command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ docker images hello-world --format {{.Size}}\n\n251.9 MB\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI filtered the results of docker images by passing the tag I gave the image when I built it, \u003ccode\u003ehello-world\u003c/code\u003e. I also provided the \u003ccode\u003e--format\u003c/code\u003e flag to only output the size. Try running \u003ccode\u003edocker images\u003c/code\u003e without any arguments to see a more detailed list of your images.\u003c/p\u003e\n\u003ch2 id=\"size-of-a-go-binary\"\u003eSize of a Go binary\u003c/h2\u003e\n\u003cp\u003eOkay so how much larger is this image than the Go binary that it compiles? In other words, how much cruft does the Docker image add? From the directory of our hello world example we can find out.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go build -o hello-world .\n$ du -kh hello-world\n\n5.4M    hello-world\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWoah, 5.4MB of the 251.9MB image is taken up by our application. Thats about 2% of the image size. The rest of the space is taken up by the operating system and dependencies required to build the binary.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s worth saying that the base image I used was \u003ccode\u003egolang:alpine\u003c/code\u003e which is the smallest possible image on which you can build Go code. If you change \u003ccode\u003eFROM golang:alpine\u003c/code\u003e in the \u003ccode\u003eDockerfile\u003c/code\u003e to \u003ccode\u003eFROM golang\u003c/code\u003e, compile the Docker image and check the size, you\u0026#39;ll see it\u0026#39;s much bigger.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world:large .\n$ docker images hello-world:large --format {{.Size}}\n\n691 MB\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0026#39;s like over 2.7 times the size of our alpine based image.\u003c/p\u003e\n\u003ch2 id=\"going-microcontainer\"\u003eGoing microcontainer\u003c/h2\u003e\n\u003cp\u003eWhat if I told you we could get the image size down the size of our binary? You\u0026#39;d believe me right :)\u003c/p\u003e\n\u003cp\u003eIn order to get the image size down further we need to make a decision to compile our Go application outside of the Docker container. We then switch our base image from \u003ccode\u003egolang:alpine\u003c/code\u003e to \u003ccode\u003escratch\u003c/code\u003e, the lightest image of them all, it\u0026#39;s empty! It\u0026#39;s name is actually a pun, \u003ccode\u003eFROM scratch\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m getting excited, let\u0026#39;s update our Dockerfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFROM scratch\nADD hello-world /\nCMD [\u0026quot;/hello-world\u0026quot;]\nEXPOSE 3000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow before we run \u003ccode\u003edocker build\u003c/code\u003e we need to compile our Go binary before hand. If you notice the \u003ccode\u003eADD hello-world /\u003c/code\u003e that\u0026#39;s copying the binary into the image. We need to build it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o hello-world .\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnlike my original article, we provide a number of flags to the \u003ccode\u003ego build\u003c/code\u003e command. This is making our Go binary portable enough to run inside our empty image. Without these flags we get errors about missing shared libraries, it gets real ugly real quick, trust me.\u003c/p\u003e\n\u003cp\u003eNow let\u0026#39;s build:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ docker build -t hello-world:light .\n$ docker images hello-world:light --format {{.Size}}\n\n5.635 MB\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe did it! Small huh? Let me know what you think on Twitter \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"footnotes\"\u003eFootnotes\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCredit goes to \u003ca href=\"https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/\"\u003eNick Gauthier\u0026#39;s article\u003c/a\u003e for codeship on showing me how to build Go microcontainers.\u003c/li\u003e\n\u003cli\u003eIf you\u0026#39;re using Now.sh to deploy your application you\u0026#39;ll need to be paying for the service as the binary file will always be larger than the 1MB file upload limit in place for free users of their service. If you want to keep on the free tier, you\u0026#39;ll have to put up with the image size of using \u003ccode\u003eFROM golang:alpine\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","url":"/thoughts/2017-01-17-lightweight-docker-images-for-go","slug":"2017-01-17-lightweight-docker-images-for-go"},{"title":"\u003ch1 id=\"deploying-a-go-app-on-now\"\u003eDeploying a Go app on Now\u003c/h1\u003e\n","plainTitle":"Deploying a Go app on Now","intro":"\u003cp\u003eA walkthrough on how to use Docker to deploy a Go app on Zeit\u0026#39;s Now realtime global deployment platform.\u003c/p\u003e\n","publishedAt":"15th January 2017","publishedAtISO":"2017-01-15T00:00:00.000+00:00","content":"\u003cp\u003eA walkthrough on how to use Docker to deploy a Go app on Zeit\u0026#39;s Now realtime global deployment platform.\u003c/p\u003e\n\u003cp\u003eI recently moved www.lukemorton.co.uk to being hosted on \u003ca href=\"https://now.sh\"\u003eNow\u003c/a\u003e. It\u0026#39;s a node.js app built with Next.js and I\u0026#39;m telling ya, it was a great experience as Now is super easy to get going on.\u003c/p\u003e\n\u003cp\u003eAfter moving this site across I felt excited to try Now for something else. I\u0026#39;ve always wanted to write an API in Go and Now can serve pretty much any tech stack as it supports Docker. So I gave it a shot and this hello world blog post documents my learnings.\u003c/p\u003e\n\u003ch2 id=\"setting-up-your-development-environment\"\u003eSetting up your development environment\u003c/h2\u003e\n\u003cp\u003eIn case you haven\u0026#39;t built a Go app before, I\u0026#39;ll quickly go over how to set it up on your machine.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall \u003ca href=\"https://golang.org/doc/install#install\"\u003eGo\u003c/a\u003e for your platform\u003c/li\u003e\n\u003cli\u003eThen create your Go workspace, it\u0026#39;s an odd concept but essentially vendored libraries and your own projects will be installed in this workspace, run \u003ccode\u003emkdir ~/GoWork\u003c/code\u003e and then \u003ccode\u003eexport $GOPATH=~/GoWork\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eInstall the \u003ca href=\"https://github.com/zeit/now-cli/\"\u003enow-cli\u003c/a\u003e with \u003ccode\u003enpm install -g now-cli\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"creating-a-hello-world\"\u003eCreating a hello world\u003c/h2\u003e\n\u003cp\u003eNow let\u0026#39;s create a quick HTTP hello world example in Go. First we need a directory within your Go workspace to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir -p $GOPATH/src/github.com/lukemorton/hello-world\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can replace \u003ccode\u003elukemorton\u003c/code\u003e with your own GitHub username.\u003c/p\u003e\n\u003cp\u003eNow we need some code, below is my quick Go hello world. It\u0026#39;s a very simple hello world web app that runs on port 3000. There\u0026#39;s some logging in the to let you know when it starts and if something goes wrong.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-go\"\u003epackage main\n\nimport (\n    \u0026quot;fmt\u0026quot;\n    \u0026quot;log\u0026quot;\n    \u0026quot;net/http\u0026quot;\n)\n\nfunc main() {\n    http.HandleFunc(\u0026quot;/\u0026quot;, func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintln(w, \u0026quot;Hello world\u0026quot;)\n    })\n\n    log.Println(\u0026quot;Serving on localhost:3000\u0026quot;)\n    err := http.ListenAndServe(\u0026quot;:3000\u0026quot;, nil)\n    log.Fatal(err)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave this file in your new directory as \u003ccode\u003ehello.go\u003c/code\u003e. Now we can run it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego run hello.go\n# =\u0026gt; 2017/01/15 15:36:26 Serving on localhost:3000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVisit your hello world in your browser \u003ca href=\"http://localhost:3000\"\u003ehttp://localhost:3000\u003c/a\u003e. You should see \u0026quot;Hello world\u0026quot; printed.\u003c/p\u003e\n\u003ch2 id=\"deploying-with-docker\"\u003eDeploying with Docker\u003c/h2\u003e\n\u003cp\u003eCoooooool, so we\u0026#39;ve got our Go web app and now we want to deploy it. To do this we are going to create a Docker image that compiles and runs our Go app for us. Once we have this we can deploy it to Now.\u003c/p\u003e\n\u003cp\u003eWe then create our \u003ccode\u003eDockerfile\u003c/code\u003e which uses golangs official alpine image. Alpine is a lightweight operating system ideal of creating small(er) docker images.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFROM golang:alpine\nADD . /go/src/github.com/lukemorton/hello-world\nRUN go install github.com/lukemorton/hello-world\nCMD [\u0026quot;/go/bin/hello-world\u0026quot;]\nEXPOSE 3000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNot much to it is there. Make sure you save this as \u003ccode\u003eDockerfile\u003c/code\u003e in the same directory as your \u003ccode\u003ehello.go\u003c/code\u003e file. All it does is copy \u003ccode\u003ehello.go\u003c/code\u003e into the container, compiles it into a binary, runs that binary and exposes the port 3000. Again you can replace \u003ccode\u003elukemorton\u003c/code\u003e with your own GitHub username.\u003c/p\u003e\n\u003cp\u003eNow we are ready to deploy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enow\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd thats it. It\u0026#39;ll upload your files, build a Docker container and run it for you. In case you wanted to look over all the files, I\u0026#39;ve placed them on \u003ca href=\"https://github.com/lukemorton/hello-world\"\u003emy GitHub\u003c/a\u003e. Let me know what you think on Twitter \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\n","url":"/thoughts/2017-01-15-deploying-go-on-zeit-now","slug":"2017-01-15-deploying-go-on-zeit-now"},{"title":"\u003ch1 id=\"business-logic-in-rails\"\u003eBusiness logic in Rails\u003c/h1\u003e\n","plainTitle":"Business logic in Rails","intro":"\u003cp\u003eOn structuring Rails apps for growth. Often a tricky area this article will walk you through a refactor and hopefully you\u0026#39;ll walk away with a few more ideas for structuring your business logic.\u003c/p\u003e\n","publishedAt":"24th September 2016","publishedAtISO":"2016-09-24T00:00:00.000+00:00","content":"\u003cp\u003eOn structuring Rails apps for growth. Often a tricky area this article will walk you through a refactor and hopefully you\u0026#39;ll walk away with a few more ideas for structuring your business logic.\u003c/p\u003e\n\u003cp\u003eI read and loved Tom Dalling\u0026#39;s post about \u003ca href=\"https://semaphoreci.com/community/tutorials/isolate-side-effects-in-ruby\"\u003eIsolating Side Effects in Ruby\u003c/a\u003e today and agree with a lot of his sentiments with regards to functional core, imperative shell. I want to expand on the testing of \u003ca href=\"https://en.wikipedia.org/wiki/Business_logic\"\u003ebusiness logic\u003c/a\u003e (also known as domain logic) in Rails with his examples and continue on to explain how we can evolve our applications as we add more features to them. I\u0026#39;ll be referring to the post quite a bit so it is probably best you read that first.\u003c/p\u003e\n\u003cp\u003eTom discusses moving the business logic into what he calls functionally pure methods within a static/singleton class. His use of the phrase \u0026quot;functionally pure\u0026quot; is quite the liberty as he admits in his own article.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=01.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eRevisiting the \u003ccode\u003eBilling\u003c/code\u003e module we can observe a few things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.billable_accounts\u003c/code\u003e performs an SQL query using an ActiveRecord object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.monthly_bill\u003c/code\u003e returns an initialised ActiveRecord object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.discounts\u003c/code\u003e is functionally pure business logic\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"testing-business-logic\"\u003eTesting business logic\u003c/h2\u003e\n\u003cp\u003eThe first two methods aren\u0026#39;t really functionally pure but how does this affect their testability? We can jump straight into testing \u003ccode\u003e.billable_accounts\u003c/code\u003e.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=02.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eUnfortunately this test hit the DB. The fact the method hits the DB will to some mean the method isn\u0026#39;t functionally pure or business logic at all. The method isn\u0026#39;t functionally pure because even though you do not pass any parameters, the values it change can vary depending on what is in the DB. \u003ca href=\"https://en.wikipedia.org/wiki/Pure_function\"\u003ePure functions\u003c/a\u003e should return the same results every time they are called with the same arguments. It\u0026#39;s not business logic either as it deals with implmentation specific details such as it is use of ActiveRecord methods.\u003c/p\u003e\n\u003cp\u003eFor now, I suppose we could do some mocking to get around this.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=03.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eI\u0026#39;m not opposed to resorting to this if we need to get a method under test quickly. Luckily ruby and RSpec make this kind of thing easy. You certainly would not be able to do this in PHP or Java.\u003c/p\u003e\n\u003cp\u003eMoving onto \u003ccode\u003e.monthly_bill\u003c/code\u003e we should notice it is a little easier to test.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=04.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThe tests here are not too bad. \u003ccode\u003e.monthly_bill\u003c/code\u003e is easier to test as it is mostly business logic and doesn\u0026#39;t rely on complex external interfaces. The only external interfaces it relys on is \u003ccode\u003eaccount#plan#amount\u003c/code\u003e, \u003ccode\u003eaccount#type\u003c/code\u003e and \u003ccode\u003eBill.new\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"reviewing-the-test-suite\"\u003eReviewing the test suite\u003c/h2\u003e\n\u003cp\u003eIf we structure our assertions into an actual RSpec suite, our tests describe our billing domain well. This isn\u0026#39;t a bad place to be. The suite entirely avoids hitting the DB so it\u0026#39;ll be fast.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=05.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eOne thing to note is that we are testing \u003ccode\u003e.discounts\u003c/code\u003e in the \u003ccode\u003e.monthly_bill\u003c/code\u003e example as well as in it is own specific test. To me this signals that we are probably exposing functionality that does not need to be exposed. Calculating discounts is only used when we are creating a monthly bill so we can probably hide that functionality and test it indirectly with our \u0026quot;creating monthly bill\u0026quot; context.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=06.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAfter making \u003ccode\u003e.discounts\u003c/code\u003e private our test suite will begin to fail with \u003ccode\u003eNoMethodError: private method \u0026#39;discount\u0026#39; called for Billing:Module\u003c/code\u003e. This is okay, we can now delete this failing test.\u003c/p\u003e\n\u003ch2 id=\"growing-the-domain\"\u003eGrowing the domain\u003c/h2\u003e\n\u003cp\u003eTom goes on to talk about Skinny Models and using objects in Rails to model actions rather than things. The \u003ccode\u003eBilling\u003c/code\u003e module is an object that performs actions rather than modelling a thing.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAccount\u003c/code\u003e and \u003ccode\u003eBill\u003c/code\u003e ActiveRecord objects do model things, but we\u0026#39;ve kept the business logic separate by not placing that logic inside the models.\u003c/p\u003e\n\u003cp\u003eUnfortunately the way we\u0026#39;ve built \u003ccode\u003eBilling\u003c/code\u003e module means it will only have a short shelf life. Billing is a large domain so the module will likely get bigger and bigger. Not only that but it is responsible for two separate actions: querying billing accounts and creating bills. Once we start adding more billing related actions to this module, for example refunding a bill, the test suite will grow along with the module itself which to me means it is more difficult for Engineers to quickly understand the responsibilities of the module and therefore more difficult to change it.\u003c/p\u003e\n\u003cp\u003eLuckily the piece of wisdom shared in the post provides the answer.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEnlightenment comes when you use objects in a server-side web application to model actions, not things.\u003c/p\u003e\n\u003cp\u003eâ€“ Brad Urani\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe need to use objects (read: plural) to model actions. We simply need to split the file down into responsibilities.\u003c/p\u003e\n\u003cp\u003eWhat would breaking down the billing module into individual actions look like?\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=07.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWe can then split out the RSpec examples.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=08.rb\"\u003e\u003c/script\u003e\n\n\u003ch2 id=\"model-actions-not-things\"\u003eModel actions not things\u003c/h2\u003e\n\u003cp\u003eWe\u0026#39;ve now got two billing modules for two different topics, \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e. However from the name of these modules it still feels like we\u0026#39;ve moved back to modelling things rather than actions.\u003c/p\u003e\n\u003cp\u003eIn order to categorise our logic into actions we need to think about triggers the actions. What is consuming our business logic? From Tom\u0026#39;s original example he was tying everything together in a job class.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=09.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAbove is the updated job to match the changes we\u0026#39;ve made in this article. From the name of the classes I\u0026#39;m still not getting a clear picture what is happening here. Reading the code of the job does tell us, but it is not easy to understand at a glance. What if the job called an action object?\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=10.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eI think this is a lot easier to understand. We\u0026#39;re passing in our \u003ccode\u003ecreate_and_send_monthly_bill\u003c/code\u003e object and calling \u003ccode\u003e#to_all_accounts\u003c/code\u003e on it. From the name of the parameter and the method called we paint a clear picture of what is going on.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=11.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAs you can see our \u003ccode\u003eMonthlyBillingJob\u003c/code\u003e can now be tested without as many mocks as before.\u003c/p\u003e\n\u003cp\u003eWe of course now need to create our create and send monthly bill action.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=12.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eEssentially the code from the job class is now in this domain specific action class. The RSpec example will therefore be fairly similar to the old job spec.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=13.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eQuite a jumble as in the original post. I think this in itself is a smell about the way our code works. We have to do a fair bit of mocking in order to test our action because our \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e action calls \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e directly. We are also duplicating our testing efforts again.\u003c/p\u003e\n\u003cp\u003eOne solution to this problem would be to inject \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e into our action. This will allow us to create doubles in our test and pass those in. This would mean our mocking would be simplified and we will reduce the duplication of our tests.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=14.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eHa, that didn\u0026#39;t go as well as I expected. It\u0026#39;s actually more number of lines than our previous test. I think this is a reflection of the design of our business logic. Business logic should be easy to understand and easy to test. These properties should exist when we reach a good design. I often find gut instinct tells me if the design is good and I think this is informed by how easily my brain can understand the code.\u003c/p\u003e\n\u003cp\u003eWe\u0026#39;ll need to update our implementation of \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e to satisfy this test.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=15.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWe\u0026#39;ve called the variable storing the \u003ccode\u003eMonthlyBill\u003c/code\u003e \u003ccode\u003emonthly_bill_initialiser\u003c/code\u003e which does clearly explain what it does, but the method \u003ccode\u003e#to_all_accounts\u003c/code\u003e is now a little harder to understand.\u003c/p\u003e\n\u003ch2 id=\"composing-actions\"\u003eComposing actions\u003c/h2\u003e\n\u003cp\u003eWe should probably move the creation and sending of bills into their own actions that are composed together in order to achieve the larger create and send action. The \u003ccode\u003eCreateAndSendMonthlyBill\u003c/code\u003e contains the word \u0026quot;and\u0026quot;. This to me signals there are two separate concerns here. We could move the two concerns into their own classes and then use them within the bigger action.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=16.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eLooking at \u003ccode\u003eCreateAndSendMonthlyBill#to_all_accounts\u003c/code\u003e the code now makes more sense when you read it.\u003c/p\u003e\n\u003cp\u003eOur test can now be split up which will reduce the complexity of them and make them easy to understand too.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=17.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eOur app is a lot easier to understand from the filesystem level too.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=22.txt\"\u003e\u003c/script\u003e\n\n\u003cp\u003eWe can at a glance of the file names know what our application does.\u003c/p\u003e\n\u003ch2 id=\"finishing-up\"\u003eFinishing up\u003c/h2\u003e\n\u003cp\u003eWe are almost there but we still have our \u003ccode\u003eBilling::Accounts\u003c/code\u003e and \u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e modules that represent things rather than actions.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=18.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003e\u003ccode\u003eBilling::Accounts\u003c/code\u003e is an easy win as we just change the class name to begin with a verb, \u0026quot;find\u0026quot;.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBilling::MonthlyBill\u003c/code\u003e is a little harder to change. It is responsible for initialising a \u003ccode\u003eBill\u003c/code\u003e object with a correct amount. This feels very much related to the creation of the bill to me. It\u0026#39;s almost as if we could move all the logic into \u003ccode\u003eBilling::CreateMonthlyBill\u003c/code\u003e.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=19.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eDoing this violates one of Tom\u0026#39;s rules about not mixing business logic with things that have side effects. However for me, at this point in time no other object needs to initialise a \u003ccode\u003eBill\u003c/code\u003e with the same logic so until that need arises I would in fact keep it all in this class.\u003c/p\u003e\n\u003cp\u003eYou\u0026#39;ll have probably noticed that we now inject an empty \u003ccode\u003eBill\u003c/code\u003e object. This is to keep things easy to test.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=20.rb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThe tests don\u0026#39;t look too bad at all. Our folder structure is looking really informative too.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/260cc1535e67cd2a76c8463beaa64596.js?file=21.txt\"\u003e\u003c/script\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCode\u0026#39;s testability is very much affected by its design and structure. You might say that your tests inform the design of your code. I prefer to think that the design supports easier testing because it has an easy to understand structure. Code that is easily tested is typically easier to understand.\u003c/p\u003e\n\u003cp\u003eBusiness logic is easier to understand when expressed as actions. This allows Engineers to understand the function of your domain by simply reading file names. It also means it is easy to find relevant parts of your domain and they remain easy to test.\u003c/p\u003e\n\u003cp\u003eThe structure presented in this article isn\u0026#39;t new. \u003ca href=\"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003eUncle Bob\u003c/a\u003e and \u003ca href=\"https://www.destroyallsoftware.com/talks/boundaries\"\u003eGary Bernhardt\u003c/a\u003e along with many others have been talking about this before. Some call \u0026quot;actions\u0026quot; by their other name \u0026quot;use case classes\u0026quot;.\u003c/p\u003e\n\u003cp\u003eHopefully with this design you can avoid fat controllers and fat models. Instead we can have skinny everything when we break down our domain into easy to understand pieces.\u003c/p\u003e\n\u003cp\u003eThanks for bearing with me, and feel free to \u003ca href=\"https://twitter.com/LukeMorton\"\u003etweet your feedback to me\u003c/a\u003e.\u003c/p\u003e\n","url":"/thoughts/2016-09-24-business-logic-in-rails","slug":"2016-09-24-business-logic-in-rails"},{"title":"\u003ch1 id=\"-span-class-break-always-do-the-thing-span-that-hurts-the-most\"\u003e\u003cspan class=\"break--always\"\u003eDo the thing\u003c/span\u003e that hurts the most\u003c/h1\u003e\n","plainTitle":"Do the thing that hurts the most","intro":"\u003cp\u003eA story of fight over flight. Or how doing the things you\u0026#39;re uncomfortable with\ncan help you in the long run.\u003c/p\u003e\n","publishedAt":"12th January 2016","publishedAtISO":"2016-01-12T00:00:00.000+00:00","content":"\u003cp\u003eA story of fight over flight. Or how doing the things you\u0026#39;re uncomfortable with\ncan help you in the long run.\u003c/p\u003e\n\u003cp\u003eLiving life can hurt sometimes. There is a lot of pleasure in the world but pain\nexists. Not only does it exist but it is important, it is a survival instinct.\nPain is the thing that triggers your fight or flight. This blog post is about\nchoosing to fight and the advantages of fighting rather than flying off.\u003c/p\u003e\n\u003cp\u003eNow let me start by saying this post isn\u0026#39;t about violence. It is about a braver\nkind of fighting that doesn\u0026#39;t harm anyone. It\u0026#39;s in relation to being a better\ndeveloper though this practice can stand you in good stead for handling life\ntoo.\u003c/p\u003e\n\u003ch2 id=\"feel-the-pain\"\u003eFeel the pain\u003c/h2\u003e\n\u003cp\u003ePain is an indicator that something is going wrong. Noticing pain is your chance\nto fix the thing that\u0026#39;s going wrong. Take a team that are suffering from slow\nand risky deployments.\u003c/p\u003e\n\u003cp\u003eA team is in charge of deploying a large and rather unmagnificent monolithic\napplication. It is built in PHP and has a mix of spaghetti western style and\nsome newer features in Symfony v1.\u003c/p\u003e\n\u003cp\u003eDeployments of the application are done over FTP with a maintenance mode so that\ndatabase changes can be made by hand without resulting in user data loss. At\nleast there is a staging version of the site for dry runs though keeping things\nconsistent across environments is a continued pain for the team.\u003c/p\u003e\n\u003cp\u003eEvery member of the team feels the pain. The project manager has a strict\nrelease management process that involves NASA-style checklists for every deploy\nand backout plans if anything goes wrong mid process. There is a strict\nquarterly deploy cycle since contemplating more regular deploys is just too\nscary.\u003c/p\u003e\n\u003ch2 id=\"self-perpetuating-problems\"\u003eSelf-perpetuating problems\u003c/h2\u003e\n\u003cp\u003eThis pain and the fear thereof is indicative of an infection untreated.\nPlastered over carelessly the situation is only getting worse with time. Sure\ndeploys are spaced apart but they still go wrong most of the time. Enacting the\nbackout procedure finishes off what remains of the day.\u003c/p\u003e\n\u003cp\u003eWhen they finally get all the changes made to production they take the\nmaintenance mode page down only to find more bugs reported by users. These bugs\noften find themselves mysteriously fixed outside of the release cycle.\u003c/p\u003e\n\u003cp\u003eDrifting code on production then requires back porting to staging when\ndifferences are noticed. No one really knows which environment should be\ncanonical. The sign up on staging has a remember me feature missing on production\nand production has email verification that staging does not. The team vaguely\nremember email verification being too hard to setup for staging as well as\nproduction. This problem needless to say is self perpetuating. The more it\ncontinues the harder change becomes.\u003c/p\u003e\n\u003cp\u003eChange gets harder because of two factors:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAs the process is slow and cumbersome so too is change to the application\u003c/li\u003e\n\u003cli\u003eAs the team gets battered by process the less energy they have fighting it\nto make changes\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo the more the team fears the deploys, the more process they put in place, the\nslower things get and the worse things become. Fear of pain in this case has\nresulted in flight mode for the company.\u003c/p\u003e\n\u003ch2 id=\"deploys-are-painful-so-do-them-more\"\u003eDeploys are painful so do them more\u003c/h2\u003e\n\u003cp\u003eIn this case, fighting is the solution. The pain indicates the solution. If\ndeploys are painful, and doing them less is causing problems, go in the other\ndirection. Deploys are painful so do them more.\u003c/p\u003e\n\u003cp\u003eOnce the team comes to the agreement that the ever slowing process isn\u0026#39;t helping\nthey brainstorm to identify problem areas. Large amounts of time spent on UAT to\ncover 3 months worth of changes. Equally large amounts of time spent on planning\nAPI integrations which still go wrong when deployed. Differences between staging\nand production mean deployments still require debugging when going to\nproduction. Paperwork specifications and deploy plans are usually out of date\nand inaccurate. Bugs need to be fixed quicker than every 3 months.\u003c/p\u003e\n\u003cp\u003eThey realise there is too much work around their deploys but struggle to think\nof anything other than inventing more process and bureaucracy. Then one day a\ndeveloper coming back from a conference suggests the revolutionary idea of\ncontinuous delivery. The idea that deploying more often will reduce the pains\naround deployment.\u003c/p\u003e\n\u003cp\u003eInitially everyone was scared of making their pain more regular. They worried\nthat daily deploys would lead to no time for anything other than deployment.\nHowever a VP had heard the crazy idea circulating, did her own research and\nenforced a mandate to increase the teams delivery rate.\u003c/p\u003e\n\u003ch2 id=\"facing-the-fear\"\u003eFacing the fear\u003c/h2\u003e\n\u003cp\u003eThe team came up with a plan. They would aim to deliver every 10 business\ndays. They decided any problem they face they would solve rather than use it as\na reason as to why regular delivery was a bad idea.\u003c/p\u003e\n\u003cp\u003eThe first struggle was the time it took to deploy. Instead of running from the\npain they instead looked for ways to reduce the time it took to deploy. Most of\nthe time taken was lack of parity between environments. To resolve this they\nsetup a code repository so they had a canonical source for their code. They then\nsetup an SSH script to use git to clone their code to each environment instead\nof FTP.\u003c/p\u003e\n\u003cp\u003eWith repeatable deployments they then had to focus on what they were going to\ndeliver. They started to plan their work into deployable achievable chunks. They\nhad to ensure code completion two days before deployment in order to ensure\nenough time for UAT. This is lightyears faster than their process before!\u003c/p\u003e\n\u003cp\u003eAlthough not at the eXtreme end of the agile spectrum this team have felt the\nrewards of pushing against their fears and coming out the other side. They did\nthe thing that hurt until it hurt no more.\u003c/p\u003e\n\u003ch2 id=\"pinch-of-salt\"\u003ePinch of salt\u003c/h2\u003e\n\u003cp\u003eOf course you should not do everything that hurts. That would be silly.\u003c/p\u003e\n\u003cp\u003eWriting unit tests that sometimes pass and sometimes fail does not mean you\nshould start writing those kinds of tests more.\u003c/p\u003e\n\u003cp\u003eYou can also speed up too fast and cause disasters. If the team described above\ndid not fix their deployment pipeline first or simply cut out UAT to speed up\ntheir cycle they may have simply deployed code that was not fit for purpose.\u003c/p\u003e\n\u003cp\u003eYou have to take your advice with a pinch of salt.\u003c/p\u003e\n\u003ch2 id=\"move-faster-enjoy-yourself\"\u003eMove faster, enjoy yourself\u003c/h2\u003e\n\u003cp\u003eThat said, a lot of the pain and fear of software delivery is caused by\nmalpractice sustained by unnecessary process. Management layers, excessive\nmeetings and planning, bureaucracy generally are all symptoms that we are\noperating under the condition of fear.\u003c/p\u003e\n\u003cp\u003eThrough facing up to indicative pain, in looking for actual solutions and\nremoving process where it bandages wounds that could have been avoided\naltogether, software teams can move faster and enjoy themselves at the same\ntime.\u003c/p\u003e\n\u003cp\u003eLet me know what you think. Share your own experiences. Tweet me\n\u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\n","url":"/thoughts/2016-01-12-do-the-thing-that-hurts-the-most","slug":"2016-01-12-do-the-thing-that-hurts-the-most"},{"title":"\u003ch1 id=\"feature-testing-in-2016\"\u003eFeature testing in 2016\u003c/h1\u003e\n","plainTitle":"Feature testing in 2016","intro":"\u003cp\u003eIn which I outline a strategy for Feature testing with rspec and capybara.\u003c/p\u003e\n","publishedAt":"9th January 2016","publishedAtISO":"2016-01-09T00:00:00.000+00:00","content":"\u003cp\u003eIn which I outline a strategy for Feature testing with rspec and capybara.\u003c/p\u003e\n\u003cp\u003eAt the end of last year I, along with friend, \u003ca href=\"https://www.madetech.com\"\u003ecolleague\u003c/a\u003e and \u003ca href=\"http://theisland.io\"\u003efellow islander\u003c/a\u003e\n\u003ca href=\"http://twitter.com/davidwinter\"\u003eDavid\u003c/a\u003e decided upon a set way of writing\nfeature tests across our rails projects. Based on frustrations with cucumber,\nregex and too much code sharing between scenarios the following strategy was\ndevised.\u003c/p\u003e\n\u003cp\u003eIt builds upon a blog post by Future Learn on\n\u003ca href=\"https://about.futurelearn.com/blog/how-we-write-readable-feature-tests-with-rspec/\"\u003ewriting readable feature tests in rspec\u003c/a\u003e. Without further ado:\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/6f56ef24dea0516803be.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAlong with this structure there are some rules for keeping things tidy and\nmaintainable:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOnly one \u0026quot;given/when/then\u0026quot; per scenario (never start a step with \u0026quot;and\u0026quot;)\u003c/li\u003e\n\u003cli\u003eNever reuse \u0026quot;given/when/then\u0026quot; steps between scenarios\u003c/li\u003e\n\u003cli\u003eAlways define steps within the scope of the feature\u003c/li\u003e\n\u003cli\u003eDefine lets after private declaration for separation\u003c/li\u003e\n\u003cli\u003eAny shared logic between steps should be placed in private methods defined\nbelow your let statements\u003c/li\u003e\n\u003cli\u003eComplicated or multiple assertions in your \u0026quot;then\u0026quot; steps should be placed\nin well named methods like \u003ccode\u003e#assert_something\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRely on lets rather than instance variables\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI wrote up more of the whys over on our\n\u003ca href=\"https://www.madetech.com/blog/feature-testing-with-rspec\"\u003eMade Tech blog\u003c/a\u003e. This\nwas before some of our more stricter rules were put in place.\u003c/p\u003e\n\u003cp\u003eWhat do you think? Get in touch via twitter\n\u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\n","url":"/thoughts/2016-01-09-feature-testing-in-2016","slug":"2016-01-09-feature-testing-in-2016"},{"title":"\u003ch1 id=\"getting-better-mileage-out-of-active-record\"\u003eGetting better mileage out of Active Record\u003c/h1\u003e\n","plainTitle":"Getting better mileage out of Active Record","intro":"\u003cp\u003eIn which I provide a few links to help scale the M in MVC,\nthe ActiveRecord in rails.\u003c/p\u003e\n","publishedAt":"12th September 2015","publishedAtISO":"2015-09-12T00:00:00.000+00:00","content":"\u003cp\u003eIn which I provide a few links to help scale the M in MVC,\nthe ActiveRecord in rails.\u003c/p\u003e\n\u003cp\u003eThe basis of this post comes from one tweet I read.\u003c/p\u003e\n\u003cp\u003e\u003cblockquote class=\"twitter-tweet\" lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eThe greatest trick the ORM ever pulled was convincing the world the DB doesn\u0026#39;t exist... and it\u0026#39;s a disaster for a generation of devs\u003c/p\u003e\u0026mdash; Brad Urani (@bradurani) \u003ca href=\"https://twitter.com/bradurani/status/640330896885727232\"\u003eSeptember 6, 2015\u003c/a\u003e\u003c/blockquote\u003e\u003c/p\u003e\n\u003cp\u003e\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\u003cbr /\u003e\u003c/p\u003e\n\u003cp\u003eI saw this tweet by Brad and had a response that I commonly have to positions\nor declarations in the world of software engineering.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThat\u0026#39;s a bit extreme.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eMore and more I have this view. I feel rather mellow. That said, I responded on\ntwitter almost a troll comment which immediately sinks me into having a view\nwhich again could be considered extreme.\u003c/p\u003e\n\u003cp\u003e\u003cblockquote class=\"twitter-tweet\" lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/bradurani\"\u003e@bradurani\u003c/a\u003e \u003ca href=\"https://twitter.com/Baranosky\"\u003e@Baranosky\u003c/a\u003e People are still shipping products though?\u003c/p\u003e\u0026mdash; Luke Morton (@LukeMorton) \u003ca href=\"https://twitter.com/LukeMorton/status/640479014919012352\"\u003eSeptember 6, 2015\u003c/a\u003e\u003c/blockquote\u003e\u003c/p\u003e\n\u003cp\u003e\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\u003cbr /\u003e\u003c/p\u003e\n\u003cp\u003eAh, isn\u0026#39;t life full of ironic opportunities. Anyway...\u003c/p\u003e\n\u003cp\u003ePeople are still shipping products but I think Brad is right in a way. The more\nwe introduce engineers to the world of web development via rails the more\nabstracted away from the concepts of the database they are. In the world of\nsmall business, the one I choose to operate in, roles aren\u0026#39;t well defined.\nFull stack is about as defined as my role can get since on any given day I can\nbe building out UI components with Sass/BEM/\u003ca href=\"https://github.com/lukemorton/pieces\"\u003epieces\u003c/a\u003e, designing refund\nsystems for Spree applications, setting up continuous delivery practices for new\nclients, writing chef recipes, finding \u003ca href=\"madetech.com/careers\"\u003enew hires\u003c/a\u003e or writing blog\nposts. I didn\u0026#39;t even mention databases here or the scaling of your models\nwhich are yet more skills required for generalists.\u003c/p\u003e\n\u003cp\u003eFor small businesses and for people entering the world of rails (or whatever\nyour framework) it\u0026#39;s easy to become a generalist and suffer the consequences of\nbecoming the \u003ca href=\"https://en.wikipedia.org/wiki/Jack_of_all_trades,_master_of_none\"\u003emaster of none\u003c/a\u003e. We need to be mindful as our\napplications grow how to keep control of our ORMs.\u003c/p\u003e\n\u003ch2 id=\"resources-for-getting-along-with-your-orm\"\u003eResources for getting along with your ORM\u003c/h2\u003e\n\u003cp\u003eBrad wrote a follow up post which I recommend you go read now before continuing.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://medium.com/@bradurani/turning-the-tables-how-to-get-along-with-your-object-relational-mapper-e5d2d6a76573\"\u003ehttps://medium.com/@bradurani/turning-the-tables-how-to-get-along-with-your-object-relational-mapper-e5d2d6a76573\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe author writes the common pitfalls of Active Record, statements of denial\nand provides some resources to how we might fix these problems. I\u0026#39;d like to add\nto the mix a bunch of resources I find useful for tackling these issues.\u003c/p\u003e\n\u003ch3 id=\"tackling-god-objects-with-entities-data-objects-and-repositories\"\u003eTackling god objects with entities, data objects and repositories\u003c/h3\u003e\n\u003cp\u003eGreat article on how to break down models with a trip of patterns.\nAlthough this author introduces these concepts with the aid of a gem, I think\nwe can achieve these patterns without any additional dependencies.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://victorsavkin.com/post/41016739721/building-rich-domain-models-in-rails-separating\"\u003ehttp://victorsavkin.com/post/41016739721/building-rich-domain-models-in-rails-separating\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"learn-from-others\"\u003eLearn from others\u003c/h3\u003e\n\u003cp\u003ePiotr wrote a great piece on the things he\u0026#39;s learnt whilst being a rails\ndeveloper:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://solnic.eu/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails.html\"\u003ehttp://solnic.eu/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails.html\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"use-oo-boundaries-more-efficiently\"\u003eUse OO boundaries more efficiently\u003c/h3\u003e\n\u003cp\u003eAlright, this is a plug to one of my blog posts at Made. It\u0026#39;s on topic though\nand highlights how we might better use object oriented as well as functional\nprogramming practices to scale our models further.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.madetech.com/blog/boundaries-in-object-oriented-design\"\u003ehttps://www.madetech.com/blog/boundaries-in-object-oriented-design\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"use-data-objects\"\u003eUse data objects\u003c/h3\u003e\n\u003cp\u003eRather than leaning on complex models we can instead lean on hashes or hash\nlike objects to transfer data around our applications.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://brewhouse.io/2015/07/31/be-nice-to-others-and-your-future-self-use-data-objects.html\"\u003ehttp://brewhouse.io/2015/07/31/be-nice-to-others-and-your-future-self-use-data-objects.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://lukemorton.co.uk/thoughts/2013-09-23-hashes-for-data\"\u003ehttp://lukemorton.co.uk/thoughts/2013-09-23-hashes-for-data\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"moar-patterns\"\u003eMoar patterns\u003c/h3\u003e\n\u003cp\u003eI hesistated in posting this one since it\u0026#39;s yet another list of design patterns.\nThen again, this whole blog post is about links to design patterns so it\u0026#39;s\nincluded for completeness.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m going to write in the future on how design patterns are introducing more\nproblems to our applications through their blind use.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\"\u003ehttp://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"avoid-callbacks\"\u003eAvoid callbacks\u003c/h3\u003e\n\u003cp\u003eBy using Query and Command objects we can avoid the necessity for callbacks\nwhich are often a cause for confusing bugs.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.mattjohnston.co/blog/2013/07/07/dumb-data-objects/\"\u003ehttp://www.mattjohnston.co/blog/2013/07/07/dumb-data-objects/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"use-sql-prepared-statements-in-rails-5\"\u003eUse SQL prepared statements in rails 5\u003c/h3\u003e\n\u003cp\u003eIt\u0026#39;s getting easier to use straight up SQL in rails.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/rails/rails/pull/21536\"\u003ehttps://github.com/rails/rails/pull/21536\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"avoid-activerecord\"\u003eAvoid ActiveRecord\u003c/h3\u003e\n\u003cp\u003eUse ROM.rb instead!!\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://rom-rb.org/\"\u003ehttp://rom-rb.org/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"avoid-rails\"\u003eAvoid rails\u003c/h3\u003e\n\u003cp\u003eUse Lotus instead!!\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://lotusrb.org/\"\u003ehttp://lotusrb.org/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOkay those last two links are more inspirational than aspirational. As engineers\nwho chose shops that use rails, we won\u0026#39;t be escaping Active Record or rails in\ngeneral any time soon. Hopefully I\u0026#39;ve provided a few more links that\ncan help you scale out your models and ORMs further.\u003c/p\u003e\n\u003cp\u003eI haven\u0026#39;t however provided resources to how you can utilise the power of your\ndatabase further. Or even learn as a rubyist how to be a DBA. One thing that\ncame out of my education was database normalisation a concept some developers\nhaven\u0026#39;t heard of. Let the conversation continue...\u003c/p\u003e\n","url":"/thoughts/2015-09-12-better-active-record-mileage","slug":"2015-09-12-better-active-record-mileage"},{"title":"\u003ch1 id=\"hiatus-over\"\u003eHiatus Over\u003c/h1\u003e\n","plainTitle":"Hiatus Over","intro":"\u003cp\u003eWhere I explain what I\u0026#39;ve been up to.\u003c/p\u003e\n","publishedAt":"19th July 2015","publishedAtISO":"2015-07-19T00:00:00.000+00:00","content":"\u003cp\u003eWhere I explain what I\u0026#39;ve been up to.\u003c/p\u003e\n\u003cp\u003eWhen I moved from the startup world of uncertainty to a little more certain\nworld of \u003ca href=\"https://madetech.com\"\u003edelivering web apps\u003c/a\u003e, e-commerce and otherwise, my writing\nslowed. Getting your knowledge down, distilling it into written form is an\nimportant part of consuming information. So here I am back ready to distill\nmy current thought processes about the world wide web.\u003c/p\u003e\n\u003cp\u003eMoving to \u003ca href=\"https://madetech.com\"\u003eMade\u003c/a\u003e, introducing \u003ca href=\"https://www.madetech.com/news/continuous-delivery-with-jenkins\"\u003econtinuous delivery pipelines\u003c/a\u003e,\nbringing agile rails to \u003ca href=\"https://www.madetech.com/news/made-appointed-to-redevelop-cdp-online-platforms\"\u003eteams\u003c/a\u003e who want to modernise, writing for\n\u003ca href=\"https://madetech.com/news\"\u003eMade\u0026#39;s blog\u003c/a\u003e and \u003ca href=\"https://www.madetech.com/news/scary-new-code\"\u003ehiring\u003c/a\u003e fledgling developers has been\na career changer for me. It\u0026#39;s all very exciting stuff!\u003c/p\u003e\n\u003cp\u003eThe opportunities presented at Made Tech are eye openers and exciting but I\u0026#39;m\nalso very busy. Being pushed into blogging with the rest of our team has only\nhighlighted the neglect I\u0026#39;ve been giving my own site. I am pretty opinionated\nbut I also hope I\u0026#39;m a conduit for interesting conversations, I want to put more\neffort into my personal blogging.\u003c/p\u003e\n\u003cp\u003eOver the past year and a half my idealism has been balanced out with a healthy\nsense of pragmatism. I am a fan of using \u003ca href=\"http://rubyonrails.org/\"\u003ethe\u003c/a\u003e \u003ca href=\"https://www.chef.io/chef/\"\u003etools\u003c/a\u003e\n\u003ca href=\"https://jenkins-ci.org/\"\u003eavailable\u003c/a\u003e rather than \u003ca href=\"https://github.com/lukemorton/lily\"\u003ereinventing\u003c/a\u003e \u003ca href=\"https://github.com/lukemorton/marionetta\"\u003eseveral\u003c/a\u003e\nwheels. That said, I always have my idealism as an end goal, it\u0026#39;s just one\nI\u0026#39;m getting more and more relaxed about not reaching.\u003c/p\u003e\n\u003cp\u003eFunctional programming is still having a huge impact on the way I see systems\nand components interacting. I\u0026#39;m an avid fan of map/reduce and using more basic\nconstructs of arrays and hashes eeks into my rails work. I\u0026#39;m testing like crazy\nthese days at both the \u003ca href=\"https://www.madetech.com/news/feature-testing-with-rspec\"\u003efeature and unit\u003c/a\u003e level.\u003c/p\u003e\n\u003cp\u003eAs I work with teams and improve our workflows, my understanding of agile is\ngrowing. There are no magic bullets to controlling and delivering projects, but\nthe understanding that it\u0026#39;s always a human issue and that conversation beats\nany tool and process is now engrained in me.\u003c/p\u003e\n\u003cp\u003eI hope over the coming weeks and months I will be able to share some of my more\npersonal journeys through the web.\u003c/p\u003e\n","url":"/thoughts/2015-07-19-hiatus-over","slug":"2015-07-19-hiatus-over"},{"title":"\u003ch1 id=\"-span-class-break-always-more-methods-span-more-problems\"\u003e\u003cspan class=\"break--always\"\u003eMore methods,\u003c/span\u003e more problems\u003c/h1\u003e\n","plainTitle":"More methods, more problems","intro":"\u003cp\u003eAn explanation as to why I don\u0026#39;t like more than one \u003cstrong\u003epublic\nmethod\u003c/strong\u003e per class.\u003c/p\u003e\n","publishedAt":"14th November 2013","publishedAtISO":"2013-11-14T00:00:00.000+00:00","content":"\u003cp\u003eAn explanation as to why I don\u0026#39;t like more than one \u003cstrong\u003epublic\nmethod\u003c/strong\u003e per class.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ve written about this \u003ca href=\"/thoughts/2013-09-22-data-and-behaviour\"\u003ebefore\u003c/a\u003e. If your classes are\ngoing to have a single responsibility why offer more than\none way to perform that responsibility?\u003c/p\u003e\n\u003cp\u003eMultiple methods per class â€“ and by this I mean publically\nexposed ones â€“ cause problems in a number of ways.\u003c/p\u003e\n\u003ch2 id=\"multiple-responsibilities\"\u003eMultiple responsibilities\u003c/h2\u003e\n\u003cp\u003eFirstly methods should do something. If your class has\nmultiple public methods it will likely be doing multiple\nthings.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/7466167.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eSo here we have a large model \u003ccode\u003eUserModel\u003c/code\u003e. You should already\nhave your nose up at this unimplemented class. It does too\nmuch. The methods \u003ccode\u003e#register\u003c/code\u003e, \u003ccode\u003e#login\u003c/code\u003e and \u003ccode\u003e#update_profile\u003c/code\u003e\nmight have logic in common but they are very different and\nhave different responsibilities. Having all these methods in\none class means you will have some shared logic in private\nmethods but a hell of a lot of specific private methods that\naren\u0026#39;t used by the other public methods.\u003c/p\u003e\n\u003cp\u003eUsing the \u003ca href=\"/thoughts/2013-09-25-data\"\u003eData\u003c/a\u003e component of \u003ca href=\"/thoughts/2013-09-27-IDV\"\u003eIDV\u003c/a\u003e you could create\nthree data actions:\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/7466181.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThey might share some logic but package that logic up in\nanother class they all share rather than putting all this\nlogic in one class.\u003c/p\u003e\n\u003cp\u003eYou could share logic by an abstract class but this isn\u0026#39;t wise\nin the long run. Inheritence should be avoided as much as\nmultiple public methods. Multiple responsibilities and\nextension of abstract (or even worse concrete) classes are\nexamples of coupling and aren\u0026#39;t as flexible as dependency\ninjection.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eInject shared logic at runtime rather than couple your code\nall the time\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"an-exception\"\u003eAn Exception\u003c/h2\u003e\n\u003cp\u003eLet\u0026#39;s move onto an exception. Sometimes your methods might be completely related to one another. The only two examples of\nvalid multi-method classes I can think of are\n\u003ca href=\"/thoughts/2013-09-26-interaction\"\u003eInteraction Controllers\u003c/a\u003e and \u003ca href=\"/thoughts/2013-09-25-data\"\u003eData Mappers\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s take a user data mapper for example.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/lukemorton/7466187.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eSo why do I think this is okay? Well firstly a mongo specific\ndata mapper for a user is a pretty specific responsibility.\nThe class does not have one single responsibility though. It\nhas the responsibility of finding one document by ID and many\ndocuments by an array of IDs. Two responsibilities but I still\nthink this is okay and let me explain why.\u003c/p\u003e\n\u003cp\u003eThe methods \u003ccode\u003e#find_one_by_id\u003c/code\u003e and \u003ccode\u003e#find_by_ids\u003c/code\u003e are\nstandalone but will share the collection instance injected so\nthis is one bit of logic that would need to be repeated or\ninherited if we split this class into two.\u003c/p\u003e\n\u003cp\u003eBoth methods share the state initialised on construction, the collection, however they are still fairly independent and\natomic. I see these methods as single responsibilties packaged\nunder a single namespace \u003ccode\u003eUserMongoDataMapper\u003c/code\u003e. As long as the methods remain SRP and share the majority of logic within the\ndata mapper then they can remain in one class.\u003c/p\u003e\n\u003cp\u003eSo we\u0026#39;ve now identified an exception â€“ that is â€“ when methods\nare independent, atomic and share most private logic in the\nclass then it might be okay to keep them in one object.\u003c/p\u003e\n\u003ch2 id=\"atomic\"\u003eAtomic\u003c/h2\u003e\n\u003cp\u003eAtomicity is important. I might have just made that word up\nso I\u0026#39;ll define it. When calling the method it should be\ntotally independent and rely on no shared state with other\npublic methods. If by calling \u003ccode\u003e#find_one_by_id\u003c/code\u003e affected a\nlater call to \u003ccode\u003e#find_by_ids\u003c/code\u003e then these methods would not be\natomic. They are coupled and definitely not single\nresponsibility. Furthermore leaking these implementation side\neffects into your application means you are introducing hidden\ncoupling into your application. Little secrets such as the\nside effects of calling methods of an instance in different\norders lead to many subtle bugs. Just don\u0026#39;t do it!\u003c/p\u003e\n\u003ch2 id=\"the-obvious\"\u003eThe obvious\u003c/h2\u003e\n\u003cp\u003eMultiple public methods make a class more difficult to reason\nabout. The developer using it will need to know when to use\nwhat methods, the interfaces for each method and so will your\ncode. The more methods in your program the more coupled to implementation your application will become. This should be\nobvious:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe more code you write the more problems you are going to\nhave so don\u0026#39;t write as much\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eI\u0026#39;m going to quickly summarise the points I\u0026#39;ve made so you can\nargue in favour of the statement \u0026quot;more methods, more\nproblems\u0026quot;.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMethods have a single responsibility, having multiple\nmethods per class means the class does not have a single\nresponsibility\u003c/li\u003e\n\u003cli\u003eMethods may share logic with related methods but they will\nalso have independent logic â€“ coupling related methods is\na messy way to share logic between components â€“\ntry injecting logic instead\u003c/li\u003e\n\u003cli\u003eMethods should be atomic operations, if they aren\u0026#39;t then\nyou\u0026#39;ll be introducing hidden coupling (think method call\norder) and subtle bugs into your application\u003c/li\u003e\n\u003cli\u003eThe more methods you write, the more code your application\nwill have, the more the code, the more the bugs\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe OOP lot like to hide complexity in pretty looking\nchainable fluid interfaces. That\u0026#39;s an ironically complex\nsolution for a problem aimed at reducing complexity.\u003c/p\u003e\n\u003cp\u003eI know what the magicians are saying, \u0026quot;a class with a few\nsetters and getters is hardly complex.\u0026quot;\u003c/p\u003e\n\u003cp\u003eMaybe not but I\u0026#39;m not buying your evil magic friend. You and\nyour tempting class of tricks can stay away from my\napplication party.\u003c/p\u003e\n","url":"/thoughts/2013-11-14-more-methods-more-problems","slug":"2013-11-14-more-methods-more-problems"},{"title":"\u003ch1 id=\"sans-framework-generation\"\u003eSans framework generation\u003c/h1\u003e\n","plainTitle":"Sans framework generation","intro":"\u003cp\u003eThat\u0026#39;s right. It\u0026#39;s time to leave your \u003cstrong\u003eframeworks\u003c/strong\u003e behind\nyou.\u003c/p\u003e\n","publishedAt":"28th September 2013","publishedAtISO":"2013-09-28T00:00:00.000+00:00","content":"\u003cp\u003eThat\u0026#39;s right. It\u0026#39;s time to leave your \u003cstrong\u003eframeworks\u003c/strong\u003e behind\nyou.\u003c/p\u003e\n\u003cp\u003eThis isn\u0026#39;t advice. Okay it is. But you seriously need to think\nabout what I\u0026#39;m about to say. Read and reread the following\nstatement.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFrameworks aren\u0026#39;t bad, but being locked into them is\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhat do I mean by this? I mean bad things come from projects\nthat get locked to a framework. By locked I mean coupled. Slow\nrails tests anyone? Difficulty deconstructing applications\ninto smaller services due to reliance on a particular way of\ndoing something? Decided omakase isn\u0026#39;t for you?\u003c/p\u003e\n\u003cp\u003eWhatever the problem it comes down to locking yourself in.\nVendor lock in is shitty. When your entire business gives\nitself to one vendor it\u0026#39;s a risk.\u003c/p\u003e\n\u003cp\u003eThere\u0026#39;s a better way. Write your business logic before\nchoosing a framework. Work out your wireframes, build HTML\nprototypes, do some TDD for your user stories. The key is to\ndefer the framework decision. Hell, \u003ca href=\"http://www.youtube.com/watch?v=WpkDN78P884#t=49m48s\"\u003edefer\u003c/a\u003e \u003ca href=\"http://www.allaboutagile.com/lean-principles-4-defer-commitment/\"\u003eall\u003c/a\u003e your\n\u003ca href=\"http://www.codinghorror.com/blog/2006/10/the-last-responsible-moment.html\"\u003ebase\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m serious here. Why write your framework code first? How\ndoes it make any sense to do something the rails way? You\nshould do it your applications way. That doesn\u0026#39;t mean your\napplication logic won\u0026#39;t fit into the rails paradigm. Just\nwrite your application logic so it doesn\u0026#39;t care for what\ninterface it uses to deliver content to the user. Rails does\nthis particularly poorly since you end up using a lot of logic\nprovided by it\u0026#39;s framework. To get the benefits of rails you\ndo really have to go the rails way, but then you\u0026#39;re fucked.\u003c/p\u003e\n\u003cp\u003eYou decide where you stand but I\u0026#39;m of the sans framework\ngeneration.\u003c/p\u003e\n\u003cp\u003eComments to \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e please.\u003c/p\u003e\n","url":"/thoughts/2013-09-28-sans-framework-generation","slug":"2013-09-28-sans-framework-generation"},{"title":"\u003ch1 id=\"idv\"\u003eIDV\u003c/h1\u003e\n","plainTitle":"IDV","intro":"\u003cp\u003eIntroducing the \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e\ndesign pattern.\u003c/p\u003e\n","publishedAt":"27th September 2013","publishedAtISO":"2013-09-27T00:00:00.000+00:00","content":"\u003cp\u003eIntroducing the \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e\ndesign pattern.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIDV = I + D + V\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eEvery project I\u0026#39;ve been employed to work on so far I\u0026#39;ve taken\non the responsibility for reorganising brownfield and\ndesigning the architecture for greenfield applications. The\nIDV pattern comes from my frustration of change. Not that I\ndon\u0026#39;t like change â€“ I love what change brings. No, it\u0026#39;s the\nfact \u003cem\u003echange is hard\u003c/em\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eChange should be cheap\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI really believe this. Change happens and is required in\nbusiness. Applications represent businesses. Applications need\nto be changed for business reasons. If change is inevitable,\nshouldn\u0026#39;t we prepare for it? What would being prepared for\nchange look like? Or, to put it another way. What does not\nbeing prepared for change look like?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThings are tightly coupled\u003c/li\u003e\n\u003cli\u003eLocked to vendors (concrete implementations everywhere)\u003c/li\u003e\n\u003cli\u003eLeaky encapsulation\u003c/li\u003e\n\u003cli\u003eConfusing or undocumented interfaces\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFace it, it looks a mess and we\u0026#39;ve all been there.\u003c/p\u003e\n\u003cp\u003eLike I said, IDV came from a frustration of change caused by\nthe problems listed above. So I have potential solutions. In\nfact I\u0026#39;d call them working solutions because I\u0026#39;ve developed\nand utilised them over time.\u003c/p\u003e\n\u003cp\u003eThe main premise is the separation of concerns by introducing\nclear boundaries to your business and application logic. By\nusing a small set of interfaces we can avoid a lot of these\nproblems of change.\u003c/p\u003e\n\u003cp\u003eI say small set, it\u0026#39;s purposefully a small set. The idea is\nthat the interfaces you introduce \u003cem\u003ewill not change\u003c/em\u003e. So we\ndefine broad and generic method interfaces so these unchanging\nparts never cause a problem.\u003c/p\u003e\n\u003ch2 id=\"unchanging-interfaces\"\u003eUnchanging interfaces\u003c/h2\u003e\n\u003cp\u003eWhat does an unchanging interface look like?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAn unchanging interface will be method based rather than\nclass based so that we can switch implementations at\nanytime.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMethod names will be generic enough not to hint any\nimplementation details.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe only parameter will be a hash. This allows any and all\nkinds of information to be passed in. (At least in\ndynamically typed languages.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe only returned value will also be a hash. This means\nanyone can consume the data returned. Hashes and scalar\nvalues should be the only values returned within the main\nhash.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA flexible unchanging interface means that communication\nbetween areas of your application can happen in a limited way.\nThis means change to logic inside the interfaces are fully\nencapsulated and are less likely to cause problems in other\nareas of the application.\u003c/p\u003e\n\u003cp\u003eWe do however need to decide where to draw these interface\nlines.\u003c/p\u003e\n\u003ch2 id=\"separation-of-concerns\"\u003eSeparation of concerns\u003c/h2\u003e\n\u003cp\u003eIn order to decide where to implement these unchanging\ninterfaces we need to understand the separation of concerns.\nWe need to work out where to separate. The answer is in the\nname. We need to separate out the parts that aren\u0026#39;t concerned\nwith how the other parts do things.\u003c/p\u003e\n\u003cp\u003eHow do most web frameworks split out application logic? MVC!\nMVC tells us that Model, View and Controller logic are\nseparate concerns.\u003c/p\u003e\n\u003cp\u003eMVC fails with the unchanging interface criteria.\nModels in web application world often have many methods and\nare used in views and controllers. Controllers can have many\nactions and views have many methods and often mix logic with\ntemplates or logic in controllers. This makes for disaster\nbecause the interface of a class is the public methods it\nexposes. The more methods exposed the more weakness your\napplication will have to the changes made in these methods.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMVC is a bastardised separation of concerns\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo what areas is MVC trying to tackle? Uncle Bob \u003ca href=\"http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003etells us\u003c/a\u003e\nthat the business logic should be wrapped in interface logic.\nSo we have business logic, M. Snug in between the interface\nand business logic is a view layer for presenting the business\ndata and logic, that\u0026#39;s V. C is the controller layer which\nis basically the communication of the areas of the application\nto the interface by which the application is delivered.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;d like to define these better. And not in some weird circle\ndiagram. I\u0026#39;d still split it into three layers like MVC:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe protocol for delivering the application\u003c/li\u003e\n\u003cli\u003eThe data layer for applying business logic to data\u003c/li\u003e\n\u003cli\u003eThe view layer for presentation\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOr in other words IDV: \u003cstrong\u003eInteraction\u003c/strong\u003e, \u003cstrong\u003eData\u003c/strong\u003e and \u003cstrong\u003eView\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis isn\u0026#39;t clearly defined enough yet though. Each one of\nthese concerns have several concerns themselves. We\u0026#39;ll discuss\neach section and their concerns briefly.\u003c/p\u003e\n\u003ch3 id=\"interaction\"\u003eInteraction\u003c/h3\u003e\n\u003cp\u003eInteraction is the application itself. It is the delivery\nmechanism for the applications content. It is also the\nlayer that communicates with the domain in order to produce\nthe applications content. That\u0026#39;s two concerns right there.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInteraction with user over protocol communication\u003c/li\u003e\n\u003cli\u003eInteraction with the business (domain) layer\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOr in two simple terms \u003cstrong\u003eApplication\u003c/strong\u003e and \u003cstrong\u003eController\u003c/strong\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI = A + C\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTypicalling routing and protocol handling will be done in the\napplication layer. This layer will then communicate with one\nor more controllers. The controllers will then interact with\nthe data and view layers and produce a response which is then\nreturned back to the application for delivery to the user.\u003c/p\u003e\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-26-interaction\"\u003einteraction layer\u003c/a\u003e if you\nwish to find out more.\u003c/p\u003e\n\u003ch3 id=\"data\"\u003eData\u003c/h3\u003e\n\u003cp\u003eData is the core business logic. It deals with asking business\nquestions of data. It also handles the inserting, updating and\ndeletion of business data. Along with this business logic it\nalso handles the communication with the data sources of the\napplication. Three concerns.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInteraction with data sources\u003c/li\u003e\n\u003cli\u003eModelling of data for answering business questions\u003c/li\u003e\n\u003cli\u003ePerforming business actions on data\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOr more simply \u003cstrong\u003eMapper\u003c/strong\u003e, \u003cstrong\u003eModel\u003c/strong\u003e and \u003cstrong\u003eAction\u003c/strong\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eD = Ma + Mo + A\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eModels and actions will be called by a controller. The\ncontroller will pass in mappers and other request information\nto the models and actions and pass their responses into the\nview layer or immediately return control to the application\nlayer.\u003c/p\u003e\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-25-data\"\u003edata layer\u003c/a\u003e if you wish to\nfind out more.\u003c/p\u003e\n\u003ch3 id=\"view\"\u003eView\u003c/h3\u003e\n\u003cp\u003eView is the translation of business data into a presentation\nfor the user. It handles the structure of data for\npresentation. It also handles the modelling of data for\npresentation. Along with these responsibilities it also needs\nto merge the modelled data into the structure. Three concerns\njust like data.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStructuring data for presentation\u003c/li\u003e\n\u003cli\u003eModelling data for presentation\u003c/li\u003e\n\u003cli\u003eMerging the structure and modelled data for presentation\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOr more simply \u003cstrong\u003eTemplate\u003c/strong\u003e, \u003cstrong\u003eModel\u003c/strong\u003e and\n\u003cstrong\u003eTemplate Engine\u003c/strong\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eV = T + M + TE\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe controller will first pass data from the view layer and\nrequest into the view model. It will then use the template\nengine to merge this view model with a template. This data\nwill then be formed into a response and passed back to the\napplication layer.\u003c/p\u003e\n\u003cp\u003eI have written more about the \u003ca href=\"/thoughts/2013-09-24-views\"\u003eview layer\u003c/a\u003e if you wish to\nfind out more.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eUsing unchanging interfaces between each one of the sub\nconcerns defined above will allow you to substitute each\nconcern as per the \u003ca href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\"\u003eLiskov substitution principle\u003c/a\u003e. Being\nable to switch out each component separately means they can\nbe tested independently, parts can be replaced without\naffecting other sections of the application and you only have\nto introduce 8 types of interfaces to your entire application.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIDV = (A + C) (Ma + Mo + A) (T + M + TE)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis article was more theory than code examples so I apologise\nfor that. You\u0026#39;ll find in the links throughout code examples of\neach layer of IDV. If I tried to fit them all into this one\narticle there would have been trouble.\u003c/p\u003e\n\u003cp\u003eLet me know what you think \u003ca href=\"https://twitter.com/LukeMorton\"\u003e@LukeMorton\u003c/a\u003e.\u003c/p\u003e\n","url":"/thoughts/2013-09-27-IDV","slug":"2013-09-27-IDV"}],"projects":[{"name":"MarketTown","description":"A collection of open source libraries for e-commerce.","url":"https://github.com/madetech/market_town"},{"name":"cf-deploy","description":"cf-deploy is the tool you use to deploy your rails app to CloudFoundry providers like Pivotal.","url":"https://github.com/madetech/cf-deploy"},{"name":"rui","description":"Very experimental ruby user interface library for HTML/CSS.","url":"https://github.com/lukemorton/rui"},{"name":"Lily","description":"A lightweight web application library for PHP.","url":"https://github.com/lukemorton/lily"}]},"pathname":"/","query":{},"err":null,"ids":[]}; module={};</script></div><div><script type="text/javascript" src="/_next/commons.js"></script><script type="text/javascript" src="/_next/main.js"></script></div></body></html>