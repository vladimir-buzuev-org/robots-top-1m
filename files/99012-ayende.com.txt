<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="format-detection" content="telephone=no" />
    <link rel="shortcut icon" href="/favicon.ico">
    <link rel="icon" href="/favicon.ico">
    <meta name="description">

    <title>
Ayende @ Rahien
    </title>

    <link href="/blog/Content/css/styles?v=c4cvmDfCyb1gJ_e62GQPuslwO9GcFw1qMwS3bUKZ9kI1" rel="stylesheet"/>

    <link href="/blog/Content/css/custom/ayende?v=lX8I6hLxrv7LXKscmPagsXtKr0hRFQm3jrtw_q2nu2g1" rel="stylesheet"/>

    
</head>
<body class="show-grid">
    <div class="container hideSidebar">
        <div class="row">
            <div class="leftSide col-sm-4 col-md-3">
                <a href="/blog/" class="logo">
                    <h1>Ayende @ Rahien</h1>
                </a>

                <a href="/blog/" style="display: block;"><img src="/blog/Content/css/img/rihno.svg" class="rihno" /></a>

                <a href="/blog/" class="logo-vertical">
                    <h1>Ayende @ Rahien</h1>
                </a>
                <button class="menu-button" id="open-button"><i class="glyphicon glyphicon-circle-arrow-down hide-sm" aria-hidden="true"></i></button>
                <button class="menu-enlarge" id="enlarge-button"><i class="glyphicon glyphicon-circle-arrow-left hide-sm" aria-hidden="true"></i></button>
                <div class="clearfix"></div>
                <div class="collapseMobile">
                    <div class="about home">
                        

<span>Hi!</span><br />
<span>My name is</span> <span>Oren Eini</span><br />
<span>
	Founder of <a href="http://www.hibernatingrhinos.com/" target="_blank"><strong> Hibernating Rhinos LTD</strong></a> and
	<a href="http://ravendb.net/" target="_blank"><strong>RavenDB</strong></a>.
</span><br />
	<span>You can reach me by email or phone:</span><br />
	<p class="mail"><a href="mailto:ayende@ayende.com">ayende@ayende.com</a></p>
	<p class="phone">+972 52-548-6969</p>



                    </div>
                    <div class="pull-down">
                        <p class="socicon">
                                <a href="http://feeds.feedburner.com/AyendeRahien" class="rss">,</a>
                                                            <a href="mailto:ayende@ayende.com" class="mail">&#64;</a>
                                                            <a href="https://github.com/ayende" class="git">Q</a>
                                                            <a href="https://twitter.com/ayende" class="twitter">a</a>
                                                            <a href="https://www.facebook.com/pages/RavenDB/265907650186374" class="facebook">b</a>
                                                            <a href="https://plus.google.com/+AyendeRahien" class="gplus">c</a>
                        </p>
                        
<p class="stats"><span>Posts: <strong>6,448</strong></span> | <span>Comments: <strong>47,642</strong></span></p>
                        <p class="copyright">Copyright (C) Ayende Rahien  2004 - 2017</p>
                    </div>
                </div>
            </div>
            <div id="content" class="centerCol col-sm-8 col-sm-offset-4 col-md-offset-3 col-md-6 col-lg-7">
                <header>
                    <div class="search">
<form action="/blog/search" method="get">                            <input name="q" type="search" placeholder="search" class="form-control" />
                            <input type="submit" />
</form>                    </div>
                    <div style="display:inline-block">
                            <a href="#" id="tags-button">
                                <span class="glyphicon glyphicon-tags" aria-hidden="true"></span> filter by tags
                            </a>
                                                    <a href="#" id="archive-button">
                                <span class="glyphicon glyphicon-inbox" aria-hidden="true"></span> archive
                            </a>
                    </div>
                    <nav class="pull-right views ">
                        <a href="#" class="stackView" id="stackView">stack view</a>
                        <a href="#" class="gridView active" id="gridView">grid view</a>
                    </nav>

                    <div class="clearfix"></div>
                    
<nav id="tags">
	<ul>
				<li>
					<a href="/blog/tags/architecture">architecture</a>&nbsp;<span>(243)</span>&nbsp;<a href="/blog/rss/architecture" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/bugs">bugs</a>&nbsp;<span>(346)</span>&nbsp;<a href="/blog/rss/bugs" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/challanges">challanges</a>&nbsp;<span>(73)</span>&nbsp;<a href="/blog/rss/challanges" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/community">community</a>&nbsp;<span>(175)</span>&nbsp;<a href="/blog/rss/community" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/databases">databases</a>&nbsp;<span>(300)</span>&nbsp;<a href="/blog/rss/databases" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/design">design</a>&nbsp;<span>(570)</span>&nbsp;<a href="/blog/rss/design" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/development">development</a>&nbsp;<span>(336)</span>&nbsp;<a href="/blog/rss/development" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/ef-prof">ef prof</a>&nbsp;<span>(53)</span>&nbsp;<a href="/blog/rss/ef-prof" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/hibernating-rhinos">hibernating rhinos</a>&nbsp;<span>(40)</span>&nbsp;<a href="/blog/rss/hibernating-rhinos" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/humor">humor</a>&nbsp;<span>(163)</span>&nbsp;<a href="/blog/rss/humor" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/miscellaneous">miscellaneous</a>&nbsp;<span>(576)</span>&nbsp;<a href="/blog/rss/miscellaneous" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/nh-prof">nh prof</a>&nbsp;<span>(152)</span>&nbsp;<a href="/blog/rss/nh-prof" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/nosql">nosql</a>&nbsp;<span>(50)</span>&nbsp;<a href="/blog/rss/nosql" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/performance">performance</a>&nbsp;<span>(294)</span>&nbsp;<a href="/blog/rss/performance" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/programming">programming</a>&nbsp;<span>(887)</span>&nbsp;<a href="/blog/rss/programming" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/raven">raven</a>&nbsp;<span>(902)</span>&nbsp;<a href="/blog/rss/raven" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/reddit">reddit</a>&nbsp;<span>(25)</span>&nbsp;<a href="/blog/rss/reddit" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/reviews">reviews</a>&nbsp;<span>(152)</span>&nbsp;<a href="/blog/rss/reviews" class="rss">rss</a>
				</li>
				<li>
					<a href="/blog/tags/wtf">wtf?!</a>&nbsp;<span>(54)</span>&nbsp;<a href="/blog/rss/wtf" class="rss">rss</a>
				</li>

	</ul>
</nav>

                    
<nav id="archive">
	<ul>
				<li>
					<a href="#">2017</a>
					<ul>
							<li><a href="/blog/archive/2017/9"> September </a> (6)</li>
							<li><a href="/blog/archive/2017/8"> August </a> (23)</li>
							<li><a href="/blog/archive/2017/7"> July </a> (21)</li>
							<li><a href="/blog/archive/2017/6"> June </a> (24)</li>
							<li><a href="/blog/archive/2017/5"> May </a> (21)</li>
							<li><a href="/blog/archive/2017/4"> April </a> (21)</li>
							<li><a href="/blog/archive/2017/3"> March </a> (23)</li>
							<li><a href="/blog/archive/2017/2"> February </a> (20)</li>
							<li><a href="/blog/archive/2017/1"> January </a> (23)</li>
					</ul>
				</li>
				<li>
					<a href="#">2016</a>
					<ul>
							<li><a href="/blog/archive/2016/12"> December </a> (17)</li>
							<li><a href="/blog/archive/2016/11"> November </a> (18)</li>
							<li><a href="/blog/archive/2016/10"> October </a> (22)</li>
							<li><a href="/blog/archive/2016/9"> September </a> (18)</li>
							<li><a href="/blog/archive/2016/8"> August </a> (23)</li>
							<li><a href="/blog/archive/2016/7"> July </a> (22)</li>
							<li><a href="/blog/archive/2016/6"> June </a> (17)</li>
							<li><a href="/blog/archive/2016/5"> May </a> (24)</li>
							<li><a href="/blog/archive/2016/4"> April </a> (16)</li>
							<li><a href="/blog/archive/2016/3"> March </a> (16)</li>
							<li><a href="/blog/archive/2016/2"> February </a> (21)</li>
							<li><a href="/blog/archive/2016/1"> January </a> (21)</li>
					</ul>
				</li>
				<li>
					<a href="#">2015</a>
					<ul>
							<li><a href="/blog/archive/2015/12"> December </a> (5)</li>
							<li><a href="/blog/archive/2015/11"> November </a> (10)</li>
							<li><a href="/blog/archive/2015/10"> October </a> (9)</li>
							<li><a href="/blog/archive/2015/9"> September </a> (17)</li>
							<li><a href="/blog/archive/2015/8"> August </a> (20)</li>
							<li><a href="/blog/archive/2015/7"> July </a> (17)</li>
							<li><a href="/blog/archive/2015/6"> June </a> (4)</li>
							<li><a href="/blog/archive/2015/5"> May </a> (12)</li>
							<li><a href="/blog/archive/2015/4"> April </a> (9)</li>
							<li><a href="/blog/archive/2015/3"> March </a> (8)</li>
							<li><a href="/blog/archive/2015/2"> February </a> (25)</li>
							<li><a href="/blog/archive/2015/1"> January </a> (17)</li>
					</ul>
				</li>
				<li>
					<a href="#">2014</a>
					<ul>
							<li><a href="/blog/archive/2014/12"> December </a> (22)</li>
							<li><a href="/blog/archive/2014/11"> November </a> (19)</li>
							<li><a href="/blog/archive/2014/10"> October </a> (21)</li>
							<li><a href="/blog/archive/2014/9"> September </a> (37)</li>
							<li><a href="/blog/archive/2014/8"> August </a> (24)</li>
							<li><a href="/blog/archive/2014/7"> July </a> (23)</li>
							<li><a href="/blog/archive/2014/6"> June </a> (13)</li>
							<li><a href="/blog/archive/2014/5"> May </a> (19)</li>
							<li><a href="/blog/archive/2014/4"> April </a> (24)</li>
							<li><a href="/blog/archive/2014/3"> March </a> (23)</li>
							<li><a href="/blog/archive/2014/2"> February </a> (21)</li>
							<li><a href="/blog/archive/2014/1"> January </a> (24)</li>
					</ul>
				</li>
				<li>
					<a href="#">2013</a>
					<ul>
							<li><a href="/blog/archive/2013/12"> December </a> (23)</li>
							<li><a href="/blog/archive/2013/11"> November </a> (29)</li>
							<li><a href="/blog/archive/2013/10"> October </a> (27)</li>
							<li><a href="/blog/archive/2013/9"> September </a> (26)</li>
							<li><a href="/blog/archive/2013/8"> August </a> (24)</li>
							<li><a href="/blog/archive/2013/7"> July </a> (24)</li>
							<li><a href="/blog/archive/2013/6"> June </a> (23)</li>
							<li><a href="/blog/archive/2013/5"> May </a> (25)</li>
							<li><a href="/blog/archive/2013/4"> April </a> (26)</li>
							<li><a href="/blog/archive/2013/3"> March </a> (24)</li>
							<li><a href="/blog/archive/2013/2"> February </a> (24)</li>
							<li><a href="/blog/archive/2013/1"> January </a> (21)</li>
					</ul>
				</li>
				<li>
					<a href="#">2012</a>
					<ul>
							<li><a href="/blog/archive/2012/12"> December </a> (19)</li>
							<li><a href="/blog/archive/2012/11"> November </a> (22)</li>
							<li><a href="/blog/archive/2012/10"> October </a> (27)</li>
							<li><a href="/blog/archive/2012/9"> September </a> (24)</li>
							<li><a href="/blog/archive/2012/8"> August </a> (30)</li>
							<li><a href="/blog/archive/2012/7"> July </a> (23)</li>
							<li><a href="/blog/archive/2012/6"> June </a> (25)</li>
							<li><a href="/blog/archive/2012/5"> May </a> (23)</li>
							<li><a href="/blog/archive/2012/4"> April </a> (25)</li>
							<li><a href="/blog/archive/2012/3"> March </a> (25)</li>
							<li><a href="/blog/archive/2012/2"> February </a> (28)</li>
							<li><a href="/blog/archive/2012/1"> January </a> (24)</li>
					</ul>
				</li>
				<li>
					<a href="#">2011</a>
					<ul>
							<li><a href="/blog/archive/2011/12"> December </a> (17)</li>
							<li><a href="/blog/archive/2011/11"> November </a> (14)</li>
							<li><a href="/blog/archive/2011/10"> October </a> (24)</li>
							<li><a href="/blog/archive/2011/9"> September </a> (28)</li>
							<li><a href="/blog/archive/2011/8"> August </a> (27)</li>
							<li><a href="/blog/archive/2011/7"> July </a> (30)</li>
							<li><a href="/blog/archive/2011/6"> June </a> (19)</li>
							<li><a href="/blog/archive/2011/5"> May </a> (16)</li>
							<li><a href="/blog/archive/2011/4"> April </a> (30)</li>
							<li><a href="/blog/archive/2011/3"> March </a> (23)</li>
							<li><a href="/blog/archive/2011/2"> February </a> (11)</li>
							<li><a href="/blog/archive/2011/1"> January </a> (26)</li>
					</ul>
				</li>
				<li>
					<a href="#">2010</a>
					<ul>
							<li><a href="/blog/archive/2010/12"> December </a> (29)</li>
							<li><a href="/blog/archive/2010/11"> November </a> (28)</li>
							<li><a href="/blog/archive/2010/10"> October </a> (35)</li>
							<li><a href="/blog/archive/2010/9"> September </a> (33)</li>
							<li><a href="/blog/archive/2010/8"> August </a> (44)</li>
							<li><a href="/blog/archive/2010/7"> July </a> (17)</li>
							<li><a href="/blog/archive/2010/6"> June </a> (20)</li>
							<li><a href="/blog/archive/2010/5"> May </a> (53)</li>
							<li><a href="/blog/archive/2010/4"> April </a> (29)</li>
							<li><a href="/blog/archive/2010/3"> March </a> (35)</li>
							<li><a href="/blog/archive/2010/2"> February </a> (33)</li>
							<li><a href="/blog/archive/2010/1"> January </a> (36)</li>
					</ul>
				</li>
				<li>
					<a href="#">2009</a>
					<ul>
							<li><a href="/blog/archive/2009/12"> December </a> (37)</li>
							<li><a href="/blog/archive/2009/11"> November </a> (35)</li>
							<li><a href="/blog/archive/2009/10"> October </a> (53)</li>
							<li><a href="/blog/archive/2009/9"> September </a> (60)</li>
							<li><a href="/blog/archive/2009/8"> August </a> (66)</li>
							<li><a href="/blog/archive/2009/7"> July </a> (29)</li>
							<li><a href="/blog/archive/2009/6"> June </a> (24)</li>
							<li><a href="/blog/archive/2009/5"> May </a> (52)</li>
							<li><a href="/blog/archive/2009/4"> April </a> (63)</li>
							<li><a href="/blog/archive/2009/3"> March </a> (35)</li>
							<li><a href="/blog/archive/2009/2"> February </a> (53)</li>
							<li><a href="/blog/archive/2009/1"> January </a> (50)</li>
					</ul>
				</li>
				<li>
					<a href="#">2008</a>
					<ul>
							<li><a href="/blog/archive/2008/12"> December </a> (58)</li>
							<li><a href="/blog/archive/2008/11"> November </a> (65)</li>
							<li><a href="/blog/archive/2008/10"> October </a> (46)</li>
							<li><a href="/blog/archive/2008/9"> September </a> (48)</li>
							<li><a href="/blog/archive/2008/8"> August </a> (96)</li>
							<li><a href="/blog/archive/2008/7"> July </a> (87)</li>
							<li><a href="/blog/archive/2008/6"> June </a> (45)</li>
							<li><a href="/blog/archive/2008/5"> May </a> (51)</li>
							<li><a href="/blog/archive/2008/4"> April </a> (52)</li>
							<li><a href="/blog/archive/2008/3"> March </a> (70)</li>
							<li><a href="/blog/archive/2008/2"> February </a> (43)</li>
							<li><a href="/blog/archive/2008/1"> January </a> (49)</li>
					</ul>
				</li>
				<li>
					<a href="#">2007</a>
					<ul>
							<li><a href="/blog/archive/2007/12"> December </a> (100)</li>
							<li><a href="/blog/archive/2007/11"> November </a> (52)</li>
							<li><a href="/blog/archive/2007/10"> October </a> (109)</li>
							<li><a href="/blog/archive/2007/9"> September </a> (68)</li>
							<li><a href="/blog/archive/2007/8"> August </a> (80)</li>
							<li><a href="/blog/archive/2007/7"> July </a> (56)</li>
							<li><a href="/blog/archive/2007/6"> June </a> (150)</li>
							<li><a href="/blog/archive/2007/5"> May </a> (115)</li>
							<li><a href="/blog/archive/2007/4"> April </a> (73)</li>
							<li><a href="/blog/archive/2007/3"> March </a> (124)</li>
							<li><a href="/blog/archive/2007/2"> February </a> (102)</li>
							<li><a href="/blog/archive/2007/1"> January </a> (68)</li>
					</ul>
				</li>
				<li>
					<a href="#">2006</a>
					<ul>
							<li><a href="/blog/archive/2006/12"> December </a> (95)</li>
							<li><a href="/blog/archive/2006/11"> November </a> (53)</li>
							<li><a href="/blog/archive/2006/10"> October </a> (120)</li>
							<li><a href="/blog/archive/2006/9"> September </a> (57)</li>
							<li><a href="/blog/archive/2006/8"> August </a> (88)</li>
							<li><a href="/blog/archive/2006/7"> July </a> (54)</li>
							<li><a href="/blog/archive/2006/6"> June </a> (103)</li>
							<li><a href="/blog/archive/2006/5"> May </a> (89)</li>
							<li><a href="/blog/archive/2006/4"> April </a> (84)</li>
							<li><a href="/blog/archive/2006/3"> March </a> (143)</li>
							<li><a href="/blog/archive/2006/2"> February </a> (78)</li>
							<li><a href="/blog/archive/2006/1"> January </a> (64)</li>
					</ul>
				</li>
				<li>
					<a href="#">2005</a>
					<ul>
							<li><a href="/blog/archive/2005/12"> December </a> (70)</li>
							<li><a href="/blog/archive/2005/11"> November </a> (97)</li>
							<li><a href="/blog/archive/2005/10"> October </a> (91)</li>
							<li><a href="/blog/archive/2005/9"> September </a> (61)</li>
							<li><a href="/blog/archive/2005/8"> August </a> (74)</li>
							<li><a href="/blog/archive/2005/7"> July </a> (92)</li>
							<li><a href="/blog/archive/2005/6"> June </a> (100)</li>
							<li><a href="/blog/archive/2005/5"> May </a> (53)</li>
							<li><a href="/blog/archive/2005/4"> April </a> (42)</li>
							<li><a href="/blog/archive/2005/3"> March </a> (41)</li>
							<li><a href="/blog/archive/2005/2"> February </a> (84)</li>
							<li><a href="/blog/archive/2005/1"> January </a> (31)</li>
					</ul>
				</li>
				<li>
					<a href="#">2004</a>
					<ul>
							<li><a href="/blog/archive/2004/12"> December </a> (49)</li>
							<li><a href="/blog/archive/2004/11"> November </a> (26)</li>
							<li><a href="/blog/archive/2004/10"> October </a> (26)</li>
							<li><a href="/blog/archive/2004/9"> September </a> (6)</li>
							<li><a href="/blog/archive/2004/4"> April </a> (10)</li>
					</ul>
				</li>

	</ul>
</nav>

                </header>
                <div class="banner">
                </div>
                
<div class="postsList">
		<article class="article-body">
			<time>
				<span>Sep 04</span>
				2017
			</time>
			<a href="/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office">
					<h2>When you forget to turn off the benchmark when you leave the office…</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>1 min</strong> <span class="collapse">| <strong>150 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=When you forget to turn off the benchmark when you leave the office…+https://ayende.com:443/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office&amp;title=When you forget to turn off the benchmark when you leave the office…','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>0 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/raven">raven</a></li>
								<li><a href="/blog/tags/performance">performance</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>On our Slack channel, I just got this:</p><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/When-you-forget-to_ACFF/image_2.png"><img width="918" height="97" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/When-you-forget-to_ACFF/image_thumb.png" border="0"></a></p><p>This is testing high write load on slow I/O device (a network drive). </p><p>We didn’t <em>actually</em> forget to turn off the benchmark when we left the office, this is part of our longevity / performance test suite, but it makes for a much better post title, I think you’ll agree.</p><p>By the way, this translate to over 16K writes per second sustained for hours on end. And this is testing our behavior on a network drive, because that is the only drive we had off hand with enough capacity for running such a test for long enough.</p><p>And then we just left it under load way over the weekend:</p><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/When-you-forget-to_ACFF/image_4.png"><img width="1121" height="115" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/When-you-forget-to_ACFF/image_thumb_1.png" border="0"></a></p>
			</div>
			<div class="read-more"><a href="/blog/179652/when-you-forget-to-turn-off-the-benchmark-when-you-leave-the-office">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Sep 01</span>
				2017
			</time>
			<a href="/blog/179589/optimizing-select-projections-part-iv-understand-dont-do">
					<h2><span class="seriesTitle">Optimizing select projections</span>Part IV–Understand, don’t do</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>382 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Optimizing select projections: Part IV–Understand, don’t do+https://ayende.com:443/blog/179589/optimizing-select-projections-part-iv-understand-dont-do via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179589/optimizing-select-projections-part-iv-understand-dont-do&amp;title=Optimizing select projections: Part IV–Understand, don’t do','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179589/optimizing-select-projections-part-iv-understand-dont-do', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179589/optimizing-select-projections-part-iv-understand-dont-do#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>0 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/challanges">challanges</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>This post is what the <a href="https://ayende.com/blog/posts/series/179585/optimizing-select-projections">entire series</a> has been building building toward to. In the previous post we have refactored our code to make it easier to build additional behaviors. Here is one such behavior, which uses the Esprima project to parse the code and see if it uses a pattern that we can optimize for. Let us see the code, then discuss what it does.</p><blockquote><script src="https://gist.github.com/ayende/703fd846c1899d799f1f8373ab190f8a.js"></script></blockquote><p>The new stuff is mostly in the TryProjectOptimized method. This method is making heavy use of the new C# features to do easy parsing of ASTs, and it really shows that the C# team is using C# to build the compiler (that is one of the common things that compiler writers do, make their own lives easier). Take this code even a couple of language versions back, and it would be much hard to read and work with.</p><p>At any rate, what this code is doing is search for an object literal that does simple assignment of properties. If it detect that, instead of calling into the JS engine, it will produce a delegate that will do just that directly. </p><p>The result is pretty much the same, but we have to do so much less. If we can’t detect a pattern that we recognize, we just fall back to the JS engine again, and get the pervious behavior.</p><p>This is pretty awesome thing to have, because if we detect a particular common pattern, we can optimize that quite easily. The code really lend itself to that approach now. </p><p>What about the performance? Well…</p><p>And this runs in 0.31 seconds on the 10K, 5K, 1K run.<ul><li>10K in 83 ms
<li>5K in 200 ms
<li>1K in 31 ms</li></ul><p>So that is <em>two</em> orders of magnitude for the 10K run. </p><p>An an exercise, try taking this code and teaching it how to recognize simple expressions like + and –. The <a href="https://gist.github.com/ayende/6ea9a048efbd34f8aa2b09bb347be200#file-selects-js">second projection example</a> is meant to give you some idea about that.</p><p>Oh, and one last thought, we are actually biased <em>against</em> the optimization. The Jint code produce results in formats that we need to pull the data from, and we aren’t accounting for that here. The optimize code can generate the output to be already in the format we need it to be ( the difference between the Dictionary and the JsValue).&nbsp;&nbsp; </p>
			</div>
			<div class="read-more"><a href="/blog/179589/optimizing-select-projections-part-iv-understand-dont-do">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 31</span>
				2017
			</time>
			<a href="/blog/179588/optimizing-select-projections-interlude-refactoring">
					<h2><span class="seriesTitle">Optimizing select projections</span>Interlude, refactoring</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>256 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Optimizing select projections: Interlude, refactoring+https://ayende.com:443/blog/179588/optimizing-select-projections-interlude-refactoring via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179588/optimizing-select-projections-interlude-refactoring&amp;title=Optimizing select projections: Interlude, refactoring','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179588/optimizing-select-projections-interlude-refactoring', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179588/optimizing-select-projections-interlude-refactoring#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>2 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/challanges">challanges</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>So we got an order of magnitude performance boost, without really doing much, to be honest. But the code is starting to look really ugly, and future optimizations are out until we fix it.</p><p>Since we don’t really care about the internal details, we can do two things in one move. First, we’ll cleanup the code by introducing a delegate that will abstract the handling and the second is that this delegate will also allow us to handle caching of additional values simple by way of capturing the delegate state.</p><p>Here is what the code looks like:</p><blockquote><script src="https://gist.github.com/ayende/e926d5e4173c69d493741d844f8a50bf.js"></script></blockquote><p>Note that we have it broken apart into distinct steps, and the ProjectViaJint method is self contained and any caching it needs is done internally. This is much needed refactoring if we want to be able to continue to optimize this code, and it runs in about the same speed as the previous version, so we didn’t hurt anything there.</p><p>With this in place, we can see how much better we can make things. </p><p>Before we go on, I want to emphasis that this code is actually making a lot of assumptions. The passed dictionary must always have the same set of fields, for example, otherwise we may see a value from a previous iteration. No null handling or error handling is in place, we aren’t showing the unpacking of the values from the JS env to our code, and plenty of other stuff. That isn’t that important at this point, because I’m showing the progression of optimizations, rather then production code.</p>
			</div>
			<div class="read-more"><a href="/blog/179588/optimizing-select-projections-interlude-refactoring">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 30</span>
				2017
			</time>
			<a href="/blog/179587/optimizing-select-projections-part-iii">
					<h2><span class="seriesTitle">Optimizing select projections</span>Part III</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>229 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Optimizing select projections: Part III+https://ayende.com:443/blog/179587/optimizing-select-projections-part-iii via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179587/optimizing-select-projections-part-iii&amp;title=Optimizing select projections: Part III','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179587/optimizing-select-projections-part-iii', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179587/optimizing-select-projections-part-iii#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>3 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/challanges">challanges</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>After optimizing the projection performance by so much by just caching the engine, I got to thinking, we are also creating a new JS object to pass the arguments every single time. What would happen if we’ll cache that?</p><p>Here is what I ended up with, again, all of this is pretty brute force (mainly because I’m writing these posts while the baby is asleep, and I’m trying to get as many of them out before she wakes up):</p><blockquote><script src="https://gist.github.com/ayende/5677d4cdeae16f0b8763b1cef7e48aba.js"></script></blockquote><p>I wouldn’t have expected this to be a dramatic boost, but we got:</p><p>And this runs in 0.57 seconds on the 10K, 5K, 1K run.<ul><li>10K in 413 ms
<li>5K in 110 ms
<li>1K in 45 ms</li></ul><p>That is also a third of the cost that we just saved. </p><p>This is interesting, so it is worth another check, there are other two potentially expensive operations here, the invocation of the method and the sending of arguments.</p><p>Trawling of the Jint code shows that we can remove some abstract by using ICallable directly, and we can cache the array of arguments, this all leads to:</p><blockquote><script src="https://gist.github.com/ayende/d29bde567928219235b047ab1e9adcb4.js"></script></blockquote><p>And this runs in 0.37 seconds on the 10K, 5K, 1K run.<ul><li>10K in 279 ms <li>5K in 59&nbsp; ms <li>1K in 32 ms</li></ul><p>And that is a wow. Because right now, without really doing much at all, we area already an order of magnitude higher then our first attempt, and we can do more.</p>
			</div>
			<div class="read-more"><a href="/blog/179587/optimizing-select-projections-part-iii">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 29</span>
				2017
			</time>
			<a href="/blog/179586/optimizing-select-projections-part-ii">
					<h2><span class="seriesTitle">Optimizing select projections</span>Part II</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>236 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Optimizing select projections: Part II+https://ayende.com:443/blog/179586/optimizing-select-projections-part-ii via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179586/optimizing-select-projections-part-ii&amp;title=Optimizing select projections: Part II','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179586/optimizing-select-projections-part-ii', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179586/optimizing-select-projections-part-ii#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>4 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/challanges">challanges</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>In <a href="https://ayende.com/blog/179585/optimizing-select-projections-part-i?key=ab9d50a874f24272979891c7964054e0">the previous post</a>, I showed how we can handle select projections and setup a perf test. The initial implementation we had run in about 4.4 seconds for our test. But it didn’t give any thought to performance. </p><p>Let us see if we can do better. The first thing to do is to avoid building the Jint engine and parsing the code all the time. The way we set things up, we wrap the actual object literal in a function, and there is no state, so we can reuse the previous engine instance without any issues. ;:</p><p>That means that we don’t need to pay the cost of creating a new engine, parsing the code, etc. Here is what this looks like:</p><blockquote><script src="https://gist.github.com/ayende/a7efdbbbefb949fd519231f9f48fdc96.js"></script></blockquote><p>Note that the cache key here is the raw projection, not the function we send to the entire, this allows us to avoid any string allocations in the common (cached) path.</p><p>And this runs in 0.75 seconds on the 10K, 5K, 1K run.<ul><li>10K in 574 ms</li><li>5K in 137 ms</li><li>1K in 51 ms</li></ul><p>Just this small change boosted our performance by a <em>major</em> margin.</p><p>Note that because the engines are not thread safe, to use that in a real application we’ll need to ensure thread safety. The way I did that is to have a pool of these engines for each projection and just use that, so an engine is always access in a single threaded mode. </p>
			</div>
			<div class="read-more"><a href="/blog/179586/optimizing-select-projections-part-ii">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 28</span>
				2017
			</time>
			<a href="/blog/179585/optimizing-select-projections-part-i">
					<h2><span class="seriesTitle">Optimizing select projections</span>Part I</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>240 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Optimizing select projections: Part I+https://ayende.com:443/blog/179585/optimizing-select-projections-part-i via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179585/optimizing-select-projections-part-i&amp;title=Optimizing select projections: Part I','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179585/optimizing-select-projections-part-i', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179585/optimizing-select-projections-part-i#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>1 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/challanges">challanges</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p>I spoke about designing for performance in my <a href="https://ayende.com/blog/179554/future-proofing-for-crazy-performance-optimizations">previous post</a> and I thought it would be in interesting series&nbsp; of blog posts. The task I have is that we have a data source of some kind, in our case, I decided to make the task as simple as possible and define the source data as a Dictionary&lt;string, object&gt;, without allowing nesting of data.</p><p>We want the user to be able to provide a custom way to project data from that dictionary. Here are a few ways to do that:</p><blockquote><script src="https://gist.github.com/ayende/6ea9a048efbd34f8aa2b09bb347be200.js"></script></blockquote><p>And here is the data source in question:</p><blockquote><script src="https://gist.github.com/ayende/a266681d170d3127544e1dc729619c51.js"></script></blockquote><p>Obviously the user can make the select projections as complex as they wish. But I think that these three sample give us a good representation of the complexity. We’ll also treat them a bit differently, with regards to their likelihood. So when testing, we’ll check that the first projection is run 10,000 times, then second projection is run 5,000 times and the last projection is run 1,000 times. </p><p>With the layout of the land settled, let us see how we can get this actually working. I’m going to use Jint and solve the issue in a very brute force manner. </p><p>Here is the initial implementation:</p><blockquote><script src="https://gist.github.com/ayende/1534b86ebeb2151edeab844fa6341dd0.js"></script></blockquote><p>And this runs in 4.4 seconds on the 10K, 5K, 1K run. </p><ul><li>10K in 2,756 ms</li><li>5K in 1,310 ms</li><li>1K in 314 ms</li></ul><p>I’m pretty sure that we can do better, and we’ll look at that in the next post.</p>
			</div>
			<div class="read-more"><a href="/blog/179585/optimizing-select-projections-part-i">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 25</span>
				2017
			</time>
			<a href="/blog/179554/future-proofing-for-crazy-performance-optimizations">
					<h2>Future proofing for crazy performance optimizations</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>306 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Future proofing for crazy performance optimizations+https://ayende.com:443/blog/179554/future-proofing-for-crazy-performance-optimizations via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179554/future-proofing-for-crazy-performance-optimizations&amp;title=Future proofing for crazy performance optimizations','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179554/future-proofing-for-crazy-performance-optimizations', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179554/future-proofing-for-crazy-performance-optimizations#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>0 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/architecture">architecture</a></li>
								<li><a href="/blog/tags/performance">performance</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p><img align="right" style="float: right; display: inline;" alt="Image result for javascript object literal" src="https://blogmedia.evbstatic.com/wp-content/uploads/engineering/2016/04/20142926/object_literal.png"></p><p>I talked about the new query language and javascript performance quite a bit, but I wanted post about a conversation that we had at the office. It involves the following design decision:</p><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/Planning-for-the-future_39ED/image_2.png"><img width="582" height="163" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/Planning-for-the-future_39ED/image_thumb.png" border="0"></a></p><p>We chose to use an object literal syntax as the complex projection mechanism for several reasons. First, it is easy to implement right now, since we can throw that to the JS engine and let it handle this. Second, it is very readable and given that we are a JSON document database, should be very familiar for users. But the third reason isn’t so obvious. It is using this syntax because we can quite easily optimize most common scenarios very easily. </p><p>I can take the object literal and parse that into an AST, and instead of sending that to a JS engine, I can execute that directly. Even if I’m going to implement a trivial AST traverser that can the most basic of operations, that would be enough to handle a lot of scenarios, and I <em>don’t</em> have to be 100%. I can implement an AST walked and run that, and if I find that there is something there that I can’t support I can just fallback to the JS engine. </p><p>Since my AST interpreter wouldn’t need any of the JS engine behaviors, it can be implemented much more efficiently and with greater focus. For that matter, I don’t have to limit myself to just interpreting this AST. I can also generate IL code on the fly to evaluate this instead, given me an even higher speed boost. </p><p>Basically, this syntax give us at least three levels of optimization opportunities to explore as needed. </p>
			</div>
			<div class="read-more"><a href="/blog/179554/future-proofing-for-crazy-performance-optimizations">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 24</span>
				2017
			</time>
			<a href="/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out">
					<h2>With performance, test, benchmark and be ready to back out</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>5 min</strong> <span class="collapse">| <strong>979 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=With performance, test, benchmark and be ready to back out+https://ayende.com:443/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out&amp;title=With performance, test, benchmark and be ready to back out','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>16 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/performance">performance</a></li>
								<li><a href="/blog/tags/raven">raven</a></li>
								<li><a href="/blog/tags/programming">programming</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p><a href="https://i1.wp.com/www.adventuresinpoortaste.com/wp-content/uploads/2017/08/SQUIRRELGIRL-5.jpeg?w=1349"><img width="240" height="365" title="image" align="right" style="border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/With-performance-test-benchmark-and-be-r_B4C0/image_6.png" border="0"></a></p><p>Last week <a href="https://ayende.com/blog/179457/optimizing-javascript-and-solving-the-halting-problem-part-i">I spoke</a> about our attempt to switch our internal JS engine to Jurassic from Jint. The primary motivation was speed, Jint is an interpreter, while Jurassic is compiled to IL and eventually machine code. That is a <em>good</em> thing from a performance standpoint, and the benchmarks we looked at, both external nd internal, told us that we could expect anything between twice as fast and ten times as fast. That was enough to convince me to go for it. I have a lot of plans for doing more with javascript, and if it can be fast enough, that would be just gravy. </p><p>So we did that, we took all the places in our code where we were doing something with Jint and moved them to Jurrasic. Of course, that isn’t nearly as simple as it sounds. We have a lot of places like that, and a lot of already existing code. But we also took the time to do this properly, of making sure that there is a single namespace that is aware of JS execution in RavenDB and hide that functionality from the rest of the code. </p><p>Now, one of the things that we do with the scripts we execute is expose to them both functions that they can call and documents to look at and mutate. Consider the following patch script:</p><blockquote><p>this.NumberOfOrders++;</p></blockquote><p>This is on a customer document that may be pretty big, as in, tens of KB or higher. We don’t want to have to serialize the whole document into the JS environment and then serialize it back, that road lead to a lot of allocations and extreme performance costs. No, already with Jint we have implemented a wrapper object that we expose to the JS environment that would do lazy evaluation of just the properties that were needed by the script and track all changes so we can reserialize things more easily.</p><p>Moving to Jurassic had broken all of that, so we have to re-write it all. The good thing is that we already knew what we wanted, and how we wanted to do it, it was just a matter for us to figure out how Jurassic allows it. There was an <a href="http://www.adventuresinpoortaste.com/2017/08/04/marvel-preview-the-unbeatable-squirrel-girl-23/">epic coding montage</a> (see image on the right) and we got it all back into working state. </p><p>Along the way, we paid down a lot of technical debt&nbsp; around consistency and exposure of operations and made it easier all around to work with JS from inside RavenDB. hate javascript.</p><p>After a lot of time, we had everything stable enough so we could now test RavenDB with the new JS engine. The results were… abysmal. I mean, truly and horribly so. </p><p>But that wasn’t right, we specifically sought a <em>fast</em> JS engine, and we did everything right. We cached the generated values, we reused instances, we didn’t serialize / deserialize too much and we had done our homework. We had benchmarks that showed very clearly that Jurassic was the faster engine. Feeling very stupid, we started looking at the before and after profiling results and everything became clear and I hate javascript.</p><p>Jurassic <em>is</em> the faster engine, if most of your work is actually done inside the script. But most of the time, the whole <em>point</em> of the script is to do very little and direct the rest of the code in what it is meant to do. That is where we actually pay the most costs. And in Jurassic, this is really expensive. Also, I hate javascript. </p><p>It was really painful, but after considering this for a while, we decided to switch back to Jint. We also upgraded to the latest release of Jint and got some really nice features in the box. One of the things that I’m excited about is that it has a ES6 parser, even if it doesn’t fully support all the ES6 features. In particular, I really want to look implementing arrow functions for jint, because it would be very cool for our usecase, but this will be later, because I hate javascript.</p><p>Instead of reverting the whole of our work, we decided to take this as a practice run of the refactoring to isolate us from the JS engine. The answer is that it was much easier to switch from Jurassic to Jint then it was the other way around, but it is still not a fun process. There is too much that we depend on. But this is a really great lesson in understanding what we are paying for. We got a great deal of refactoring done, and I’m much happier about both our internal API and the exposed interfaces that we give to users. This is going to be much easier to explain now. Oh, and I hate javascript. </p><p>I had to deal with three different javascript engines (two versions of Jint and Jurassic) at a pretty deep level. For example, one of the things we expose in our scripts is the notion of null propagation. So you can write code like this:</p><blockquote><p>return user.Address.City.Street.Number.StopAlready;</p></blockquote><p>And even if you have missing properties along the way, the result will be null, and not an error, like normal. That requires quite deep integration with the engine in question and lead to some tough questions about the meaning of the universe and the role of keyboards in our life versus the utility of punching bugs (not a typo). </p><p>The actual code we ended up with for this feature is pretty small and quite lovely, but <em>getting</em>&nbsp; there was a job and a half, causing me to hate javascript, and I wasn’t <em>that</em> fond of it in the first place. </p><p>I’ll have the performance numbers comparing all three editions sometimes next week. In the meantime, I’m going to do something that isn’t javascript. </p>
			</div>
			<div class="read-more"><a href="/blog/179553/with-performance-test-benchmark-and-be-ready-to-back-out">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 23</span>
				2017
			</time>
			<a href="/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more">
					<h2>Solving a problem in a way that doesn’t generate dozens more</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>2 min</strong> <span class="collapse">| <strong>393 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Solving a problem in a way that doesn’t generate dozens more+https://ayende.com:443/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more&amp;title=Solving a problem in a way that doesn’t generate dozens more','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>7 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/design">design</a></li>
								<li><a href="/blog/tags/architecture">architecture</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p><a href="https://ayende.com/blog/179489/breaking-the-language-barrier">Yesterday</a> I showed off some of the new features in RQL, and in particular, two very cool features, the ability to declare functions and the ability to project an object literal directly from the select.</p><p>Both of these features are shown here, including usage demonstration:</p><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/Solving-a-problem-in-a-way-that-doesnt-g_BAC6/image_2.png"><img width="762" height="381" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/Solving-a-problem-in-a-way-that-doesnt-g_BAC6/image_thumb.png" border="0"></a></p><p>Take a minute to read the query, then consider what we are doing here. </p><p>One of the things we want to enable is to have a powerful query capabilities. We started with what SQL syntax and very quickly hit the wall. Leaving aside the issue of working with just rectangular format of SQL, there is a huge problem here.</p><p>Something like N1QL or the Noise syntax have both seems that you can deal with non rectangular formats with enough effort. But the problem is that there is really no really good way to express complex imperative stuff easily. For example, N1QL has about 30 functions just to deal with arrays, and 40 just for dates. And those are just the first I looked up that were easy to count.</p><p>Going with something with a SQL syntax, including subqueries, complex nesting of expressions, etc would have led to a really complex language. Both from the point of view of implementation and from the point of view of the users.</p><p>On the other hand, with RQL, you get the familiar query language, and if you want to just get some data to display, you can do that. When you need to do more, you move to using the object literal syntax and if you need to apply more logic, you write a small function for that and call it.</p><p>Imagine write the code above in SQL (just the fact that the Nicks array is on a separate table means that you’ll have a correlated subquery there), and this is a pretty simple query. Choosing this approach means that we actually have very little expected support burden.</p><p>That is important, because with the other option I could absolutely see a lot of requests for “can you add a function to do X”, “how do I add my own function” popping up all the time in the support channels. This way, we give it all to you already and the solution is self contained and extensible as needed very easily.</p>
			</div>
			<div class="read-more"><a href="/blog/179521/solving-a-problem-in-a-way-that-doesnt-generate-dozens-more">read more ›</a></div>
		</article>
		<article class="article-body">
			<time>
				<span>Aug 22</span>
				2017
			</time>
			<a href="/blog/179489/breaking-the-language-barrier">
					<h2>Breaking the language barrier</h2>
			</a>
			<div class="clearfix"></div>
			<div class="timetoread">

				<div>
					<span class="glyphicon glyphicon-time" aria-hidden="true"></span>
					<span class="collapse"> time to read</span> <strong>5 min</strong> <span class="collapse">| <strong>916 words</strong></span>
				</div>
			</div>
			<hr />
			<div class="postData">
				<a href='http://twitter.com/intent/tweet?status=Breaking the language barrier+https://ayende.com:443/blog/179489/breaking-the-language-barrier via @ayende'>
					<span class="socicon twitter">a</span><span>Tweet</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="window.open('http://www.facebook.com/sharer/sharer.php?u=https://ayende.com:443/blog/179489/breaking-the-language-barrier&amp;title=Breaking the language barrier','sharer','toolbar=0,status=0,width=580,height=325');" href="javascript: void(0)">
					<span class="socicon facebook">b</span><span>share</span>
				</a>
				<a style='text-decoration:none;' type="icon_link" onclick="popUp=window.open('https://plus.google.com/share?url=https://ayende.com:443/blog/179489/breaking-the-language-barrier', 'popupwindow', 'scrollbars=yes,width=600,height=400');popUp.focus();return false;" href="javascript: void(0)">
					<span class="socicon gplus">c</span><span>share</span>
				</a>
				<a href="/blog/179489/breaking-the-language-barrier#comments">
					<span class="glyphicon glyphicon-comment" aria-hidden="true"></span><span>10 comments</span>
				</a>
					<div class="tags pull-right-lg">
						<span class="glyphicon glyphicon-tag" aria-hidden="true"></span> Tags:
						<ul>
								<li><a href="/blog/tags/raven">raven</a></li>
								<li><a href="/blog/tags/programming">programming</a></li>
								<li><a href="/blog/tags/performance">performance</a></li>
						</ul>
					</div>
				<div class="clearfix"></div>
			</div>
			<div class="articleContent">
				<p><img align="right" style="float: right; display: inline;" src="http://www.vanondertotbovenwijs.nl/uploads/8/5/8/1/8581288/afbeelding3_orig.png">In RavenDB 4.0, we decided to finally bite the bullet and write our own query language. That led to a lot of really complex decisions that we had to make. I already posted about the language and you saw some first drafts. RQL is meant to be instantly familiar to anyone who used SQL before. </p><p>At the same time, this led to <em>issues</em>. In particular, the major issue is that SQL as a language is meant to handle rectangular tables, and RavenDB isn’t storing data in tables.&nbsp; For that matter, we also want to give our users the ability to express themselves fully in the query language, that means support for complex queries and complex projections.</p><p>For a while, we explored the option of supporting nested selects as the way to express these semantics, but that was pretty horrible, both in terms of the complexity of the implementation and in terms of the complexity of the language. Instead, we decided that take only the good parts out of SQL <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/wlEmoticon-smile_2.png">.</p><p>What do I mean by that? Well, here is a pretty simple query:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_2.png"><img width="324" height="53" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb.png" border="0"></a></p></blockquote><p>And here is how we can ask for specific fields:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_4.png"><img width="603" height="100" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_1.png" border="0"></a></p></blockquote><p>You’ll note that we moved the select clause to the end of the query. The idea being that the syntax will hint to the user about the order of operations in the pipeline.</p><p>Next we add some filtering, giving us:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_6.png"><img width="735" height="144" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_2.png" border="0"></a></p></blockquote><p>This isn’t really interesting except for the part where implementing this was a lot of fun. Things become both more interesting and more obvious when we look at a full query, with almost everything there:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_8.png"><img width="870" height="296" title="image" style="border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_3.png" border="0"></a><br><br></p></blockquote><p>And again, this is pretty boring, because except for the clauses location, you might as well write SQL. So let us see what happens when we start mixing some of RavenDB’s own operations. </p><p>Here is how we can traverse the object graph on the database side:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_10.png"><img width="995" height="344" title="image" style="border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_4.png" border="0"></a></p></blockquote><p>This is an interesting example, because you can see that we have traversed the path of the relation and are able to fetch not just the data from the documents we are looking for, but also the related documents. </p><p>It is important to note that this happens <em>after</em> the where, so you can’t filter on that (but you can plug this in the index, but that is a story for another time). I like this syntax, because it is very clear about what is going on, but at the same time, it is also very limited. If I want anything that isn’t rectangular, I need to jump through hops. Instead, let us try something else…</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_20.png"><img width="827" height="234" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_9.png" border="0"></a></p></blockquote><p>The idea is that we can use a JavaScript object literal in place of the select. Instead of fighting with the language and have to fight it, we have a very natural way to express projections from RavenDB. </p><p>The cool part is that you can apply logic as well, so things like string concatenation or logic in the select clause are absolutely permitted. However, take a look at the example, we have code duplication here, in the formatting for customer and contact names. We can do something about it, though:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_12.png"><img width="1032" height="545" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_5.png" border="0"></a></p></blockquote><p><br>The idea is that we also have a way to define functions to hold common logic and handle the more complex details if we need to. In this manner, instead of having to define and deploy transformers, you can define that directly in your query. </p><p>Naturally, if you want to calculate the Mandelbrot set inside the query, that is… suspect, but the idea is that having JavaScript applied on the results of the query give us a lot more freedom and easy of use. </p><p>The actual client side in C# is going to remain unchanged and was already updated to talk to the new backend, but in our dynamic language clients, I think we’ll work to expose this more, since it is a much better fit in such environments.</p><p>Finally, here is the full query, with everything that we can do:</p><blockquote><p><a href="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_14.png"><img width="1225" height="770" title="image" style="margin: 0px; border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="https://ayende.com/blog/Images/Open-Live-Writer/The-language-barrier_9989/image_thumb_6.png" border="0"></a></p></blockquote><p>Don’t focus too much the actual content of the queries, they are mostly there to show off the syntax. The last query now has the notion of <em>include </em>directly in the query. As an aside, you can now use load and include to handle tertiary includes. I didn’t actually set out to build them, but they came naturally from the syntax, and they are probably going to stay.</p><p>I have a lot more to say about this, but I’m so excited about this feature that I just got to get it out there. And yes, as you can see, you can declare several functions, and you can also call them from one another so there is a lot of power at the table right now.</p>
			</div>
			<div class="read-more"><a href="/blog/179489/breaking-the-language-barrier">read more ›</a></div>
		</article>
</div>
<div class="clearfix"></div>
<nav>
    <hr/>
	<ul id="paginationList" class="pagination"></ul>
	<div class="clearfix"></div>
</nav>

            </div>
            <section class="rightSide col-sm-8 col-sm-offset-4 col-md-3 col-md-offset-0 col-lg-2">
                


<div id="futurePosts">
    <h4>FUTURE POSTS</h4>
        <ol>
                <li>The etag is dead, long live the change vector - <em>about one hour from now</em></li>
                <li>Distributed work assignment in RavenDB 4.0 - <em>about one day from now</em></li>
                <li>Dynamic nodes distribution in RavenDB 4.0 - <em>2 days from now</em></li>
                <li>JS execution performance and a whole lot of effort… - <em>3 days from now</em></li>
        </ol>
            <p>There are posts all the way to Sep 08, 2017</p>
</div>

<div id="postsSeries">
    <h4>RECENT SERIES</h4>

        <ol>
                <li>
                    <a href="/blog/posts/series/179585/optimizing-select-projections">
                        <strong>
                            Optimizing select projections
                        </strong>
                    </a> <em>(5)</em>:<br/>
                    <em>01 Sep 2017</em> - Part IV&ndash;Understand, don&rsquo;t do
                </li>
                <li>
                    <a href="/blog/posts/series/179457/optimizing-javascript-and-solving-the-halting-problem">
                        <strong>
                            Optimizing JavaScript and solving the halting problem
                        </strong>
                    </a> <em>(2)</em>:<br/>
                    <em>18 Aug 2017</em> - Part II
                </li>
                <li>
                    <a href="/blog/posts/series/178083/ravendb-4-0">
                        <strong>
                            RavenDB 4.0
                        </strong>
                    </a> <em>(12)</em>:<br/>
                    <em>14 Aug 2017</em> - Maintaining transaction boundary integrity in a distributed cluster
                </li>
                <li>
                    <a href="/blog/posts/series/179329/public-service-announcement">
                        <strong>
                            Public Service Announcement
                        </strong>
                    </a> <em>(2)</em>:<br/>
                    <em>11 Aug 2017</em> - ConcurrentDictionary.Count is locking
                </li>
                <li>
                    <a href="/blog/posts/series/178689/pr-review">
                        <strong>
                            PR Review
                        </strong>
                    </a> <em>(4)</em>:<br/>
                    <em>10 Aug 2017</em> - Errors, errors and more errors
                </li>
        </ol>
        <a href="/blog/posts/series">View all series</a>
</div>
<div id="recentComments">
    <h4>RECENT COMMENTS</h4>
    <ul>
            <li>
                <div>
                    <a href="/blog/179588/optimizing-select-projections-interlude-refactoring#comment2">
                        <strong class="comment-body">Rafal,
ICallable is an interface defined by Jint that JS functions implement.</strong>
                    </a>
                </div>
	            <div>
		            <strong>By</strong>&nbsp;Oren Eini on <em>Optimizing select projections: Interlude, refactoring</em>
	            </div>
            </li>
            <li>
                <div>
                    <a href="/blog/179588/optimizing-select-projections-interlude-refactoring#comment1">
                        <strong class="comment-body">really nice out variable declaration shortcut, first time i see it
btw, what is ICallable?</strong>
                    </a>
                </div>
	            <div>
		            <strong>By</strong>&nbsp;Rafal on <em>Optimizing select projections: Interlude, refactoring</em>
	            </div>
            </li>
            <li>
                <div>
                    <a href="/blog/179587/optimizing-select-projections-part-iii#comment3">
                        <strong class="comment-body">Yes, the intermediate steps are very important for the big picture. ... I was just reading these posts and my mind was skippi...</strong>
                    </a>
                </div>
	            <div>
		            <strong>By</strong>&nbsp;Pop Catalin on <em>Optimizing select projections: Part III</em>
	            </div>
            </li>
            <li>
                <div>
                    <a href="/blog/179587/optimizing-select-projections-part-iii#comment2">
                        <strong class="comment-body">Pop Catalin,
Actually, that is probably the end goal in the end, but the road is pretty cool along the way.
And it is impor...</strong>
                    </a>
                </div>
	            <div>
		            <strong>By</strong>&nbsp;Oren Eini on <em>Optimizing select projections: Part III</em>
	            </div>
            </li>
            <li>
                <div>
                    <a href="/blog/179587/optimizing-select-projections-part-iii#comment1">
                        <strong class="comment-body">Even thought this is interesting series, by now we all know where you&#39;ll end up in the end: 

The query projection will be ...</strong>
                    </a>
                </div>
	            <div>
		            <strong>By</strong>&nbsp;Pop Catalin on <em>Optimizing select projections: Part III</em>
	            </div>
            </li>
    </ul>
</div>		<div id="syndication">
			<h4>Syndication</h4>
			<table>
<tr>
<td>
Main feed
</td>
<td>
<a href="http://feeds.feedburner.com/AyendeRahien"><img src="http://feeds.feedburner.com/~fc/AyendeRahien?bg=FFAA00&amp;fg=000000" height="26" width="88" style="border:0" alt="Feed Stats" /></a>
</td>
</tr>
<tr>
<td>Comments feed &nbsp;</td>
<td> <a href="http://feeds.feedburner.com/ayende/coments"><img src="http://feeds.feedburner.com/~fc/ayende/coments?bg=FFAA00&amp;fg=993300&amp;anim=0" height="26" width="88" style="border:0" alt="Comments Feed Stats" /></a></td>
</table>
		</div>

            </section>
        </div>
    </div>

        <script type="text/javascript">
            window.RaccoonRoutes = {};
        </script>
        <!--[if IE 8]>
            <script type="text/javascript" src="~/Content/js/respond.src.js"></script>
        <![endif]-->
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
<script src="/blog/Content/js/main?v=IFbqVBNkXC4CILndT4qmS6EReEuXmSwatglJ9DGXaEM1"></script>

	<script>
		window.twttr = (function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "https://platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function (f) { t._e.push(f); }; return t; }(document, "script", "twitter-wjs"));
	</script>
	<script>
		var total = 643;

		$("#paginationList").twbsPagination({
			totalPages: (total > 0) ? total : 1,
			visiblePages: 5,
			href: '?page={{number}}'
		});
	</script>
            <script type="text/javascript">
                var _gaq = _gaq || [];
                _gaq.push(['_setAccount', 'UA-5476351-1']);
                _gaq.push(['_trackPageview']);

                (function () {
                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                })();
            </script> </body>

</html>